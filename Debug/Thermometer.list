
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d38  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d84  08009d84  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  08009d84  08009d84  00019d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d8c  08009d8c  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08009d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          000020b0  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002238  20002238  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e768  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c29  00000000  00000000  0003e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00042550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e00  00000000  00000000  000434b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002464d  00000000  00000000  000442b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015854  00000000  00000000  000688fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c72de  00000000  00000000  0007e151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014542f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040e4  00000000  00000000  00145484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ea8 	.word	0x08008ea8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	08008ea8 	.word	0x08008ea8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_uldivmod>:
 8000994:	b953      	cbnz	r3, 80009ac <__aeabi_uldivmod+0x18>
 8000996:	b94a      	cbnz	r2, 80009ac <__aeabi_uldivmod+0x18>
 8000998:	2900      	cmp	r1, #0
 800099a:	bf08      	it	eq
 800099c:	2800      	cmpeq	r0, #0
 800099e:	bf1c      	itt	ne
 80009a0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009a4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009a8:	f000 b96e 	b.w	8000c88 <__aeabi_idiv0>
 80009ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009b4:	f000 f806 	bl	80009c4 <__udivmoddi4>
 80009b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c0:	b004      	add	sp, #16
 80009c2:	4770      	bx	lr

080009c4 <__udivmoddi4>:
 80009c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c8:	9d08      	ldr	r5, [sp, #32]
 80009ca:	4604      	mov	r4, r0
 80009cc:	468c      	mov	ip, r1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f040 8083 	bne.w	8000ada <__udivmoddi4+0x116>
 80009d4:	428a      	cmp	r2, r1
 80009d6:	4617      	mov	r7, r2
 80009d8:	d947      	bls.n	8000a6a <__udivmoddi4+0xa6>
 80009da:	fab2 f282 	clz	r2, r2
 80009de:	b142      	cbz	r2, 80009f2 <__udivmoddi4+0x2e>
 80009e0:	f1c2 0020 	rsb	r0, r2, #32
 80009e4:	fa24 f000 	lsr.w	r0, r4, r0
 80009e8:	4091      	lsls	r1, r2
 80009ea:	4097      	lsls	r7, r2
 80009ec:	ea40 0c01 	orr.w	ip, r0, r1
 80009f0:	4094      	lsls	r4, r2
 80009f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80009f6:	0c23      	lsrs	r3, r4, #16
 80009f8:	fbbc f6f8 	udiv	r6, ip, r8
 80009fc:	fa1f fe87 	uxth.w	lr, r7
 8000a00:	fb08 c116 	mls	r1, r8, r6, ip
 8000a04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a08:	fb06 f10e 	mul.w	r1, r6, lr
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d909      	bls.n	8000a24 <__udivmoddi4+0x60>
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a16:	f080 8119 	bcs.w	8000c4c <__udivmoddi4+0x288>
 8000a1a:	4299      	cmp	r1, r3
 8000a1c:	f240 8116 	bls.w	8000c4c <__udivmoddi4+0x288>
 8000a20:	3e02      	subs	r6, #2
 8000a22:	443b      	add	r3, r7
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b2a4      	uxth	r4, r4
 8000a28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a38:	45a6      	cmp	lr, r4
 8000a3a:	d909      	bls.n	8000a50 <__udivmoddi4+0x8c>
 8000a3c:	193c      	adds	r4, r7, r4
 8000a3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a42:	f080 8105 	bcs.w	8000c50 <__udivmoddi4+0x28c>
 8000a46:	45a6      	cmp	lr, r4
 8000a48:	f240 8102 	bls.w	8000c50 <__udivmoddi4+0x28c>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	443c      	add	r4, r7
 8000a50:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a54:	eba4 040e 	sub.w	r4, r4, lr
 8000a58:	2600      	movs	r6, #0
 8000a5a:	b11d      	cbz	r5, 8000a64 <__udivmoddi4+0xa0>
 8000a5c:	40d4      	lsrs	r4, r2
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e9c5 4300 	strd	r4, r3, [r5]
 8000a64:	4631      	mov	r1, r6
 8000a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6a:	b902      	cbnz	r2, 8000a6e <__udivmoddi4+0xaa>
 8000a6c:	deff      	udf	#255	; 0xff
 8000a6e:	fab2 f282 	clz	r2, r2
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	d150      	bne.n	8000b18 <__udivmoddi4+0x154>
 8000a76:	1bcb      	subs	r3, r1, r7
 8000a78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a7c:	fa1f f887 	uxth.w	r8, r7
 8000a80:	2601      	movs	r6, #1
 8000a82:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a86:	0c21      	lsrs	r1, r4, #16
 8000a88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a90:	fb08 f30c 	mul.w	r3, r8, ip
 8000a94:	428b      	cmp	r3, r1
 8000a96:	d907      	bls.n	8000aa8 <__udivmoddi4+0xe4>
 8000a98:	1879      	adds	r1, r7, r1
 8000a9a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0xe2>
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	f200 80e9 	bhi.w	8000c78 <__udivmoddi4+0x2b4>
 8000aa6:	4684      	mov	ip, r0
 8000aa8:	1ac9      	subs	r1, r1, r3
 8000aaa:	b2a3      	uxth	r3, r4
 8000aac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ab0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ab8:	fb08 f800 	mul.w	r8, r8, r0
 8000abc:	45a0      	cmp	r8, r4
 8000abe:	d907      	bls.n	8000ad0 <__udivmoddi4+0x10c>
 8000ac0:	193c      	adds	r4, r7, r4
 8000ac2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ac6:	d202      	bcs.n	8000ace <__udivmoddi4+0x10a>
 8000ac8:	45a0      	cmp	r8, r4
 8000aca:	f200 80d9 	bhi.w	8000c80 <__udivmoddi4+0x2bc>
 8000ace:	4618      	mov	r0, r3
 8000ad0:	eba4 0408 	sub.w	r4, r4, r8
 8000ad4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ad8:	e7bf      	b.n	8000a5a <__udivmoddi4+0x96>
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0x12e>
 8000ade:	2d00      	cmp	r5, #0
 8000ae0:	f000 80b1 	beq.w	8000c46 <__udivmoddi4+0x282>
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	e9c5 0100 	strd	r0, r1, [r5]
 8000aea:	4630      	mov	r0, r6
 8000aec:	4631      	mov	r1, r6
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f683 	clz	r6, r3
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	d14a      	bne.n	8000b90 <__udivmoddi4+0x1cc>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0x140>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80b8 	bhi.w	8000c74 <__udivmoddi4+0x2b0>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0103 	sbc.w	r1, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	468c      	mov	ip, r1
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d0a8      	beq.n	8000a64 <__udivmoddi4+0xa0>
 8000b12:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b16:	e7a5      	b.n	8000a64 <__udivmoddi4+0xa0>
 8000b18:	f1c2 0320 	rsb	r3, r2, #32
 8000b1c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b20:	4097      	lsls	r7, r2
 8000b22:	fa01 f002 	lsl.w	r0, r1, r2
 8000b26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b2a:	40d9      	lsrs	r1, r3
 8000b2c:	4330      	orrs	r0, r6
 8000b2e:	0c03      	lsrs	r3, r0, #16
 8000b30:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b34:	fa1f f887 	uxth.w	r8, r7
 8000b38:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb06 f108 	mul.w	r1, r6, r8
 8000b44:	4299      	cmp	r1, r3
 8000b46:	fa04 f402 	lsl.w	r4, r4, r2
 8000b4a:	d909      	bls.n	8000b60 <__udivmoddi4+0x19c>
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000b52:	f080 808d 	bcs.w	8000c70 <__udivmoddi4+0x2ac>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 808a 	bls.w	8000c70 <__udivmoddi4+0x2ac>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	443b      	add	r3, r7
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b281      	uxth	r1, r0
 8000b64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b70:	fb00 f308 	mul.w	r3, r0, r8
 8000b74:	428b      	cmp	r3, r1
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x1c4>
 8000b78:	1879      	adds	r1, r7, r1
 8000b7a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000b7e:	d273      	bcs.n	8000c68 <__udivmoddi4+0x2a4>
 8000b80:	428b      	cmp	r3, r1
 8000b82:	d971      	bls.n	8000c68 <__udivmoddi4+0x2a4>
 8000b84:	3802      	subs	r0, #2
 8000b86:	4439      	add	r1, r7
 8000b88:	1acb      	subs	r3, r1, r3
 8000b8a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b8e:	e778      	b.n	8000a82 <__udivmoddi4+0xbe>
 8000b90:	f1c6 0c20 	rsb	ip, r6, #32
 8000b94:	fa03 f406 	lsl.w	r4, r3, r6
 8000b98:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b9c:	431c      	orrs	r4, r3
 8000b9e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ba2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ba6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000baa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bae:	431f      	orrs	r7, r3
 8000bb0:	0c3b      	lsrs	r3, r7, #16
 8000bb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bb6:	fa1f f884 	uxth.w	r8, r4
 8000bba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bc2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bc6:	458a      	cmp	sl, r1
 8000bc8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bcc:	fa00 f306 	lsl.w	r3, r0, r6
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x220>
 8000bd2:	1861      	adds	r1, r4, r1
 8000bd4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bd8:	d248      	bcs.n	8000c6c <__udivmoddi4+0x2a8>
 8000bda:	458a      	cmp	sl, r1
 8000bdc:	d946      	bls.n	8000c6c <__udivmoddi4+0x2a8>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4421      	add	r1, r4
 8000be4:	eba1 010a 	sub.w	r1, r1, sl
 8000be8:	b2bf      	uxth	r7, r7
 8000bea:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bee:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bf2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000bf6:	fb00 f808 	mul.w	r8, r0, r8
 8000bfa:	45b8      	cmp	r8, r7
 8000bfc:	d907      	bls.n	8000c0e <__udivmoddi4+0x24a>
 8000bfe:	19e7      	adds	r7, r4, r7
 8000c00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c04:	d22e      	bcs.n	8000c64 <__udivmoddi4+0x2a0>
 8000c06:	45b8      	cmp	r8, r7
 8000c08:	d92c      	bls.n	8000c64 <__udivmoddi4+0x2a0>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4427      	add	r7, r4
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	eba7 0708 	sub.w	r7, r7, r8
 8000c16:	fba0 8902 	umull	r8, r9, r0, r2
 8000c1a:	454f      	cmp	r7, r9
 8000c1c:	46c6      	mov	lr, r8
 8000c1e:	4649      	mov	r1, r9
 8000c20:	d31a      	bcc.n	8000c58 <__udivmoddi4+0x294>
 8000c22:	d017      	beq.n	8000c54 <__udivmoddi4+0x290>
 8000c24:	b15d      	cbz	r5, 8000c3e <__udivmoddi4+0x27a>
 8000c26:	ebb3 020e 	subs.w	r2, r3, lr
 8000c2a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c2e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c32:	40f2      	lsrs	r2, r6
 8000c34:	ea4c 0202 	orr.w	r2, ip, r2
 8000c38:	40f7      	lsrs	r7, r6
 8000c3a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c3e:	2600      	movs	r6, #0
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	462e      	mov	r6, r5
 8000c48:	4628      	mov	r0, r5
 8000c4a:	e70b      	b.n	8000a64 <__udivmoddi4+0xa0>
 8000c4c:	4606      	mov	r6, r0
 8000c4e:	e6e9      	b.n	8000a24 <__udivmoddi4+0x60>
 8000c50:	4618      	mov	r0, r3
 8000c52:	e6fd      	b.n	8000a50 <__udivmoddi4+0x8c>
 8000c54:	4543      	cmp	r3, r8
 8000c56:	d2e5      	bcs.n	8000c24 <__udivmoddi4+0x260>
 8000c58:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c5c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c60:	3801      	subs	r0, #1
 8000c62:	e7df      	b.n	8000c24 <__udivmoddi4+0x260>
 8000c64:	4608      	mov	r0, r1
 8000c66:	e7d2      	b.n	8000c0e <__udivmoddi4+0x24a>
 8000c68:	4660      	mov	r0, ip
 8000c6a:	e78d      	b.n	8000b88 <__udivmoddi4+0x1c4>
 8000c6c:	4681      	mov	r9, r0
 8000c6e:	e7b9      	b.n	8000be4 <__udivmoddi4+0x220>
 8000c70:	4666      	mov	r6, ip
 8000c72:	e775      	b.n	8000b60 <__udivmoddi4+0x19c>
 8000c74:	4630      	mov	r0, r6
 8000c76:	e74a      	b.n	8000b0e <__udivmoddi4+0x14a>
 8000c78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c7c:	4439      	add	r1, r7
 8000c7e:	e713      	b.n	8000aa8 <__udivmoddi4+0xe4>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	e724      	b.n	8000ad0 <__udivmoddi4+0x10c>
 8000c86:	bf00      	nop

08000c88 <__aeabi_idiv0>:
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <float_temp_to_char_temp>:
 * @param digit Temp value
 * @param arr Pointer to output array
 * @return void
 */
void float_temp_to_char_temp(double digit, char* arr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	ed87 0b02 	vstr	d0, [r7, #8]
 8000c96:	6078      	str	r0, [r7, #4]
	if (digit <= 10.0)
 8000c98:	f04f 0200 	mov.w	r2, #0
 8000c9c:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <float_temp_to_char_temp+0x154>)
 8000c9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ca2:	f7ff fde1 	bl	8000868 <__aeabi_dcmple>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d017      	beq.n	8000cdc <float_temp_to_char_temp+0x50>
	{
		arr[0] = 'l';
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	226c      	movs	r2, #108	; 0x6c
 8000cb0:	701a      	strb	r2, [r3, #0]
		arr[1] = 'e';
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	2265      	movs	r2, #101	; 0x65
 8000cb8:	701a      	strb	r2, [r3, #0]
		arr[2] = 's';
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	2273      	movs	r2, #115	; 0x73
 8000cc0:	701a      	strb	r2, [r3, #0]
		arr[3] = 's';
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3303      	adds	r3, #3
 8000cc6:	2273      	movs	r2, #115	; 0x73
 8000cc8:	701a      	strb	r2, [r3, #0]
		arr[4] = '\0';
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
		arr[5] = '\0';
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3305      	adds	r3, #5
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
		return;
 8000cda:	e07d      	b.n	8000dd8 <float_temp_to_char_temp+0x14c>
	}
	int l_digit = digit * 100.0;
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	4b40      	ldr	r3, [pc, #256]	; (8000de4 <float_temp_to_char_temp+0x158>)
 8000ce2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ce6:	f7ff fa6f 	bl	80001c8 <__aeabi_dmul>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f7ff fdd7 	bl	80008a4 <__aeabi_d2iz>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	617b      	str	r3, [r7, #20]
	arr[7] = '\0';
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3307      	adds	r3, #7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
	arr[6] = '\0';
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3306      	adds	r3, #6
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
	arr[5] = '\0';
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3305      	adds	r3, #5
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
	arr[4] = l_digit % 10 + '0';
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <float_temp_to_char_temp+0x15c>)
 8000d16:	fb83 1302 	smull	r1, r3, r3, r2
 8000d1a:	1099      	asrs	r1, r3, #2
 8000d1c:	17d3      	asrs	r3, r2, #31
 8000d1e:	1ac9      	subs	r1, r1, r3
 8000d20:	460b      	mov	r3, r1
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	440b      	add	r3, r1
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	1ad1      	subs	r1, r2, r3
 8000d2a:	b2ca      	uxtb	r2, r1
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3304      	adds	r3, #4
 8000d30:	3230      	adds	r2, #48	; 0x30
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	701a      	strb	r2, [r3, #0]
	l_digit /= 10;
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	4a2b      	ldr	r2, [pc, #172]	; (8000de8 <float_temp_to_char_temp+0x15c>)
 8000d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3e:	1092      	asrs	r2, r2, #2
 8000d40:	17db      	asrs	r3, r3, #31
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]
	arr[3] = l_digit % 10 + '0';
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <float_temp_to_char_temp+0x15c>)
 8000d4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d4e:	1099      	asrs	r1, r3, #2
 8000d50:	17d3      	asrs	r3, r2, #31
 8000d52:	1ac9      	subs	r1, r1, r3
 8000d54:	460b      	mov	r3, r1
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	440b      	add	r3, r1
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	1ad1      	subs	r1, r2, r3
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3303      	adds	r3, #3
 8000d64:	3230      	adds	r2, #48	; 0x30
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	701a      	strb	r2, [r3, #0]
	l_digit /= 10;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <float_temp_to_char_temp+0x15c>)
 8000d6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d72:	1092      	asrs	r2, r2, #2
 8000d74:	17db      	asrs	r3, r3, #31
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
	arr[2] = ',';
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	222c      	movs	r2, #44	; 0x2c
 8000d80:	701a      	strb	r2, [r3, #0]
	arr[1] = l_digit % 10 + '0';
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <float_temp_to_char_temp+0x15c>)
 8000d86:	fb83 1302 	smull	r1, r3, r3, r2
 8000d8a:	1099      	asrs	r1, r3, #2
 8000d8c:	17d3      	asrs	r3, r2, #31
 8000d8e:	1ac9      	subs	r1, r1, r3
 8000d90:	460b      	mov	r3, r1
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	440b      	add	r3, r1
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	1ad1      	subs	r1, r2, r3
 8000d9a:	b2ca      	uxtb	r2, r1
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	3230      	adds	r2, #48	; 0x30
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	701a      	strb	r2, [r3, #0]
	l_digit /= 10;
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <float_temp_to_char_temp+0x15c>)
 8000daa:	fb82 1203 	smull	r1, r2, r2, r3
 8000dae:	1092      	asrs	r2, r2, #2
 8000db0:	17db      	asrs	r3, r3, #31
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	617b      	str	r3, [r7, #20]
	arr[0] = l_digit % 10 + '0';
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <float_temp_to_char_temp+0x15c>)
 8000dba:	fb83 1302 	smull	r1, r3, r3, r2
 8000dbe:	1099      	asrs	r1, r3, #2
 8000dc0:	17d3      	asrs	r3, r2, #31
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	1ad1      	subs	r1, r2, r3
 8000dce:	b2cb      	uxtb	r3, r1
 8000dd0:	3330      	adds	r3, #48	; 0x30
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	701a      	strb	r2, [r3, #0]
}
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40240000 	.word	0x40240000
 8000de4:	40590000 	.word	0x40590000
 8000de8:	66666667 	.word	0x66666667

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	b0a0      	sub	sp, #128	; 0x80
 8000df0:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df2:	f001 f917 	bl	8002024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df6:	f000 f8e1 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfa:	f000 f9d1 	bl	80011a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dfe:	f000 f945 	bl	800108c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e02:	f000 f971 	bl	80010e8 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000e06:	f007 fb0b 	bl	8008420 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 8000e0a:	f000 f99b 	bl	8001144 <MX_I2C3_Init>
   *
   */
  int mlx_addr_1;
  int mlx_addr_2;

  float float_temp_1 = 0.0;
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  float float_temp_2 = 0.0;
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  // Initialize Display
#ifdef SSD1306_DISPLAY
  {
	  char initializing_status[] = "initialize";
 8000e1a:	4a61      	ldr	r2, [pc, #388]	; (8000fa0 <main+0x1b4>)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e20:	c303      	stmia	r3!, {r0, r1}
 8000e22:	801a      	strh	r2, [r3, #0]
 8000e24:	3302      	adds	r3, #2
 8000e26:	0c12      	lsrs	r2, r2, #16
 8000e28:	701a      	strb	r2, [r3, #0]
	  if (SSD1306_Init(hi2c3) != 1)
 8000e2a:	4c5e      	ldr	r4, [pc, #376]	; (8000fa4 <main+0x1b8>)
 8000e2c:	4668      	mov	r0, sp
 8000e2e:	f104 0310 	add.w	r3, r4, #16
 8000e32:	2244      	movs	r2, #68	; 0x44
 8000e34:	4619      	mov	r1, r3
 8000e36:	f008 f821 	bl	8008e7c <memcpy>
 8000e3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e3e:	f000 fb61 	bl	8001504 <SSD1306_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d00d      	beq.n	8000e64 <main+0x78>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4c:	4856      	ldr	r0, [pc, #344]	; (8000fa8 <main+0x1bc>)
 8000e4e:	f001 fc5e 	bl	800270e <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e56:	f001 f957 	bl	8002108 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5e:	4852      	ldr	r0, [pc, #328]	; (8000fa8 <main+0x1bc>)
 8000e60:	f001 fc55 	bl	800270e <HAL_GPIO_TogglePin>
	  }

	  SSD1306_GotoXY (0,0);
 8000e64:	2100      	movs	r1, #0
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 fe2a 	bl	8001ac0 <SSD1306_GotoXY>
	  SSD1306_Puts (initializing_status, &Font_11x18, 1);
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2201      	movs	r2, #1
 8000e70:	494e      	ldr	r1, [pc, #312]	; (8000fac <main+0x1c0>)
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 feba 	bl	8001bec <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000e78:	f000 fd5a 	bl	8001930 <SSD1306_UpdateScreen>
  }
#endif

#ifdef MLX90614
  mlx_addr_1 = MLX90614_ScanDevices(hi2c1);
 8000e7c:	4c4c      	ldr	r4, [pc, #304]	; (8000fb0 <main+0x1c4>)
 8000e7e:	4668      	mov	r0, sp
 8000e80:	f104 0310 	add.w	r3, r4, #16
 8000e84:	2244      	movs	r2, #68	; 0x44
 8000e86:	4619      	mov	r1, r3
 8000e88:	f007 fff8 	bl	8008e7c <memcpy>
 8000e8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e90:	f000 fae2 	bl	8001458 <MLX90614_ScanDevices>
 8000e94:	6278      	str	r0, [r7, #36]	; 0x24
  mlx_addr_2 = MLX90614_ScanDevices(hi2c2);
 8000e96:	4c47      	ldr	r4, [pc, #284]	; (8000fb4 <main+0x1c8>)
 8000e98:	4668      	mov	r0, sp
 8000e9a:	f104 0310 	add.w	r3, r4, #16
 8000e9e:	2244      	movs	r2, #68	; 0x44
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f007 ffeb 	bl	8008e7c <memcpy>
 8000ea6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eaa:	f000 fad5 	bl	8001458 <MLX90614_ScanDevices>
 8000eae:	6238      	str	r0, [r7, #32]
#elif defined(MLX90632)

#endif

#ifdef SSD1306_DISPLAY
  SSD1306_Clear();
 8000eb0:	f000 fec1 	bl	8001c36 <SSD1306_Clear>
#endif

  while (1)
  {
#if defined(MLX90614)
	float_temp_1 = MLX90614_ReadTemp(mlx_addr_1, MLX90614_TOBJ1, hi2c1);
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	b2dd      	uxtb	r5, r3
 8000eb8:	4c3d      	ldr	r4, [pc, #244]	; (8000fb0 <main+0x1c4>)
 8000eba:	4668      	mov	r0, sp
 8000ebc:	f104 0308 	add.w	r3, r4, #8
 8000ec0:	224c      	movs	r2, #76	; 0x4c
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f007 ffda 	bl	8008e7c <memcpy>
 8000ec8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ecc:	2107      	movs	r1, #7
 8000ece:	4628      	mov	r0, r5
 8000ed0:	f000 fa76 	bl	80013c0 <MLX90614_ReadTemp>
 8000ed4:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float_temp_2 = MLX90614_ReadTemp(mlx_addr_2, MLX90614_TOBJ1, hi2c2);
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	b2dd      	uxtb	r5, r3
 8000edc:	4c35      	ldr	r4, [pc, #212]	; (8000fb4 <main+0x1c8>)
 8000ede:	4668      	mov	r0, sp
 8000ee0:	f104 0308 	add.w	r3, r4, #8
 8000ee4:	224c      	movs	r2, #76	; 0x4c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f007 ffc8 	bl	8008e7c <memcpy>
 8000eec:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ef0:	2107      	movs	r1, #7
 8000ef2:	4628      	mov	r0, r5
 8000ef4:	f000 fa64 	bl	80013c0 <MLX90614_ReadTemp>
 8000ef8:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
#elif defined(MLX90632)

#endif
	float_temp_to_char_temp(float_temp_1, char_temp_1);
 8000efc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000efe:	f7ff fbf1 	bl	80006e4 <__aeabi_f2d>
 8000f02:	4604      	mov	r4, r0
 8000f04:	460d      	mov	r5, r1
 8000f06:	f107 0318 	add.w	r3, r7, #24
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	ec45 4b10 	vmov	d0, r4, r5
 8000f10:	f7ff febc 	bl	8000c8c <float_temp_to_char_temp>
	float_temp_to_char_temp(float_temp_2, char_temp_2);
 8000f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f16:	f7ff fbe5 	bl	80006e4 <__aeabi_f2d>
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	460d      	mov	r5, r1
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	4618      	mov	r0, r3
 8000f24:	ec45 4b10 	vmov	d0, r4, r5
 8000f28:	f7ff feb0 	bl	8000c8c <float_temp_to_char_temp>

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4822      	ldr	r0, [pc, #136]	; (8000fb8 <main+0x1cc>)
 8000f30:	f001 fbbc 	bl	80026ac <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d115      	bne.n	8000f66 <main+0x17a>
	{
#ifdef SSD1306_DISPLAY
		SSD1306_GotoXY(0, 0);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f000 fdbf 	bl	8001ac0 <SSD1306_GotoXY>
		SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	2201      	movs	r2, #1
 8000f48:	4918      	ldr	r1, [pc, #96]	; (8000fac <main+0x1c0>)
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fe4e 	bl	8001bec <SSD1306_Puts>

		SSD1306_GotoXY(70, 0);
 8000f50:	2100      	movs	r1, #0
 8000f52:	2046      	movs	r0, #70	; 0x46
 8000f54:	f000 fdb4 	bl	8001ac0 <SSD1306_GotoXY>
		SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4913      	ldr	r1, [pc, #76]	; (8000fac <main+0x1c0>)
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fe43 	bl	8001bec <SSD1306_Puts>
		}
#endif
	}

#ifdef SSD1306_DISPLAY
	SSD1306_GotoXY(0, 29);
 8000f66:	211d      	movs	r1, #29
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f000 fda9 	bl	8001ac0 <SSD1306_GotoXY>
	SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	2201      	movs	r2, #1
 8000f74:	490d      	ldr	r1, [pc, #52]	; (8000fac <main+0x1c0>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fe38 	bl	8001bec <SSD1306_Puts>

	SSD1306_GotoXY(70, 29);
 8000f7c:	211d      	movs	r1, #29
 8000f7e:	2046      	movs	r0, #70	; 0x46
 8000f80:	f000 fd9e 	bl	8001ac0 <SSD1306_GotoXY>
	SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <main+0x1c0>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fe2d 	bl	8001bec <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8000f92:	f000 fccd 	bl	8001930 <SSD1306_UpdateScreen>
		CDC_Transmit_FS((uint8_t*)char_temp_2, strlen((uint8_t*)char_temp_2));
		CDC_Transmit_FS(end, strlen(end));
	}
#endif

	HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f001 f8b6 	bl	8002108 <HAL_Delay>
	float_temp_1 = MLX90614_ReadTemp(mlx_addr_1, MLX90614_TOBJ1, hi2c1);
 8000f9c:	e78a      	b.n	8000eb4 <main+0xc8>
 8000f9e:	bf00      	nop
 8000fa0:	08008ec0 	.word	0x08008ec0
 8000fa4:	20000820 	.word	0x20000820
 8000fa8:	40020c00 	.word	0x40020c00
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000874 	.word	0x20000874
 8000fb4:	200008c8 	.word	0x200008c8
 8000fb8:	40020000 	.word	0x40020000

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b094      	sub	sp, #80	; 0x50
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	2230      	movs	r2, #48	; 0x30
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f007 ff64 	bl	8008e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <SystemClock_Config+0xc8>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a26      	ldr	r2, [pc, #152]	; (8001084 <SystemClock_Config+0xc8>)
 8000fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <SystemClock_Config+0xc8>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <SystemClock_Config+0xcc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a20      	ldr	r2, [pc, #128]	; (8001088 <SystemClock_Config+0xcc>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <SystemClock_Config+0xcc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001018:	2302      	movs	r3, #2
 800101a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001020:	2310      	movs	r3, #16
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001024:	2302      	movs	r3, #2
 8001026:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001028:	2300      	movs	r3, #0
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800102c:	2310      	movs	r3, #16
 800102e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001030:	23c0      	movs	r3, #192	; 0xc0
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001038:	2304      	movs	r3, #4
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fddf 	bl	8004c04 <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800104c:	f000 f924 	bl	8001298 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 f842 	bl	80050f4 <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001076:	f000 f90f 	bl	8001298 <Error_Handler>
  }
}
 800107a:	bf00      	nop
 800107c:	3750      	adds	r7, #80	; 0x50
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x50>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_I2C1_Init+0x54>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x50>)
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x58>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_I2C1_Init+0x50>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_I2C1_Init+0x50>)
 80010ca:	f001 fb3b 	bl	8002744 <HAL_I2C_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d4:	f000 f8e0 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000874 	.word	0x20000874
 80010e0:	40005400 	.word	0x40005400
 80010e4:	000186a0 	.word	0x000186a0

080010e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_I2C2_Init+0x50>)
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <MX_I2C2_Init+0x54>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_I2C2_Init+0x50>)
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <MX_I2C2_Init+0x58>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_I2C2_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_I2C2_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_I2C2_Init+0x50>)
 8001106:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <MX_I2C2_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_I2C2_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <MX_I2C2_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_I2C2_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_I2C2_Init+0x50>)
 8001126:	f001 fb0d 	bl	8002744 <HAL_I2C_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001130:	f000 f8b2 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200008c8 	.word	0x200008c8
 800113c:	40005800 	.word	0x40005800
 8001140:	000186a0 	.word	0x000186a0

08001144 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_I2C3_Init+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <MX_I2C3_Init+0x54>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_I2C3_Init+0x50>)
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_I2C3_Init+0x58>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_I2C3_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_I2C3_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_I2C3_Init+0x50>)
 8001162:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_I2C3_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_I2C3_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_I2C3_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_I2C3_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_I2C3_Init+0x50>)
 8001182:	f001 fadf 	bl	8002744 <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 f884 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000820 	.word	0x20000820
 8001198:	40005c00 	.word	0x40005c00
 800119c:	00061a80 	.word	0x00061a80

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b34      	ldr	r3, [pc, #208]	; (800128c <MX_GPIO_Init+0xec>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a33      	ldr	r2, [pc, #204]	; (800128c <MX_GPIO_Init+0xec>)
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <MX_GPIO_Init+0xec>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <MX_GPIO_Init+0xec>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a2c      	ldr	r2, [pc, #176]	; (800128c <MX_GPIO_Init+0xec>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <MX_GPIO_Init+0xec>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <MX_GPIO_Init+0xec>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a25      	ldr	r2, [pc, #148]	; (800128c <MX_GPIO_Init+0xec>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <MX_GPIO_Init+0xec>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_GPIO_Init+0xec>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <MX_GPIO_Init+0xec>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_GPIO_Init+0xec>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_GPIO_Init+0xec>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <MX_GPIO_Init+0xec>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_GPIO_Init+0xec>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001248:	4811      	ldr	r0, [pc, #68]	; (8001290 <MX_GPIO_Init+0xf0>)
 800124a:	f001 fa47 	bl	80026dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124e:	2301      	movs	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_GPIO_Init+0xf4>)
 8001262:	f001 f887 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001266:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_GPIO_Init+0xf0>)
 8001280:	f001 f878 	bl	8002374 <HAL_GPIO_Init>

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40020000 	.word	0x40020000

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <Error_Handler+0x8>
	...

080012a4 <CRC8_Calc>:
 * @param p Pointer to uint8_t
 * @param len Length
 * @return uint8_t Checksum
 */
uint8_t CRC8_Calc (uint8_t *p, uint8_t len)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	81fb      	strh	r3, [r7, #14]
        while (len--)
 80012b4:	e015      	b.n	80012e2 <CRC8_Calc+0x3e>
        {
                i = (crc ^ *p++) & 0xFF;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b29a      	uxth	r2, r3
 80012c0:	89fb      	ldrh	r3, [r7, #14]
 80012c2:	4053      	eors	r3, r2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 80012ca:	89bb      	ldrh	r3, [r7, #12]
 80012cc:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <CRC8_Calc+0x58>)
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4053      	eors	r3, r2
 80012da:	b21b      	sxth	r3, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	81fb      	strh	r3, [r7, #14]
        while (len--)
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	1e5a      	subs	r2, r3, #1
 80012e6:	70fa      	strb	r2, [r7, #3]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1e4      	bne.n	80012b6 <CRC8_Calc+0x12>
        }
        return crc & 0xFF;
 80012ec:	89fb      	ldrh	r3, [r7, #14]
 80012ee:	b2db      	uxtb	r3, r3
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	08008f10 	.word	0x08008f10

08001300 <MLX90614_ReadReg>:
 * @param dbg_lvl Debug level
 * @param hi2c Handler of I2C
 * @return uint16_t Register data
 */
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl, I2C_HandleTypeDef hi2c)
{
 8001300:	b082      	sub	sp, #8
 8001302:	b590      	push	{r4, r7, lr}
 8001304:	b08b      	sub	sp, #44	; 0x2c
 8001306:	af04      	add	r7, sp, #16
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	460b      	mov	r3, r1
 8001310:	71bb      	strb	r3, [r7, #6]
 8001312:	4613      	mov	r3, r2
 8001314:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	b29b      	uxth	r3, r3
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	b299      	uxth	r1, r3
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	b29a      	uxth	r2, r3
 8001322:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001326:	2364      	movs	r3, #100	; 0x64
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2303      	movs	r3, #3
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	f001 fc47 	bl	8002bc8 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 8001352:	7c3b      	ldrb	r3, [r7, #16]
 8001354:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 8001356:	7c7b      	ldrb	r3, [r7, #17]
 8001358:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2105      	movs	r1, #5
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff9f 	bl	80012a4 <CRC8_Calc>
 8001366:	4603      	mov	r3, r0
 8001368:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 800136a:	7c7b      	ldrb	r3, [r7, #17]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7c3b      	ldrb	r3, [r7, #16]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21b      	sxth	r3, r3
 8001378:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 800137a:	7cbb      	ldrb	r3, [r7, #18]
 800137c:	7d7a      	ldrb	r2, [r7, #21]
 800137e:	429a      	cmp	r2, r3
 8001380:	d001      	beq.n	8001386 <MLX90614_ReadReg+0x86>
		data = 0x0000;
 8001382:	2300      	movs	r3, #0
 8001384:	82fb      	strh	r3, [r7, #22]
	}
	if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);
 8001386:	797b      	ldrb	r3, [r7, #5]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d10b      	bne.n	80013a4 <MLX90614_ReadReg+0xa4>
 800138c:	7cbb      	ldrb	r3, [r7, #18]
 800138e:	8afc      	ldrh	r4, [r7, #22]
 8001390:	79b8      	ldrb	r0, [r7, #6]
 8001392:	79f9      	ldrb	r1, [r7, #7]
 8001394:	7d7a      	ldrb	r2, [r7, #21]
 8001396:	9201      	str	r2, [sp, #4]
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	4623      	mov	r3, r4
 800139c:	4602      	mov	r2, r0
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 f89c 	bl	80014dc <MLX90614_SendDebugMsg>

	HAL_Delay(1);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f000 feaf 	bl	8002108 <HAL_Delay>
	return data;
 80013aa:	8afb      	ldrh	r3, [r7, #22]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80013b6:	b002      	add	sp, #8
 80013b8:	4770      	bx	lr
 80013ba:	0000      	movs	r0, r0
 80013bc:	0000      	movs	r0, r0
	...

080013c0 <MLX90614_ReadTemp>:
 * @param regAddr Register address
 * @param hi2c Handler of I2C
 * @return float Temperature value
 */
float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr, I2C_HandleTypeDef hi2c)
{
 80013c0:	b082      	sub	sp, #8
 80013c2:	b5b0      	push	{r4, r5, r7, lr}
 80013c4:	b098      	sub	sp, #96	; 0x60
 80013c6:	af14      	add	r7, sp, #80	; 0x50
 80013c8:	f107 0420 	add.w	r4, r7, #32
 80013cc:	e884 000c 	stmia.w	r4, {r2, r3}
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	460b      	mov	r3, r1
 80013d6:	71bb      	strb	r3, [r7, #6]
	float temp;
	uint16_t data;

	data = MLX90614_ReadReg(devAddr, regAddr, MLX90614_DBG_OFF, hi2c);
 80013d8:	79bd      	ldrb	r5, [r7, #6]
 80013da:	79fc      	ldrb	r4, [r7, #7]
 80013dc:	4668      	mov	r0, sp
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	2250      	movs	r2, #80	; 0x50
 80013e4:	4619      	mov	r1, r3
 80013e6:	f007 fd49 	bl	8008e7c <memcpy>
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	2200      	movs	r2, #0
 80013ee:	4629      	mov	r1, r5
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff ff85 	bl	8001300 <MLX90614_ReadReg>
 80013f6:	4603      	mov	r3, r0
 80013f8:	81fb      	strh	r3, [r7, #14]

	temp = data*0.02 - 273.15; // from datasheet
 80013fa:	89fb      	ldrh	r3, [r7, #14]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f95f 	bl	80006c0 <__aeabi_i2d>
 8001402:	a311      	add	r3, pc, #68	; (adr r3, 8001448 <MLX90614_ReadTemp+0x88>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7fe fede 	bl	80001c8 <__aeabi_dmul>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	a30e      	add	r3, pc, #56	; (adr r3, 8001450 <MLX90614_ReadTemp+0x90>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7ff f803 	bl	8000424 <__aeabi_dsub>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fa65 	bl	80008f4 <__aeabi_d2f>
 800142a:	4603      	mov	r3, r0
 800142c:	60bb      	str	r3, [r7, #8]

	return temp;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	ee07 3a90 	vmov	s15, r3
}
 8001434:	eeb0 0a67 	vmov.f32	s0, s15
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001440:	b002      	add	sp, #8
 8001442:	4770      	bx	lr
 8001444:	f3af 8000 	nop.w
 8001448:	47ae147b 	.word	0x47ae147b
 800144c:	3f947ae1 	.word	0x3f947ae1
 8001450:	66666666 	.word	0x66666666
 8001454:	40711266 	.word	0x40711266

08001458 <MLX90614_ScanDevices>:
 *
 * @param hi2c Handler of I2C
 * @return int Device address
 */
int MLX90614_ScanDevices (I2C_HandleTypeDef hi2c)
{
 8001458:	b084      	sub	sp, #16
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	f107 0c10 	add.w	ip, r7, #16
 8001464:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef result;
	for (int i = 0; i<126; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	e029      	b.n	80014c2 <MLX90614_ScanDevices+0x6a>
	{
		result = HAL_I2C_IsDeviceReady(&hi2c, (uint16_t) (i<<1), 2, 2);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	b29b      	uxth	r3, r3
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	b299      	uxth	r1, r3
 8001476:	2302      	movs	r3, #2
 8001478:	2202      	movs	r2, #2
 800147a:	f107 0010 	add.w	r0, r7, #16
 800147e:	f001 fdc9 	bl	8003014 <HAL_I2C_IsDeviceReady>
 8001482:	4603      	mov	r3, r0
 8001484:	70fb      	strb	r3, [r7, #3]
		if (result != HAL_OK)
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <MLX90614_ScanDevices+0x3e>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800148c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <MLX90614_ScanDevices+0x80>)
 8001492:	f001 f93c 	bl	800270e <HAL_GPIO_TogglePin>
		}
		if (result == HAL_OK)
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10f      	bne.n	80014bc <MLX90614_ScanDevices+0x64>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800149c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MLX90614_ScanDevices+0x80>)
 80014a2:	f001 f934 	bl	800270e <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 80014a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014aa:	f000 fe2d 	bl	8002108 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80014ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b2:	4809      	ldr	r0, [pc, #36]	; (80014d8 <MLX90614_ScanDevices+0x80>)
 80014b4:	f001 f92b 	bl	800270e <HAL_GPIO_TogglePin>
		  return i;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	e005      	b.n	80014c8 <MLX90614_ScanDevices+0x70>
	for (int i = 0; i<126; i++)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b7d      	cmp	r3, #125	; 0x7d
 80014c6:	ddd2      	ble.n	800146e <MLX90614_ScanDevices+0x16>
		}
	}
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014d2:	b004      	add	sp, #16
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40020c00 	.word	0x40020c00

080014dc <MLX90614_SendDebugMsg>:
 * @param crc_in Checksum in
 * @param crc_calc Calculated checksum
 * @return void
 */
void MLX90614_SendDebugMsg(uint8_t op_type, uint8_t devAddr, uint8_t regAddr, uint16_t data, uint8_t crc_in, uint8_t crc_calc)
{
 80014dc:	b490      	push	{r4, r7}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4604      	mov	r4, r0
 80014e4:	4608      	mov	r0, r1
 80014e6:	4611      	mov	r1, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	4623      	mov	r3, r4
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	4603      	mov	r3, r0
 80014f0:	71bb      	strb	r3, [r7, #6]
 80014f2:	460b      	mov	r3, r1
 80014f4:	717b      	strb	r3, [r7, #5]
 80014f6:	4613      	mov	r3, r2
 80014f8:	807b      	strh	r3, [r7, #2]
		// TODO: Do something if error
	}
	else if (op_type == MLX90614_DBG_MSG_R) {
		// TODO: Do something if error
	}
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc90      	pop	{r4, r7}
 8001502:	4770      	bx	lr

08001504 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 8001504:	b084      	sub	sp, #16
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b097      	sub	sp, #92	; 0x5c
 800150a:	af14      	add	r7, sp, #80	; 0x50
 800150c:	f107 0418 	add.w	r4, r7, #24
 8001510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 8001514:	f000 fb98 	bl	8001c48 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <SSD1306_Init+0x44>)
 800151a:	4618      	mov	r0, r3
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	2254      	movs	r2, #84	; 0x54
 8001522:	4619      	mov	r1, r3
 8001524:	f007 fcaa 	bl	8008e7c <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001528:	f644 6320 	movw	r3, #20000	; 0x4e20
 800152c:	2201      	movs	r2, #1
 800152e:	2178      	movs	r1, #120	; 0x78
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <SSD1306_Init+0x44>)
 8001532:	f001 fd6f 	bl	8003014 <HAL_I2C_IsDeviceReady>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 800153c:	2300      	movs	r3, #0
 800153e:	e1ee      	b.n	800191e <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001540:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001544:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001546:	e004      	b.n	8001552 <SSD1306_Init+0x4e>
 8001548:	200007cc 	.word	0x200007cc
		p--;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f9      	bne.n	800154c <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001558:	4ce1      	ldr	r4, [pc, #900]	; (80018e0 <SSD1306_Init+0x3dc>)
 800155a:	23ae      	movs	r3, #174	; 0xae
 800155c:	9313      	str	r3, [sp, #76]	; 0x4c
 800155e:	4668      	mov	r0, sp
 8001560:	f104 0308 	add.w	r3, r4, #8
 8001564:	224c      	movs	r2, #76	; 0x4c
 8001566:	4619      	mov	r1, r3
 8001568:	f007 fc88 	bl	8008e7c <memcpy>
 800156c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001570:	2100      	movs	r1, #0
 8001572:	2078      	movs	r0, #120	; 0x78
 8001574:	f000 fbc6 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001578:	4cd9      	ldr	r4, [pc, #868]	; (80018e0 <SSD1306_Init+0x3dc>)
 800157a:	2320      	movs	r3, #32
 800157c:	9313      	str	r3, [sp, #76]	; 0x4c
 800157e:	4668      	mov	r0, sp
 8001580:	f104 0308 	add.w	r3, r4, #8
 8001584:	224c      	movs	r2, #76	; 0x4c
 8001586:	4619      	mov	r1, r3
 8001588:	f007 fc78 	bl	8008e7c <memcpy>
 800158c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001590:	2100      	movs	r1, #0
 8001592:	2078      	movs	r0, #120	; 0x78
 8001594:	f000 fbb6 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001598:	4cd1      	ldr	r4, [pc, #836]	; (80018e0 <SSD1306_Init+0x3dc>)
 800159a:	2310      	movs	r3, #16
 800159c:	9313      	str	r3, [sp, #76]	; 0x4c
 800159e:	4668      	mov	r0, sp
 80015a0:	f104 0308 	add.w	r3, r4, #8
 80015a4:	224c      	movs	r2, #76	; 0x4c
 80015a6:	4619      	mov	r1, r3
 80015a8:	f007 fc68 	bl	8008e7c <memcpy>
 80015ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	; 0x78
 80015b4:	f000 fba6 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015b8:	4cc9      	ldr	r4, [pc, #804]	; (80018e0 <SSD1306_Init+0x3dc>)
 80015ba:	23b0      	movs	r3, #176	; 0xb0
 80015bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80015be:	4668      	mov	r0, sp
 80015c0:	f104 0308 	add.w	r3, r4, #8
 80015c4:	224c      	movs	r2, #76	; 0x4c
 80015c6:	4619      	mov	r1, r3
 80015c8:	f007 fc58 	bl	8008e7c <memcpy>
 80015cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015d0:	2100      	movs	r1, #0
 80015d2:	2078      	movs	r0, #120	; 0x78
 80015d4:	f000 fb96 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80015d8:	4cc1      	ldr	r4, [pc, #772]	; (80018e0 <SSD1306_Init+0x3dc>)
 80015da:	23c8      	movs	r3, #200	; 0xc8
 80015dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80015de:	4668      	mov	r0, sp
 80015e0:	f104 0308 	add.w	r3, r4, #8
 80015e4:	224c      	movs	r2, #76	; 0x4c
 80015e6:	4619      	mov	r1, r3
 80015e8:	f007 fc48 	bl	8008e7c <memcpy>
 80015ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015f0:	2100      	movs	r1, #0
 80015f2:	2078      	movs	r0, #120	; 0x78
 80015f4:	f000 fb86 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80015f8:	4cb9      	ldr	r4, [pc, #740]	; (80018e0 <SSD1306_Init+0x3dc>)
 80015fa:	2300      	movs	r3, #0
 80015fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80015fe:	4668      	mov	r0, sp
 8001600:	f104 0308 	add.w	r3, r4, #8
 8001604:	224c      	movs	r2, #76	; 0x4c
 8001606:	4619      	mov	r1, r3
 8001608:	f007 fc38 	bl	8008e7c <memcpy>
 800160c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001610:	2100      	movs	r1, #0
 8001612:	2078      	movs	r0, #120	; 0x78
 8001614:	f000 fb76 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001618:	4cb1      	ldr	r4, [pc, #708]	; (80018e0 <SSD1306_Init+0x3dc>)
 800161a:	2310      	movs	r3, #16
 800161c:	9313      	str	r3, [sp, #76]	; 0x4c
 800161e:	4668      	mov	r0, sp
 8001620:	f104 0308 	add.w	r3, r4, #8
 8001624:	224c      	movs	r2, #76	; 0x4c
 8001626:	4619      	mov	r1, r3
 8001628:	f007 fc28 	bl	8008e7c <memcpy>
 800162c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001630:	2100      	movs	r1, #0
 8001632:	2078      	movs	r0, #120	; 0x78
 8001634:	f000 fb66 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001638:	4ca9      	ldr	r4, [pc, #676]	; (80018e0 <SSD1306_Init+0x3dc>)
 800163a:	2340      	movs	r3, #64	; 0x40
 800163c:	9313      	str	r3, [sp, #76]	; 0x4c
 800163e:	4668      	mov	r0, sp
 8001640:	f104 0308 	add.w	r3, r4, #8
 8001644:	224c      	movs	r2, #76	; 0x4c
 8001646:	4619      	mov	r1, r3
 8001648:	f007 fc18 	bl	8008e7c <memcpy>
 800164c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001650:	2100      	movs	r1, #0
 8001652:	2078      	movs	r0, #120	; 0x78
 8001654:	f000 fb56 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001658:	4ca1      	ldr	r4, [pc, #644]	; (80018e0 <SSD1306_Init+0x3dc>)
 800165a:	2381      	movs	r3, #129	; 0x81
 800165c:	9313      	str	r3, [sp, #76]	; 0x4c
 800165e:	4668      	mov	r0, sp
 8001660:	f104 0308 	add.w	r3, r4, #8
 8001664:	224c      	movs	r2, #76	; 0x4c
 8001666:	4619      	mov	r1, r3
 8001668:	f007 fc08 	bl	8008e7c <memcpy>
 800166c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001670:	2100      	movs	r1, #0
 8001672:	2078      	movs	r0, #120	; 0x78
 8001674:	f000 fb46 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001678:	4c99      	ldr	r4, [pc, #612]	; (80018e0 <SSD1306_Init+0x3dc>)
 800167a:	23ff      	movs	r3, #255	; 0xff
 800167c:	9313      	str	r3, [sp, #76]	; 0x4c
 800167e:	4668      	mov	r0, sp
 8001680:	f104 0308 	add.w	r3, r4, #8
 8001684:	224c      	movs	r2, #76	; 0x4c
 8001686:	4619      	mov	r1, r3
 8001688:	f007 fbf8 	bl	8008e7c <memcpy>
 800168c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001690:	2100      	movs	r1, #0
 8001692:	2078      	movs	r0, #120	; 0x78
 8001694:	f000 fb36 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001698:	4c91      	ldr	r4, [pc, #580]	; (80018e0 <SSD1306_Init+0x3dc>)
 800169a:	23a1      	movs	r3, #161	; 0xa1
 800169c:	9313      	str	r3, [sp, #76]	; 0x4c
 800169e:	4668      	mov	r0, sp
 80016a0:	f104 0308 	add.w	r3, r4, #8
 80016a4:	224c      	movs	r2, #76	; 0x4c
 80016a6:	4619      	mov	r1, r3
 80016a8:	f007 fbe8 	bl	8008e7c <memcpy>
 80016ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016b0:	2100      	movs	r1, #0
 80016b2:	2078      	movs	r0, #120	; 0x78
 80016b4:	f000 fb26 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80016b8:	4c89      	ldr	r4, [pc, #548]	; (80018e0 <SSD1306_Init+0x3dc>)
 80016ba:	23a6      	movs	r3, #166	; 0xa6
 80016bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80016be:	4668      	mov	r0, sp
 80016c0:	f104 0308 	add.w	r3, r4, #8
 80016c4:	224c      	movs	r2, #76	; 0x4c
 80016c6:	4619      	mov	r1, r3
 80016c8:	f007 fbd8 	bl	8008e7c <memcpy>
 80016cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016d0:	2100      	movs	r1, #0
 80016d2:	2078      	movs	r0, #120	; 0x78
 80016d4:	f000 fb16 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80016d8:	4c81      	ldr	r4, [pc, #516]	; (80018e0 <SSD1306_Init+0x3dc>)
 80016da:	23a8      	movs	r3, #168	; 0xa8
 80016dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80016de:	4668      	mov	r0, sp
 80016e0:	f104 0308 	add.w	r3, r4, #8
 80016e4:	224c      	movs	r2, #76	; 0x4c
 80016e6:	4619      	mov	r1, r3
 80016e8:	f007 fbc8 	bl	8008e7c <memcpy>
 80016ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80016f0:	2100      	movs	r1, #0
 80016f2:	2078      	movs	r0, #120	; 0x78
 80016f4:	f000 fb06 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80016f8:	4c79      	ldr	r4, [pc, #484]	; (80018e0 <SSD1306_Init+0x3dc>)
 80016fa:	233f      	movs	r3, #63	; 0x3f
 80016fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80016fe:	4668      	mov	r0, sp
 8001700:	f104 0308 	add.w	r3, r4, #8
 8001704:	224c      	movs	r2, #76	; 0x4c
 8001706:	4619      	mov	r1, r3
 8001708:	f007 fbb8 	bl	8008e7c <memcpy>
 800170c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001710:	2100      	movs	r1, #0
 8001712:	2078      	movs	r0, #120	; 0x78
 8001714:	f000 faf6 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001718:	4c71      	ldr	r4, [pc, #452]	; (80018e0 <SSD1306_Init+0x3dc>)
 800171a:	23a4      	movs	r3, #164	; 0xa4
 800171c:	9313      	str	r3, [sp, #76]	; 0x4c
 800171e:	4668      	mov	r0, sp
 8001720:	f104 0308 	add.w	r3, r4, #8
 8001724:	224c      	movs	r2, #76	; 0x4c
 8001726:	4619      	mov	r1, r3
 8001728:	f007 fba8 	bl	8008e7c <memcpy>
 800172c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001730:	2100      	movs	r1, #0
 8001732:	2078      	movs	r0, #120	; 0x78
 8001734:	f000 fae6 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001738:	4c69      	ldr	r4, [pc, #420]	; (80018e0 <SSD1306_Init+0x3dc>)
 800173a:	23d3      	movs	r3, #211	; 0xd3
 800173c:	9313      	str	r3, [sp, #76]	; 0x4c
 800173e:	4668      	mov	r0, sp
 8001740:	f104 0308 	add.w	r3, r4, #8
 8001744:	224c      	movs	r2, #76	; 0x4c
 8001746:	4619      	mov	r1, r3
 8001748:	f007 fb98 	bl	8008e7c <memcpy>
 800174c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001750:	2100      	movs	r1, #0
 8001752:	2078      	movs	r0, #120	; 0x78
 8001754:	f000 fad6 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001758:	4c61      	ldr	r4, [pc, #388]	; (80018e0 <SSD1306_Init+0x3dc>)
 800175a:	2300      	movs	r3, #0
 800175c:	9313      	str	r3, [sp, #76]	; 0x4c
 800175e:	4668      	mov	r0, sp
 8001760:	f104 0308 	add.w	r3, r4, #8
 8001764:	224c      	movs	r2, #76	; 0x4c
 8001766:	4619      	mov	r1, r3
 8001768:	f007 fb88 	bl	8008e7c <memcpy>
 800176c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	; 0x78
 8001774:	f000 fac6 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001778:	4c59      	ldr	r4, [pc, #356]	; (80018e0 <SSD1306_Init+0x3dc>)
 800177a:	23d5      	movs	r3, #213	; 0xd5
 800177c:	9313      	str	r3, [sp, #76]	; 0x4c
 800177e:	4668      	mov	r0, sp
 8001780:	f104 0308 	add.w	r3, r4, #8
 8001784:	224c      	movs	r2, #76	; 0x4c
 8001786:	4619      	mov	r1, r3
 8001788:	f007 fb78 	bl	8008e7c <memcpy>
 800178c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001790:	2100      	movs	r1, #0
 8001792:	2078      	movs	r0, #120	; 0x78
 8001794:	f000 fab6 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001798:	4c51      	ldr	r4, [pc, #324]	; (80018e0 <SSD1306_Init+0x3dc>)
 800179a:	23f0      	movs	r3, #240	; 0xf0
 800179c:	9313      	str	r3, [sp, #76]	; 0x4c
 800179e:	4668      	mov	r0, sp
 80017a0:	f104 0308 	add.w	r3, r4, #8
 80017a4:	224c      	movs	r2, #76	; 0x4c
 80017a6:	4619      	mov	r1, r3
 80017a8:	f007 fb68 	bl	8008e7c <memcpy>
 80017ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017b0:	2100      	movs	r1, #0
 80017b2:	2078      	movs	r0, #120	; 0x78
 80017b4:	f000 faa6 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80017b8:	4c49      	ldr	r4, [pc, #292]	; (80018e0 <SSD1306_Init+0x3dc>)
 80017ba:	23d9      	movs	r3, #217	; 0xd9
 80017bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80017be:	4668      	mov	r0, sp
 80017c0:	f104 0308 	add.w	r3, r4, #8
 80017c4:	224c      	movs	r2, #76	; 0x4c
 80017c6:	4619      	mov	r1, r3
 80017c8:	f007 fb58 	bl	8008e7c <memcpy>
 80017cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017d0:	2100      	movs	r1, #0
 80017d2:	2078      	movs	r0, #120	; 0x78
 80017d4:	f000 fa96 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80017d8:	4c41      	ldr	r4, [pc, #260]	; (80018e0 <SSD1306_Init+0x3dc>)
 80017da:	2322      	movs	r3, #34	; 0x22
 80017dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80017de:	4668      	mov	r0, sp
 80017e0:	f104 0308 	add.w	r3, r4, #8
 80017e4:	224c      	movs	r2, #76	; 0x4c
 80017e6:	4619      	mov	r1, r3
 80017e8:	f007 fb48 	bl	8008e7c <memcpy>
 80017ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017f0:	2100      	movs	r1, #0
 80017f2:	2078      	movs	r0, #120	; 0x78
 80017f4:	f000 fa86 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80017f8:	4c39      	ldr	r4, [pc, #228]	; (80018e0 <SSD1306_Init+0x3dc>)
 80017fa:	23da      	movs	r3, #218	; 0xda
 80017fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80017fe:	4668      	mov	r0, sp
 8001800:	f104 0308 	add.w	r3, r4, #8
 8001804:	224c      	movs	r2, #76	; 0x4c
 8001806:	4619      	mov	r1, r3
 8001808:	f007 fb38 	bl	8008e7c <memcpy>
 800180c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001810:	2100      	movs	r1, #0
 8001812:	2078      	movs	r0, #120	; 0x78
 8001814:	f000 fa76 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001818:	4c31      	ldr	r4, [pc, #196]	; (80018e0 <SSD1306_Init+0x3dc>)
 800181a:	2312      	movs	r3, #18
 800181c:	9313      	str	r3, [sp, #76]	; 0x4c
 800181e:	4668      	mov	r0, sp
 8001820:	f104 0308 	add.w	r3, r4, #8
 8001824:	224c      	movs	r2, #76	; 0x4c
 8001826:	4619      	mov	r1, r3
 8001828:	f007 fb28 	bl	8008e7c <memcpy>
 800182c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001830:	2100      	movs	r1, #0
 8001832:	2078      	movs	r0, #120	; 0x78
 8001834:	f000 fa66 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001838:	4c29      	ldr	r4, [pc, #164]	; (80018e0 <SSD1306_Init+0x3dc>)
 800183a:	23db      	movs	r3, #219	; 0xdb
 800183c:	9313      	str	r3, [sp, #76]	; 0x4c
 800183e:	4668      	mov	r0, sp
 8001840:	f104 0308 	add.w	r3, r4, #8
 8001844:	224c      	movs	r2, #76	; 0x4c
 8001846:	4619      	mov	r1, r3
 8001848:	f007 fb18 	bl	8008e7c <memcpy>
 800184c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001850:	2100      	movs	r1, #0
 8001852:	2078      	movs	r0, #120	; 0x78
 8001854:	f000 fa56 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001858:	4c21      	ldr	r4, [pc, #132]	; (80018e0 <SSD1306_Init+0x3dc>)
 800185a:	2320      	movs	r3, #32
 800185c:	9313      	str	r3, [sp, #76]	; 0x4c
 800185e:	4668      	mov	r0, sp
 8001860:	f104 0308 	add.w	r3, r4, #8
 8001864:	224c      	movs	r2, #76	; 0x4c
 8001866:	4619      	mov	r1, r3
 8001868:	f007 fb08 	bl	8008e7c <memcpy>
 800186c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001870:	2100      	movs	r1, #0
 8001872:	2078      	movs	r0, #120	; 0x78
 8001874:	f000 fa46 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001878:	4c19      	ldr	r4, [pc, #100]	; (80018e0 <SSD1306_Init+0x3dc>)
 800187a:	238d      	movs	r3, #141	; 0x8d
 800187c:	9313      	str	r3, [sp, #76]	; 0x4c
 800187e:	4668      	mov	r0, sp
 8001880:	f104 0308 	add.w	r3, r4, #8
 8001884:	224c      	movs	r2, #76	; 0x4c
 8001886:	4619      	mov	r1, r3
 8001888:	f007 faf8 	bl	8008e7c <memcpy>
 800188c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001890:	2100      	movs	r1, #0
 8001892:	2078      	movs	r0, #120	; 0x78
 8001894:	f000 fa36 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001898:	4c11      	ldr	r4, [pc, #68]	; (80018e0 <SSD1306_Init+0x3dc>)
 800189a:	2314      	movs	r3, #20
 800189c:	9313      	str	r3, [sp, #76]	; 0x4c
 800189e:	4668      	mov	r0, sp
 80018a0:	f104 0308 	add.w	r3, r4, #8
 80018a4:	224c      	movs	r2, #76	; 0x4c
 80018a6:	4619      	mov	r1, r3
 80018a8:	f007 fae8 	bl	8008e7c <memcpy>
 80018ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018b0:	2100      	movs	r1, #0
 80018b2:	2078      	movs	r0, #120	; 0x78
 80018b4:	f000 fa26 	bl	8001d04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80018b8:	4c09      	ldr	r4, [pc, #36]	; (80018e0 <SSD1306_Init+0x3dc>)
 80018ba:	23af      	movs	r3, #175	; 0xaf
 80018bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80018be:	4668      	mov	r0, sp
 80018c0:	f104 0308 	add.w	r3, r4, #8
 80018c4:	224c      	movs	r2, #76	; 0x4c
 80018c6:	4619      	mov	r1, r3
 80018c8:	f007 fad8 	bl	8008e7c <memcpy>
 80018cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018d0:	2100      	movs	r1, #0
 80018d2:	2078      	movs	r0, #120	; 0x78
 80018d4:	f000 fa16 	bl	8001d04 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80018d8:	4c01      	ldr	r4, [pc, #4]	; (80018e0 <SSD1306_Init+0x3dc>)
 80018da:	232e      	movs	r3, #46	; 0x2e
 80018dc:	e002      	b.n	80018e4 <SSD1306_Init+0x3e0>
 80018de:	bf00      	nop
 80018e0:	200007cc 	.word	0x200007cc
 80018e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80018e6:	4668      	mov	r0, sp
 80018e8:	f104 0308 	add.w	r3, r4, #8
 80018ec:	224c      	movs	r2, #76	; 0x4c
 80018ee:	4619      	mov	r1, r3
 80018f0:	f007 fac4 	bl	8008e7c <memcpy>
 80018f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018f8:	2100      	movs	r1, #0
 80018fa:	2078      	movs	r0, #120	; 0x78
 80018fc:	f000 fa02 	bl	8001d04 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001900:	2000      	movs	r0, #0
 8001902:	f000 f865 	bl	80019d0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001906:	f000 f813 	bl	8001930 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <SSD1306_Init+0x428>)
 800190c:	2200      	movs	r2, #0
 800190e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <SSD1306_Init+0x428>)
 8001912:	2200      	movs	r2, #0
 8001914:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <SSD1306_Init+0x428>)
 8001918:	2201      	movs	r2, #1
 800191a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800191c:	2301      	movs	r3, #1
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001928:	b004      	add	sp, #16
 800192a:	4770      	bx	lr
 800192c:	200005a4 	.word	0x200005a4

08001930 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b097      	sub	sp, #92	; 0x5c
 8001934:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001936:	2300      	movs	r3, #0
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	e03d      	b.n	80019b8 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	3b50      	subs	r3, #80	; 0x50
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4c21      	ldr	r4, [pc, #132]	; (80019c8 <SSD1306_UpdateScreen+0x98>)
 8001944:	9313      	str	r3, [sp, #76]	; 0x4c
 8001946:	4668      	mov	r0, sp
 8001948:	f104 0308 	add.w	r3, r4, #8
 800194c:	224c      	movs	r2, #76	; 0x4c
 800194e:	4619      	mov	r1, r3
 8001950:	f007 fa94 	bl	8008e7c <memcpy>
 8001954:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001958:	2100      	movs	r1, #0
 800195a:	2078      	movs	r0, #120	; 0x78
 800195c:	f000 f9d2 	bl	8001d04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001960:	4c19      	ldr	r4, [pc, #100]	; (80019c8 <SSD1306_UpdateScreen+0x98>)
 8001962:	2300      	movs	r3, #0
 8001964:	9313      	str	r3, [sp, #76]	; 0x4c
 8001966:	4668      	mov	r0, sp
 8001968:	f104 0308 	add.w	r3, r4, #8
 800196c:	224c      	movs	r2, #76	; 0x4c
 800196e:	4619      	mov	r1, r3
 8001970:	f007 fa84 	bl	8008e7c <memcpy>
 8001974:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001978:	2100      	movs	r1, #0
 800197a:	2078      	movs	r0, #120	; 0x78
 800197c:	f000 f9c2 	bl	8001d04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001980:	4c11      	ldr	r4, [pc, #68]	; (80019c8 <SSD1306_UpdateScreen+0x98>)
 8001982:	2310      	movs	r3, #16
 8001984:	9313      	str	r3, [sp, #76]	; 0x4c
 8001986:	4668      	mov	r0, sp
 8001988:	f104 0308 	add.w	r3, r4, #8
 800198c:	224c      	movs	r2, #76	; 0x4c
 800198e:	4619      	mov	r1, r3
 8001990:	f007 fa74 	bl	8008e7c <memcpy>
 8001994:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001998:	2100      	movs	r1, #0
 800199a:	2078      	movs	r0, #120	; 0x78
 800199c:	f000 f9b2 	bl	8001d04 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	01db      	lsls	r3, r3, #7
 80019a4:	4a09      	ldr	r2, [pc, #36]	; (80019cc <SSD1306_UpdateScreen+0x9c>)
 80019a6:	441a      	add	r2, r3
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	2140      	movs	r1, #64	; 0x40
 80019ac:	2078      	movs	r0, #120	; 0x78
 80019ae:	f000 f961 	bl	8001c74 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	3301      	adds	r3, #1
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2b07      	cmp	r3, #7
 80019bc:	d9be      	bls.n	800193c <SSD1306_UpdateScreen+0xc>
	}
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	200007cc 	.word	0x200007cc
 80019cc:	200001a4 	.word	0x200001a4

080019d0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <SSD1306_Fill+0x14>
 80019e0:	2300      	movs	r3, #0
 80019e2:	e000      	b.n	80019e6 <SSD1306_Fill+0x16>
 80019e4:	23ff      	movs	r3, #255	; 0xff
 80019e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ea:	4619      	mov	r1, r3
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <SSD1306_Fill+0x2c>)
 80019ee:	f007 fa53 	bl	8008e98 <memset>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200001a4 	.word	0x200001a4

08001a00 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	80bb      	strh	r3, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	70fb      	strb	r3, [r7, #3]
	if (
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2b7f      	cmp	r3, #127	; 0x7f
 8001a16:	d848      	bhi.n	8001aaa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a18:	88bb      	ldrh	r3, [r7, #4]
 8001a1a:	2b3f      	cmp	r3, #63	; 0x3f
 8001a1c:	d845      	bhi.n	8001aaa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <SSD1306_DrawPixel+0xb8>)
 8001a20:	791b      	ldrb	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d11a      	bne.n	8001a70 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a3a:	88fa      	ldrh	r2, [r7, #6]
 8001a3c:	88bb      	ldrh	r3, [r7, #4]
 8001a3e:	08db      	lsrs	r3, r3, #3
 8001a40:	b298      	uxth	r0, r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	01db      	lsls	r3, r3, #7
 8001a46:	4413      	add	r3, r2
 8001a48:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <SSD1306_DrawPixel+0xbc>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	b25a      	sxtb	r2, r3
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	b259      	sxtb	r1, r3
 8001a60:	88fa      	ldrh	r2, [r7, #6]
 8001a62:	4603      	mov	r3, r0
 8001a64:	01db      	lsls	r3, r3, #7
 8001a66:	4413      	add	r3, r2
 8001a68:	b2c9      	uxtb	r1, r1
 8001a6a:	4a14      	ldr	r2, [pc, #80]	; (8001abc <SSD1306_DrawPixel+0xbc>)
 8001a6c:	54d1      	strb	r1, [r2, r3]
 8001a6e:	e01d      	b.n	8001aac <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	88bb      	ldrh	r3, [r7, #4]
 8001a74:	08db      	lsrs	r3, r3, #3
 8001a76:	b298      	uxth	r0, r3
 8001a78:	4603      	mov	r3, r0
 8001a7a:	01db      	lsls	r3, r3, #7
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <SSD1306_DrawPixel+0xbc>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	b25a      	sxtb	r2, r3
 8001a84:	88bb      	ldrh	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	4013      	ands	r3, r2
 8001a98:	b259      	sxtb	r1, r3
 8001a9a:	88fa      	ldrh	r2, [r7, #6]
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	01db      	lsls	r3, r3, #7
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b2c9      	uxtb	r1, r1
 8001aa4:	4a05      	ldr	r2, [pc, #20]	; (8001abc <SSD1306_DrawPixel+0xbc>)
 8001aa6:	54d1      	strb	r1, [r2, r3]
 8001aa8:	e000      	b.n	8001aac <SSD1306_DrawPixel+0xac>
		return;
 8001aaa:	bf00      	nop
	}
}
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200005a4 	.word	0x200005a4
 8001abc:	200001a4 	.word	0x200001a4

08001ac0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460a      	mov	r2, r1
 8001aca:	80fb      	strh	r3, [r7, #6]
 8001acc:	4613      	mov	r3, r2
 8001ace:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001ad0:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <SSD1306_GotoXY+0x28>)
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <SSD1306_GotoXY+0x28>)
 8001ad8:	88bb      	ldrh	r3, [r7, #4]
 8001ada:	8053      	strh	r3, [r2, #2]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	200005a4 	.word	0x200005a4

08001aec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
 8001af8:	4613      	mov	r3, r2
 8001afa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001afc:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <SSD1306_Putc+0xfc>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
	if (
 8001b08:	2b7f      	cmp	r3, #127	; 0x7f
 8001b0a:	dc07      	bgt.n	8001b1c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <SSD1306_Putc+0xfc>)
 8001b0e:	885b      	ldrh	r3, [r3, #2]
 8001b10:	461a      	mov	r2, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	785b      	ldrb	r3, [r3, #1]
 8001b16:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b18:	2b3f      	cmp	r3, #63	; 0x3f
 8001b1a:	dd01      	ble.n	8001b20 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e05e      	b.n	8001bde <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e04b      	b.n	8001bbe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	3b20      	subs	r3, #32
 8001b2e:	6839      	ldr	r1, [r7, #0]
 8001b30:	7849      	ldrb	r1, [r1, #1]
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4619      	mov	r1, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	440b      	add	r3, r1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	e030      	b.n	8001bac <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d010      	beq.n	8001b7c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <SSD1306_Putc+0xfc>)
 8001b5c:	881a      	ldrh	r2, [r3, #0]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b298      	uxth	r0, r3
 8001b66:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <SSD1306_Putc+0xfc>)
 8001b68:	885a      	ldrh	r2, [r3, #2]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	79ba      	ldrb	r2, [r7, #6]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7ff ff43 	bl	8001a00 <SSD1306_DrawPixel>
 8001b7a:	e014      	b.n	8001ba6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <SSD1306_Putc+0xfc>)
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	b298      	uxth	r0, r3
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <SSD1306_Putc+0xfc>)
 8001b8a:	885a      	ldrh	r2, [r3, #2]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b299      	uxth	r1, r3
 8001b94:	79bb      	ldrb	r3, [r7, #6]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf0c      	ite	eq
 8001b9a:	2301      	moveq	r3, #1
 8001b9c:	2300      	movne	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	f7ff ff2d 	bl	8001a00 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d3c8      	bcc.n	8001b4a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	785b      	ldrb	r3, [r3, #1]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d3ad      	bcc.n	8001b26 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <SSD1306_Putc+0xfc>)
 8001bcc:	881a      	ldrh	r2, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <SSD1306_Putc+0xfc>)
 8001bda:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200005a4 	.word	0x200005a4

08001bec <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001bfa:	e012      	b.n	8001c22 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	79fa      	ldrb	r2, [r7, #7]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff71 	bl	8001aec <SSD1306_Putc>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d002      	beq.n	8001c1c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	e008      	b.n	8001c2e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1e8      	bne.n	8001bfc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff fec8 	bl	80019d0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001c40:	f7ff fe76 	bl	8001930 <SSD1306_UpdateScreen>
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <ssd1306_I2C_Init+0x28>)
 8001c50:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c52:	e002      	b.n	8001c5a <ssd1306_I2C_Init+0x12>
		p--;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f9      	bne.n	8001c54 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	0003d090 	.word	0x0003d090

08001c74 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b0c7      	sub	sp, #284	; 0x11c
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4639      	mov	r1, r7
 8001c80:	600a      	str	r2, [r1, #0]
 8001c82:	4619      	mov	r1, r3
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	4622      	mov	r2, r4
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	1dbb      	adds	r3, r7, #6
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	460a      	mov	r2, r1
 8001c94:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	1dba      	adds	r2, r7, #6
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ca6:	e010      	b.n	8001cca <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8001ca8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cac:	463a      	mov	r2, r7
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	441a      	add	r2, r3
 8001cb2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	7811      	ldrb	r1, [r2, #0]
 8001cba:	f107 020c 	add.w	r2, r7, #12
 8001cbe:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001cc0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001cca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	1d3a      	adds	r2, r7, #4
 8001cd2:	8812      	ldrh	r2, [r2, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8e7      	bhi.n	8001ca8 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b299      	uxth	r1, r3
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f107 020c 	add.w	r2, r7, #12
 8001cea:	200a      	movs	r0, #10
 8001cec:	9000      	str	r0, [sp, #0]
 8001cee:	4804      	ldr	r0, [pc, #16]	; (8001d00 <ssd1306_I2C_WriteMulti+0x8c>)
 8001cf0:	f000 fe6c 	bl	80029cc <HAL_I2C_Master_Transmit>
}
 8001cf4:	bf00      	nop
 8001cf6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd90      	pop	{r4, r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200007cc 	.word	0x200007cc

08001d04 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 8001d04:	b082      	sub	sp, #8
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af02      	add	r7, sp, #8
 8001d0c:	f107 0c18 	add.w	ip, r7, #24
 8001d10:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 8001d1c:	79bb      	ldrb	r3, [r7, #6]
 8001d1e:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001d20:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001d24:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	f107 020c 	add.w	r2, r7, #12
 8001d2e:	230a      	movs	r3, #10
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2302      	movs	r3, #2
 8001d34:	f107 0018 	add.w	r0, r7, #24
 8001d38:	f000 fe48 	bl	80029cc <HAL_I2C_Master_Transmit>
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d46:	b002      	add	sp, #8
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08e      	sub	sp, #56	; 0x38
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5b      	ldr	r2, [pc, #364]	; (8001f28 <HAL_I2C_MspInit+0x18c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12c      	bne.n	8001e18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a59      	ldr	r2, [pc, #356]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b57      	ldr	r3, [pc, #348]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dda:	23c0      	movs	r3, #192	; 0xc0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dde:	2312      	movs	r3, #18
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dea:	2304      	movs	r3, #4
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df2:	4619      	mov	r1, r3
 8001df4:	484e      	ldr	r0, [pc, #312]	; (8001f30 <HAL_I2C_MspInit+0x194>)
 8001df6:	f000 fabd 	bl	8002374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a4a      	ldr	r2, [pc, #296]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e16:	e083      	b.n	8001f20 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a45      	ldr	r2, [pc, #276]	; (8001f34 <HAL_I2C_MspInit+0x198>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d12d      	bne.n	8001e7e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a40      	ldr	r2, [pc, #256]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e44:	2312      	movs	r3, #18
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e50:	2304      	movs	r3, #4
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4835      	ldr	r0, [pc, #212]	; (8001f30 <HAL_I2C_MspInit+0x194>)
 8001e5c:	f000 fa8a 	bl	8002374 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	4a30      	ldr	r2, [pc, #192]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e70:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697b      	ldr	r3, [r7, #20]
}
 8001e7c:	e050      	b.n	8001f20 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a2d      	ldr	r2, [pc, #180]	; (8001f38 <HAL_I2C_MspInit+0x19c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d14b      	bne.n	8001f20 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec6:	2312      	movs	r3, #18
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eda:	4619      	mov	r1, r3
 8001edc:	4817      	ldr	r0, [pc, #92]	; (8001f3c <HAL_I2C_MspInit+0x1a0>)
 8001ede:	f000 fa49 	bl	8002374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee8:	2312      	movs	r3, #18
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efc:	4619      	mov	r1, r3
 8001efe:	4810      	ldr	r0, [pc, #64]	; (8001f40 <HAL_I2C_MspInit+0x1a4>)
 8001f00:	f000 fa38 	bl	8002374 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001f0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f12:	6413      	str	r3, [r2, #64]	; 0x40
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_I2C_MspInit+0x190>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
}
 8001f20:	bf00      	nop
 8001f22:	3738      	adds	r7, #56	; 0x38
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40005400 	.word	0x40005400
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40005800 	.word	0x40005800
 8001f38:	40005c00 	.word	0x40005c00
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020000 	.word	0x40020000

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <NMI_Handler+0x4>

08001f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <HardFault_Handler+0x4>

08001f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <MemManage_Handler+0x4>

08001f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <BusFault_Handler+0x4>

08001f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <UsageFault_Handler+0x4>

08001f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f90:	f000 f89a 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <OTG_FS_IRQHandler+0x10>)
 8001f9e:	f001 fdfe 	bl	8003b9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20001e30 	.word	0x20001e30

08001fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <SystemInit+0x20>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <SystemInit+0x20>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd4:	480d      	ldr	r0, [pc, #52]	; (800200c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fd6:	490e      	ldr	r1, [pc, #56]	; (8002010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fec:	4c0b      	ldr	r4, [pc, #44]	; (800201c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ffa:	f7ff ffd7 	bl	8001fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f006 ff19 	bl	8008e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002002:	f7fe fef3 	bl	8000dec <main>
  bx  lr    
 8002006:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8002014:	08009d94 	.word	0x08009d94
  ldr r2, =_sbss
 8002018:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 800201c:	20002238 	.word	0x20002238

08002020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC_IRQHandler>
	...

08002024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <HAL_Init+0x40>)
 800202e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_Init+0x40>)
 800203a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_Init+0x40>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204c:	2003      	movs	r0, #3
 800204e:	f000 f94f 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002052:	200f      	movs	r0, #15
 8002054:	f000 f808 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff fe78 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023c00 	.word	0x40023c00

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x54>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x58>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f967 	bl	800235a <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00e      	b.n	80020b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d80a      	bhi.n	80020b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a4:	f000 f92f 	bl	8002306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <HAL_InitTick+0x5c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000008 	.word	0x20000008
 80020c0:	20000010 	.word	0x20000010
 80020c4:	2000000c 	.word	0x2000000c

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000010 	.word	0x20000010
 80020ec:	2000095c 	.word	0x2000095c

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2000095c 	.word	0x2000095c

08002108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff ffee 	bl	80020f0 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002120:	d005      	beq.n	800212e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_Delay+0x44>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212e:	bf00      	nop
 8002130:	f7ff ffde 	bl	80020f0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d8f7      	bhi.n	8002130 <HAL_Delay+0x28>
  {
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000010 	.word	0x20000010

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4907      	ldr	r1, [pc, #28]	; (80021ec <__NVIC_EnableIRQ+0x38>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2001      	movs	r0, #1
 80021d6:	fa00 f202 	lsl.w	r2, r0, r2
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	; (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	; (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022bc:	d301      	bcc.n	80022c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022be:	2301      	movs	r3, #1
 80022c0:	e00f      	b.n	80022e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <SysTick_Config+0x40>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ca:	210f      	movs	r1, #15
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d0:	f7ff ff8e 	bl	80021f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SysTick_Config+0x40>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x40>)
 80022dc:	2207      	movs	r2, #7
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff29 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002318:	f7ff ff3e 	bl	8002198 <__NVIC_GetPriorityGrouping>
 800231c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff ff8e 	bl	8002244 <NVIC_EncodePriority>
 8002328:	4602      	mov	r2, r0
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff5d 	bl	80021f0 <__NVIC_SetPriority>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff31 	bl	80021b4 <__NVIC_EnableIRQ>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffa2 	bl	80022ac <SysTick_Config>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	e16b      	b.n	8002668 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002390:	2201      	movs	r2, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	f040 815a 	bne.w	8002662 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d005      	beq.n	80023c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d130      	bne.n	8002428 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023fc:	2201      	movs	r2, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 0201 	and.w	r2, r3, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b03      	cmp	r3, #3
 8002432:	d017      	beq.n	8002464 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d123      	bne.n	80024b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3208      	adds	r2, #8
 80024b2:	69b9      	ldr	r1, [r7, #24]
 80024b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80b4 	beq.w	8002662 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b60      	ldr	r3, [pc, #384]	; (8002680 <HAL_GPIO_Init+0x30c>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a5f      	ldr	r2, [pc, #380]	; (8002680 <HAL_GPIO_Init+0x30c>)
 8002504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <HAL_GPIO_Init+0x30c>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002516:	4a5b      	ldr	r2, [pc, #364]	; (8002684 <HAL_GPIO_Init+0x310>)
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	220f      	movs	r2, #15
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a52      	ldr	r2, [pc, #328]	; (8002688 <HAL_GPIO_Init+0x314>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d02b      	beq.n	800259a <HAL_GPIO_Init+0x226>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a51      	ldr	r2, [pc, #324]	; (800268c <HAL_GPIO_Init+0x318>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d025      	beq.n	8002596 <HAL_GPIO_Init+0x222>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a50      	ldr	r2, [pc, #320]	; (8002690 <HAL_GPIO_Init+0x31c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01f      	beq.n	8002592 <HAL_GPIO_Init+0x21e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4f      	ldr	r2, [pc, #316]	; (8002694 <HAL_GPIO_Init+0x320>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d019      	beq.n	800258e <HAL_GPIO_Init+0x21a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4e      	ldr	r2, [pc, #312]	; (8002698 <HAL_GPIO_Init+0x324>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d013      	beq.n	800258a <HAL_GPIO_Init+0x216>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4d      	ldr	r2, [pc, #308]	; (800269c <HAL_GPIO_Init+0x328>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00d      	beq.n	8002586 <HAL_GPIO_Init+0x212>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4c      	ldr	r2, [pc, #304]	; (80026a0 <HAL_GPIO_Init+0x32c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <HAL_GPIO_Init+0x20e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4b      	ldr	r2, [pc, #300]	; (80026a4 <HAL_GPIO_Init+0x330>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_GPIO_Init+0x20a>
 800257a:	2307      	movs	r3, #7
 800257c:	e00e      	b.n	800259c <HAL_GPIO_Init+0x228>
 800257e:	2308      	movs	r3, #8
 8002580:	e00c      	b.n	800259c <HAL_GPIO_Init+0x228>
 8002582:	2306      	movs	r3, #6
 8002584:	e00a      	b.n	800259c <HAL_GPIO_Init+0x228>
 8002586:	2305      	movs	r3, #5
 8002588:	e008      	b.n	800259c <HAL_GPIO_Init+0x228>
 800258a:	2304      	movs	r3, #4
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x228>
 800258e:	2303      	movs	r3, #3
 8002590:	e004      	b.n	800259c <HAL_GPIO_Init+0x228>
 8002592:	2302      	movs	r3, #2
 8002594:	e002      	b.n	800259c <HAL_GPIO_Init+0x228>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_GPIO_Init+0x228>
 800259a:	2300      	movs	r3, #0
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f002 0203 	and.w	r2, r2, #3
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4093      	lsls	r3, r2
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ac:	4935      	ldr	r1, [pc, #212]	; (8002684 <HAL_GPIO_Init+0x310>)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ba:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_GPIO_Init+0x334>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025de:	4a32      	ldr	r2, [pc, #200]	; (80026a8 <HAL_GPIO_Init+0x334>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025e4:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <HAL_GPIO_Init+0x334>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002608:	4a27      	ldr	r2, [pc, #156]	; (80026a8 <HAL_GPIO_Init+0x334>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260e:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <HAL_GPIO_Init+0x334>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002632:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_GPIO_Init+0x334>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_GPIO_Init+0x334>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800265c:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <HAL_GPIO_Init+0x334>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3301      	adds	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	2b0f      	cmp	r3, #15
 800266c:	f67f ae90 	bls.w	8002390 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	40013800 	.word	0x40013800
 8002688:	40020000 	.word	0x40020000
 800268c:	40020400 	.word	0x40020400
 8002690:	40020800 	.word	0x40020800
 8002694:	40020c00 	.word	0x40020c00
 8002698:	40021000 	.word	0x40021000
 800269c:	40021400 	.word	0x40021400
 80026a0:	40021800 	.word	0x40021800
 80026a4:	40021c00 	.word	0x40021c00
 80026a8:	40013c00 	.word	0x40013c00

080026ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	e001      	b.n	80026ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]
 80026e8:	4613      	mov	r3, r2
 80026ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026ec:	787b      	ldrb	r3, [r7, #1]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026f8:	e003      	b.n	8002702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026fa:	887b      	ldrh	r3, [r7, #2]
 80026fc:	041a      	lsls	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	619a      	str	r2, [r3, #24]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002720:	887a      	ldrh	r2, [r7, #2]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	041a      	lsls	r2, r3, #16
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43d9      	mvns	r1, r3
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	400b      	ands	r3, r1
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e12b      	b.n	80029ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fb16 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a8:	f002 fe4c 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 80027ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a81      	ldr	r2, [pc, #516]	; (80029b8 <HAL_I2C_Init+0x274>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d807      	bhi.n	80027c8 <HAL_I2C_Init+0x84>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a80      	ldr	r2, [pc, #512]	; (80029bc <HAL_I2C_Init+0x278>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	bf94      	ite	ls
 80027c0:	2301      	movls	r3, #1
 80027c2:	2300      	movhi	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e006      	b.n	80027d6 <HAL_I2C_Init+0x92>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a7d      	ldr	r2, [pc, #500]	; (80029c0 <HAL_I2C_Init+0x27c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bf94      	ite	ls
 80027d0:	2301      	movls	r3, #1
 80027d2:	2300      	movhi	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0e7      	b.n	80029ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a78      	ldr	r2, [pc, #480]	; (80029c4 <HAL_I2C_Init+0x280>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0c9b      	lsrs	r3, r3, #18
 80027e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a6a      	ldr	r2, [pc, #424]	; (80029b8 <HAL_I2C_Init+0x274>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d802      	bhi.n	8002818 <HAL_I2C_Init+0xd4>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	3301      	adds	r3, #1
 8002816:	e009      	b.n	800282c <HAL_I2C_Init+0xe8>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	4a69      	ldr	r2, [pc, #420]	; (80029c8 <HAL_I2C_Init+0x284>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	3301      	adds	r3, #1
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	430b      	orrs	r3, r1
 8002832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800283e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	495c      	ldr	r1, [pc, #368]	; (80029b8 <HAL_I2C_Init+0x274>)
 8002848:	428b      	cmp	r3, r1
 800284a:	d819      	bhi.n	8002880 <HAL_I2C_Init+0x13c>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e59      	subs	r1, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fbb1 f3f3 	udiv	r3, r1, r3
 800285a:	1c59      	adds	r1, r3, #1
 800285c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002860:	400b      	ands	r3, r1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_I2C_Init+0x138>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1e59      	subs	r1, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fbb1 f3f3 	udiv	r3, r1, r3
 8002874:	3301      	adds	r3, #1
 8002876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287a:	e051      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 800287c:	2304      	movs	r3, #4
 800287e:	e04f      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <HAL_I2C_Init+0x168>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e012      	b.n	80028d2 <HAL_I2C_Init+0x18e>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1e58      	subs	r0, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	0099      	lsls	r1, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Init+0x196>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e022      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10e      	bne.n	8002900 <HAL_I2C_Init+0x1bc>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1e58      	subs	r0, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	440b      	add	r3, r1
 80028f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fe:	e00f      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1e58      	subs	r0, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	0099      	lsls	r1, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	fbb0 f3f3 	udiv	r3, r0, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	6809      	ldr	r1, [r1, #0]
 8002924:	4313      	orrs	r3, r2
 8002926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800294e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6911      	ldr	r1, [r2, #16]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68d2      	ldr	r2, [r2, #12]
 800295a:	4311      	orrs	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	430b      	orrs	r3, r1
 8002962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	000186a0 	.word	0x000186a0
 80029bc:	001e847f 	.word	0x001e847f
 80029c0:	003d08ff 	.word	0x003d08ff
 80029c4:	431bde83 	.word	0x431bde83
 80029c8:	10624dd3 	.word	0x10624dd3

080029cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	461a      	mov	r2, r3
 80029d8:	460b      	mov	r3, r1
 80029da:	817b      	strh	r3, [r7, #10]
 80029dc:	4613      	mov	r3, r2
 80029de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff fb86 	bl	80020f0 <HAL_GetTick>
 80029e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	f040 80e0 	bne.w	8002bb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2319      	movs	r3, #25
 80029fa:	2201      	movs	r2, #1
 80029fc:	4970      	ldr	r1, [pc, #448]	; (8002bc0 <HAL_I2C_Master_Transmit+0x1f4>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fda0 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e0d3      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_I2C_Master_Transmit+0x50>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0cc      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d007      	beq.n	8002a42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2221      	movs	r2, #33	; 0x21
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	893a      	ldrh	r2, [r7, #8]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fbf0 	bl	8003270 <I2C_MasterRequestWrite>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e08d      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ab0:	e066      	b.n	8002b80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	6a39      	ldr	r1, [r7, #32]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fe1a 	bl	80036f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d107      	bne.n	8002ada <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06b      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d11b      	bne.n	8002b54 <HAL_I2C_Master_Transmit+0x188>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	6a39      	ldr	r1, [r7, #32]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fe0a 	bl	8003772 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00d      	beq.n	8002b80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d107      	bne.n	8002b7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e01a      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d194      	bne.n	8002ab2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	00100002 	.word	0x00100002
 8002bc4:	ffff0000 	.word	0xffff0000

08002bc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	; 0x30
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	817b      	strh	r3, [r7, #10]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	813b      	strh	r3, [r7, #8]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be2:	f7ff fa85 	bl	80020f0 <HAL_GetTick>
 8002be6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	f040 8208 	bne.w	8003006 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2319      	movs	r3, #25
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	497b      	ldr	r1, [pc, #492]	; (8002dec <HAL_I2C_Mem_Read+0x224>)
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fc9f 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e1fb      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_I2C_Mem_Read+0x56>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e1f4      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d007      	beq.n	8002c44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2222      	movs	r2, #34	; 0x22
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a5b      	ldr	r2, [pc, #364]	; (8002df0 <HAL_I2C_Mem_Read+0x228>)
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c86:	88f8      	ldrh	r0, [r7, #6]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4603      	mov	r3, r0
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fb6c 	bl	8003374 <I2C_RequestMemoryRead>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1b0      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d113      	bne.n	8002cd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	623b      	str	r3, [r7, #32]
 8002cc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e184      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d11b      	bne.n	8002d16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e164      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d11b      	bne.n	8002d56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	e144      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d6c:	e138      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	f200 80f1 	bhi.w	8002f5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d123      	bne.n	8002dc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fd35 	bl	80037f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e139      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dc6:	e10b      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d14e      	bne.n	8002e6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4906      	ldr	r1, [pc, #24]	; (8002df4 <HAL_I2C_Mem_Read+0x22c>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fbb2 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e10e      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
 8002dea:	bf00      	nop
 8002dec:	00100002 	.word	0x00100002
 8002df0:	ffff0000 	.word	0xffff0000
 8002df4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e6c:	e0b8      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	2200      	movs	r2, #0
 8002e76:	4966      	ldr	r1, [pc, #408]	; (8003010 <HAL_I2C_Mem_Read+0x448>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fb63 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0bf      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	494f      	ldr	r1, [pc, #316]	; (8003010 <HAL_I2C_Mem_Read+0x448>)
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fb35 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e091      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f58:	e042      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fc48 	bl	80037f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e04c      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d118      	bne.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f47f aec2 	bne.w	8002d6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	00010004 	.word	0x00010004

08003014 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	460b      	mov	r3, r1
 8003022:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff f864 	bl	80020f0 <HAL_GetTick>
 8003028:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800302a:	2301      	movs	r3, #1
 800302c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	f040 8111 	bne.w	800325e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2319      	movs	r3, #25
 8003042:	2201      	movs	r2, #1
 8003044:	4988      	ldr	r1, [pc, #544]	; (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fa7c 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e104      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_I2C_IsDeviceReady+0x50>
 8003060:	2302      	movs	r3, #2
 8003062:	e0fd      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d007      	beq.n	800308a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2224      	movs	r2, #36	; 0x24
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a70      	ldr	r2, [pc, #448]	; (800326c <HAL_I2C_IsDeviceReady+0x258>)
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fa3a 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e4:	d103      	bne.n	80030ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e0b6      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003100:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003102:	f7fe fff5 	bl	80020f0 <HAL_GetTick>
 8003106:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003136:	e025      	b.n	8003184 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003138:	f7fe ffda 	bl	80020f0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <HAL_I2C_IsDeviceReady+0x13a>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	22a0      	movs	r2, #160	; 0xa0
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2ba0      	cmp	r3, #160	; 0xa0
 800318e:	d005      	beq.n	800319c <HAL_I2C_IsDeviceReady+0x188>
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_I2C_IsDeviceReady+0x188>
 8003196:	7dbb      	ldrb	r3, [r7, #22]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0cd      	beq.n	8003138 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d129      	bne.n	8003206 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2319      	movs	r3, #25
 80031de:	2201      	movs	r2, #1
 80031e0:	4921      	ldr	r1, [pc, #132]	; (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f9ae 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e036      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e02c      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003214:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800321e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2319      	movs	r3, #25
 8003226:	2201      	movs	r2, #1
 8003228:	490f      	ldr	r1, [pc, #60]	; (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f98a 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e012      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	3301      	adds	r3, #1
 800323e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	f4ff af32 	bcc.w	80030ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
  }
}
 8003260:	4618      	mov	r0, r3
 8003262:	3720      	adds	r7, #32
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	00100002 	.word	0x00100002
 800326c:	ffff0000 	.word	0xffff0000

08003270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	460b      	mov	r3, r1
 800327e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d006      	beq.n	800329a <I2C_MasterRequestWrite+0x2a>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d003      	beq.n	800329a <I2C_MasterRequestWrite+0x2a>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003298:	d108      	bne.n	80032ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e00b      	b.n	80032c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	2b12      	cmp	r3, #18
 80032b2:	d107      	bne.n	80032c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f937 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ea:	d103      	bne.n	80032f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e035      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003300:	d108      	bne.n	8003314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	e01b      	b.n	800334c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003314:	897b      	ldrh	r3, [r7, #10]
 8003316:	11db      	asrs	r3, r3, #7
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 0306 	and.w	r3, r3, #6
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f063 030f 	orn	r3, r3, #15
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	490e      	ldr	r1, [pc, #56]	; (800336c <I2C_MasterRequestWrite+0xfc>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f95d 	bl	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e010      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4907      	ldr	r1, [pc, #28]	; (8003370 <I2C_MasterRequestWrite+0x100>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f94d 	bl	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	00010008 	.word	0x00010008
 8003370:	00010002 	.word	0x00010002

08003374 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	817b      	strh	r3, [r7, #10]
 8003386:	460b      	mov	r3, r1
 8003388:	813b      	strh	r3, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f8c2 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d4:	d103      	bne.n	80033de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0aa      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	4952      	ldr	r1, [pc, #328]	; (8003540 <I2C_RequestMemoryRead+0x1cc>)
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f8fa 	bl	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e097      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	6a39      	ldr	r1, [r7, #32]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f964 	bl	80036f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b04      	cmp	r3, #4
 8003434:	d107      	bne.n	8003446 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e076      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003450:	893b      	ldrh	r3, [r7, #8]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	611a      	str	r2, [r3, #16]
 800345a:	e021      	b.n	80034a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800345c:	893b      	ldrh	r3, [r7, #8]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	b29b      	uxth	r3, r3
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f93e 	bl	80036f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	2b04      	cmp	r3, #4
 8003480:	d107      	bne.n	8003492 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e050      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003496:	893b      	ldrh	r3, [r7, #8]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	6a39      	ldr	r1, [r7, #32]
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f923 	bl	80036f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e035      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f82b 	bl	8003544 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003502:	d103      	bne.n	800350c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e013      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003510:	897b      	ldrh	r3, [r7, #10]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	6a3a      	ldr	r2, [r7, #32]
 8003524:	4906      	ldr	r1, [pc, #24]	; (8003540 <I2C_RequestMemoryRead+0x1cc>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f863 	bl	80035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	00010002 	.word	0x00010002

08003544 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003554:	e025      	b.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800355c:	d021      	beq.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fe fdc7 	bl	80020f0 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x30>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d116      	bne.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f043 0220 	orr.w	r2, r3, #32
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e023      	b.n	80035ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10d      	bne.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf0c      	ite	eq
 80035be:	2301      	moveq	r3, #1
 80035c0:	2300      	movne	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	e00c      	b.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4013      	ands	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf0c      	ite	eq
 80035da:	2301      	moveq	r3, #1
 80035dc:	2300      	movne	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d0b6      	beq.n	8003556 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003600:	e051      	b.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003610:	d123      	bne.n	800365a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003620:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800362a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f043 0204 	orr.w	r2, r3, #4
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e046      	b.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003660:	d021      	beq.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fe fd45 	bl	80020f0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d116      	bne.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f043 0220 	orr.w	r2, r3, #32
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e020      	b.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d10c      	bne.n	80036ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	43da      	mvns	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bf14      	ite	ne
 80036c2:	2301      	movne	r3, #1
 80036c4:	2300      	moveq	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	e00b      	b.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	43da      	mvns	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	4013      	ands	r3, r2
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d18d      	bne.n	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036fc:	e02d      	b.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f8ce 	bl	80038a0 <I2C_IsAcknowledgeFailed>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e02d      	b.n	800376a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003714:	d021      	beq.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	f7fe fceb 	bl	80020f0 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d116      	bne.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f043 0220 	orr.w	r2, r3, #32
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e007      	b.n	800376a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003764:	2b80      	cmp	r3, #128	; 0x80
 8003766:	d1ca      	bne.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800377e:	e02d      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f88d 	bl	80038a0 <I2C_IsAcknowledgeFailed>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e02d      	b.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003796:	d021      	beq.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003798:	f7fe fcaa 	bl	80020f0 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d302      	bcc.n	80037ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d116      	bne.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e007      	b.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d1ca      	bne.n	8003780 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003800:	e042      	b.n	8003888 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b10      	cmp	r3, #16
 800380e:	d119      	bne.n	8003844 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0210 	mvn.w	r2, #16
 8003818:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e029      	b.n	8003898 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003844:	f7fe fc54 	bl	80020f0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	429a      	cmp	r2, r3
 8003852:	d302      	bcc.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d116      	bne.n	8003888 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e007      	b.n	8003898 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d1b5      	bne.n	8003802 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b6:	d11b      	bne.n	80038f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f043 0204 	orr.w	r2, r3, #4
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003900:	b08f      	sub	sp, #60	; 0x3c
 8003902:	af0a      	add	r7, sp, #40	; 0x28
 8003904:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e10f      	b.n	8003b30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f004 ff6e 	bl	800880c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2203      	movs	r2, #3
 8003934:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fea1 	bl	8005696 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	687e      	ldr	r6, [r7, #4]
 800395c:	466d      	mov	r5, sp
 800395e:	f106 0410 	add.w	r4, r6, #16
 8003962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800396a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800396e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003972:	1d33      	adds	r3, r6, #4
 8003974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003976:	6838      	ldr	r0, [r7, #0]
 8003978:	f001 fd78 	bl	800546c <USB_CoreInit>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0d0      	b.n	8003b30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f001 fe8f 	bl	80056b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	e04a      	b.n	8003a36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	333d      	adds	r3, #61	; 0x3d
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	333c      	adds	r3, #60	; 0x3c
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	b298      	uxth	r0, r3
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	3342      	adds	r3, #66	; 0x42
 80039dc:	4602      	mov	r2, r0
 80039de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	333f      	adds	r3, #63	; 0x3f
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3344      	adds	r3, #68	; 0x44
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	3348      	adds	r3, #72	; 0x48
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3350      	adds	r3, #80	; 0x50
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	3301      	adds	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d3af      	bcc.n	80039a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e044      	b.n	8003ad0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a6e:	7bfa      	ldrb	r2, [r7, #15]
 8003a70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	3301      	adds	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d3b5      	bcc.n	8003a46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	687e      	ldr	r6, [r7, #4]
 8003ae2:	466d      	mov	r5, sp
 8003ae4:	f106 0410 	add.w	r4, r6, #16
 8003ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003af4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003af8:	1d33      	adds	r3, r6, #4
 8003afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003afc:	6838      	ldr	r0, [r7, #0]
 8003afe:	f001 fe27 	bl	8005750 <USB_DevInit>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e00d      	b.n	8003b30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 fea3 	bl	8006874 <USB_DevDisconnect>

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_PCD_Start+0x1c>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e020      	b.n	8003b96 <HAL_PCD_Start+0x5e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d109      	bne.n	8003b78 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d005      	beq.n	8003b78 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 fd79 	bl	8005674 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f002 fe53 	bl	8006832 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b9e:	b590      	push	{r4, r7, lr}
 8003ba0:	b08d      	sub	sp, #52	; 0x34
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f002 ff11 	bl	80069dc <USB_GetMode>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f040 839d 	bne.w	80042fc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f002 fe75 	bl	80068b6 <USB_ReadInterrupts>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8393 	beq.w	80042fa <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f002 fe6c 	bl	80068b6 <USB_ReadInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d107      	bne.n	8003bf8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f002 0202 	and.w	r2, r2, #2
 8003bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f002 fe5a 	bl	80068b6 <USB_ReadInterrupts>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d161      	bne.n	8003cd0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0210 	bic.w	r2, r2, #16
 8003c1a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 020f 	and.w	r2, r3, #15
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	0c5b      	lsrs	r3, r3, #17
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d124      	bne.n	8003c92 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d035      	beq.n	8003cc0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	6a38      	ldr	r0, [r7, #32]
 8003c68:	f002 fc91 	bl	800658e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c78:	441a      	add	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c8a:	441a      	add	r2, r3
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	619a      	str	r2, [r3, #24]
 8003c90:	e016      	b.n	8003cc0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	0c5b      	lsrs	r3, r3, #17
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	d110      	bne.n	8003cc0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6a38      	ldr	r0, [r7, #32]
 8003caa:	f002 fc70 	bl	800658e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cba:	441a      	add	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0210 	orr.w	r2, r2, #16
 8003cce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f002 fdee 	bl	80068b6 <USB_ReadInterrupts>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ce4:	d16e      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f002 fdf4 	bl	80068dc <USB_ReadDevAllOutEpInterrupt>
 8003cf4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003cf6:	e062      	b.n	8003dbe <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d057      	beq.n	8003db2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f002 fe19 	bl	8006944 <USB_ReadDevOutEPInterrupt>
 8003d12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00c      	beq.n	8003d38 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fdb0 	bl	8004898 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2308      	movs	r3, #8
 8003d52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 feaa 	bl	8004ab0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d72:	461a      	mov	r2, r3
 8003d74:	2310      	movs	r3, #16
 8003d76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2320      	movs	r3, #32
 8003d92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	461a      	mov	r2, r3
 8003dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003db0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	3301      	adds	r3, #1
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d199      	bne.n	8003cf8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f002 fd74 	bl	80068b6 <USB_ReadInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dd8:	f040 80c0 	bne.w	8003f5c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f002 fd95 	bl	8006910 <USB_ReadDevAllInEpInterrupt>
 8003de6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003dec:	e0b2      	b.n	8003f54 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80a7 	beq.w	8003f48 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f002 fdbb 	bl	8006980 <USB_ReadDevInEPInterrupt>
 8003e0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d057      	beq.n	8003ec6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69f9      	ldr	r1, [r7, #28]
 8003e32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e36:	4013      	ands	r3, r2
 8003e38:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e46:	461a      	mov	r2, r3
 8003e48:	2301      	movs	r3, #1
 8003e4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d132      	bne.n	8003eba <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3348      	adds	r3, #72	; 0x48
 8003e64:	6819      	ldr	r1, [r3, #0]
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4403      	add	r3, r0
 8003e74:	3344      	adds	r3, #68	; 0x44
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4419      	add	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4403      	add	r3, r0
 8003e88:	3348      	adds	r3, #72	; 0x48
 8003e8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d113      	bne.n	8003eba <HAL_PCD_IRQHandler+0x31c>
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3350      	adds	r3, #80	; 0x50
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d108      	bne.n	8003eba <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	f002 fdc3 	bl	8006a40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f004 fd24 	bl	800890e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003edc:	461a      	mov	r2, r3
 8003ede:	2308      	movs	r3, #8
 8003ee0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2310      	movs	r3, #16
 8003efc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	461a      	mov	r2, r3
 8003f16:	2340      	movs	r3, #64	; 0x40
 8003f18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	461a      	mov	r2, r3
 8003f32:	2302      	movs	r3, #2
 8003f34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fc1b 	bl	800477e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f47f af49 	bne.w	8003dee <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f002 fca8 	bl	80068b6 <USB_ReadInterrupts>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f70:	d122      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d108      	bne.n	8003fa2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f98:	2100      	movs	r1, #0
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fe26 	bl	8004bec <HAL_PCDEx_LPM_Callback>
 8003fa0:	e002      	b.n	8003fa8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f004 fd2a 	bl	80089fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f002 fc7a 	bl	80068b6 <USB_ReadInterrupts>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fcc:	d112      	bne.n	8003ff4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d102      	bne.n	8003fe4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f004 fce6 	bl	80089b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ff2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f002 fc5c 	bl	80068b6 <USB_ReadInterrupts>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004008:	f040 80c7 	bne.w	800419a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2110      	movs	r1, #16
 8004026:	4618      	mov	r0, r3
 8004028:	f001 fcf6 	bl	8005a18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004030:	e056      	b.n	80040e0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403e:	461a      	mov	r2, r3
 8004040:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004044:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004056:	0151      	lsls	r1, r2, #5
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	440a      	add	r2, r1
 800405c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004060:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004064:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004084:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004092:	461a      	mov	r2, r3
 8004094:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004098:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	3301      	adds	r3, #1
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d3a3      	bcc.n	8004032 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80040fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004116:	f043 030b 	orr.w	r3, r3, #11
 800411a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800412c:	f043 030b 	orr.w	r3, r3, #11
 8004130:	6453      	str	r3, [r2, #68]	; 0x44
 8004132:	e015      	b.n	8004160 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004142:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004146:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800414a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800415a:	f043 030b 	orr.w	r3, r3, #11
 800415e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004172:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004184:	461a      	mov	r2, r3
 8004186:	f002 fc5b 	bl	8006a40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004198:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f002 fb89 	bl	80068b6 <USB_ReadInterrupts>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ae:	d124      	bne.n	80041fa <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f002 fc1f 	bl	80069f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 fc87 	bl	8005ad2 <USB_GetDevSpeed>
 80041c4:	4603      	mov	r3, r0
 80041c6:	461a      	mov	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681c      	ldr	r4, [r3, #0]
 80041d0:	f001 f92c 	bl	800542c <HAL_RCC_GetHCLKFreq>
 80041d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	4620      	mov	r0, r4
 80041e0:	f001 f9a6 	bl	8005530 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f004 fbba 	bl	800895e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f002 fb59 	bl	80068b6 <USB_ReadInterrupts>
 8004204:	4603      	mov	r3, r0
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b08      	cmp	r3, #8
 800420c:	d10a      	bne.n	8004224 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f004 fb97 	bl	8008942 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f002 0208 	and.w	r2, r2, #8
 8004222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f002 fb44 	bl	80068b6 <USB_ReadInterrupts>
 800422e:	4603      	mov	r3, r0
 8004230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004238:	d10f      	bne.n	800425a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	b2db      	uxtb	r3, r3
 8004242:	4619      	mov	r1, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f004 fbf9 	bl	8008a3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f002 fb29 	bl	80068b6 <USB_ReadInterrupts>
 8004264:	4603      	mov	r3, r0
 8004266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800426e:	d10f      	bne.n	8004290 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f004 fbcc 	bl	8008a18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695a      	ldr	r2, [r3, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800428e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f002 fb0e 	bl	80068b6 <USB_ReadInterrupts>
 800429a:	4603      	mov	r3, r0
 800429c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d10a      	bne.n	80042bc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f004 fbda 	bl	8008a60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80042ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f002 faf8 	bl	80068b6 <USB_ReadInterrupts>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d115      	bne.n	80042fc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f004 fbca 	bl	8008a7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
 80042f8:	e000      	b.n	80042fc <HAL_PCD_IRQHandler+0x75e>
      return;
 80042fa:	bf00      	nop
    }
  }
}
 80042fc:	3734      	adds	r7, #52	; 0x34
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd90      	pop	{r4, r7, pc}

08004302 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_PCD_SetAddress+0x1a>
 8004318:	2302      	movs	r3, #2
 800431a:	e013      	b.n	8004344 <HAL_PCD_SetAddress+0x42>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f002 fa56 	bl	80067e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	4608      	mov	r0, r1
 8004356:	4611      	mov	r1, r2
 8004358:	461a      	mov	r2, r3
 800435a:	4603      	mov	r3, r0
 800435c:	70fb      	strb	r3, [r7, #3]
 800435e:	460b      	mov	r3, r1
 8004360:	803b      	strh	r3, [r7, #0]
 8004362:	4613      	mov	r3, r2
 8004364:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800436a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800436e:	2b00      	cmp	r3, #0
 8004370:	da0f      	bge.n	8004392 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 020f 	and.w	r2, r3, #15
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	3338      	adds	r3, #56	; 0x38
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	3304      	adds	r3, #4
 8004388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	705a      	strb	r2, [r3, #1]
 8004390:	e00f      	b.n	80043b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	f003 020f 	and.w	r2, r3, #15
 8004398:	4613      	mov	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4413      	add	r3, r2
 80043a8:	3304      	adds	r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043be:	883a      	ldrh	r2, [r7, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	78ba      	ldrb	r2, [r7, #2]
 80043c8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043dc:	78bb      	ldrb	r3, [r7, #2]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d102      	bne.n	80043e8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_PCD_EP_Open+0xaa>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e00e      	b.n	8004414 <HAL_PCD_EP_Open+0xc8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	4618      	mov	r0, r3
 8004406:	f001 fb89 	bl	8005b1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004412:	7afb      	ldrb	r3, [r7, #11]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800442c:	2b00      	cmp	r3, #0
 800442e:	da0f      	bge.n	8004450 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	f003 020f 	and.w	r2, r3, #15
 8004436:	4613      	mov	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	3338      	adds	r3, #56	; 0x38
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	3304      	adds	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	705a      	strb	r2, [r3, #1]
 800444e:	e00f      	b.n	8004470 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	f003 020f 	and.w	r2, r3, #15
 8004456:	4613      	mov	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	3304      	adds	r3, #4
 8004468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	b2da      	uxtb	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_PCD_EP_Close+0x6e>
 8004486:	2302      	movs	r3, #2
 8004488:	e00e      	b.n	80044a8 <HAL_PCD_EP_Close+0x8c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68f9      	ldr	r1, [r7, #12]
 8004498:	4618      	mov	r0, r3
 800449a:	f001 fbc7 	bl	8005c2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	460b      	mov	r3, r1
 80044be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044c0:	7afb      	ldrb	r3, [r7, #11]
 80044c2:	f003 020f 	and.w	r2, r3, #15
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	3304      	adds	r3, #4
 80044d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2200      	movs	r2, #0
 80044ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2200      	movs	r2, #0
 80044f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f2:	7afb      	ldrb	r3, [r7, #11]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d102      	bne.n	800450c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800450c:	7afb      	ldrb	r3, [r7, #11]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	f001 fea2 	bl	800626c <USB_EP0StartXfer>
 8004528:	e008      	b.n	800453c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	6979      	ldr	r1, [r7, #20]
 8004538:	f001 fc54 	bl	8005de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	f003 020f 	and.w	r2, r3, #15
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004568:	681b      	ldr	r3, [r3, #0]
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b086      	sub	sp, #24
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	460b      	mov	r3, r1
 8004584:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004586:	7afb      	ldrb	r3, [r7, #11]
 8004588:	f003 020f 	and.w	r2, r3, #15
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	3338      	adds	r3, #56	; 0x38
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4413      	add	r3, r2
 800459a:	3304      	adds	r3, #4
 800459c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2200      	movs	r2, #0
 80045ae:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2201      	movs	r2, #1
 80045b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b6:	7afb      	ldrb	r3, [r7, #11]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d102      	bne.n	80045d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045d0:	7afb      	ldrb	r3, [r7, #11]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	6979      	ldr	r1, [r7, #20]
 80045e8:	f001 fe40 	bl	800626c <USB_EP0StartXfer>
 80045ec:	e008      	b.n	8004600 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	6979      	ldr	r1, [r7, #20]
 80045fc:	f001 fbf2 	bl	8005de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	f003 020f 	and.w	r2, r3, #15
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d901      	bls.n	8004628 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e050      	b.n	80046ca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800462c:	2b00      	cmp	r3, #0
 800462e:	da0f      	bge.n	8004650 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	f003 020f 	and.w	r2, r3, #15
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	3338      	adds	r3, #56	; 0x38
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	4413      	add	r3, r2
 8004644:	3304      	adds	r3, #4
 8004646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	705a      	strb	r2, [r3, #1]
 800464e:	e00d      	b.n	800466c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	3304      	adds	r3, #4
 8004664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_PCD_EP_SetStall+0x82>
 8004688:	2302      	movs	r3, #2
 800468a:	e01e      	b.n	80046ca <HAL_PCD_EP_SetStall+0xc0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68f9      	ldr	r1, [r7, #12]
 800469a:	4618      	mov	r0, r3
 800469c:	f001 ffcf 	bl	800663e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	b2d9      	uxtb	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046ba:	461a      	mov	r2, r3
 80046bc:	f002 f9c0 	bl	8006a40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	f003 020f 	and.w	r2, r3, #15
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d901      	bls.n	80046f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e042      	b.n	8004776 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	da0f      	bge.n	8004718 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	f003 020f 	and.w	r2, r3, #15
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	3338      	adds	r3, #56	; 0x38
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4413      	add	r3, r2
 800470c:	3304      	adds	r3, #4
 800470e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	705a      	strb	r2, [r3, #1]
 8004716:	e00f      	b.n	8004738 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	f003 020f 	and.w	r2, r3, #15
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	3304      	adds	r3, #4
 8004730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_PCD_EP_ClrStall+0x86>
 8004754:	2302      	movs	r3, #2
 8004756:	e00e      	b.n	8004776 <HAL_PCD_EP_ClrStall+0xa4>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68f9      	ldr	r1, [r7, #12]
 8004766:	4618      	mov	r0, r3
 8004768:	f001 ffd7 	bl	800671a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b08a      	sub	sp, #40	; 0x28
 8004782:	af02      	add	r7, sp, #8
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	3338      	adds	r3, #56	; 0x38
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	3304      	adds	r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d901      	bls.n	80047b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e06c      	b.n	8004890 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d902      	bls.n	80047d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	3303      	adds	r3, #3
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047da:	e02b      	b.n	8004834 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d902      	bls.n	80047f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3303      	adds	r3, #3
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68d9      	ldr	r1, [r3, #12]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004810:	b2db      	uxtb	r3, r3
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	4603      	mov	r3, r0
 8004816:	6978      	ldr	r0, [r7, #20]
 8004818:	f001 fe7b 	bl	8006512 <USB_WritePacket>

    ep->xfer_buff  += len;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	441a      	add	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	441a      	add	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	b29b      	uxth	r3, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	429a      	cmp	r2, r3
 8004848:	d809      	bhi.n	800485e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004852:	429a      	cmp	r2, r3
 8004854:	d203      	bcs.n	800485e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1be      	bne.n	80047dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	429a      	cmp	r2, r3
 8004868:	d811      	bhi.n	800488e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	2201      	movs	r2, #1
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	43db      	mvns	r3, r3
 8004884:	6939      	ldr	r1, [r7, #16]
 8004886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800488a:	4013      	ands	r3, r2
 800488c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3720      	adds	r7, #32
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	333c      	adds	r3, #60	; 0x3c
 80048b0:	3304      	adds	r3, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	f040 80a0 	bne.w	8004a10 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d015      	beq.n	8004906 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a72      	ldr	r2, [pc, #456]	; (8004aa8 <PCD_EP_OutXfrComplete_int+0x210>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	f240 80dd 	bls.w	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80d7 	beq.w	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fc:	461a      	mov	r2, r3
 80048fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004902:	6093      	str	r3, [r2, #8]
 8004904:	e0cb      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	461a      	mov	r2, r3
 800491e:	2320      	movs	r3, #32
 8004920:	6093      	str	r3, [r2, #8]
 8004922:	e0bc      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 80b7 	bne.w	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a5d      	ldr	r2, [pc, #372]	; (8004aa8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d90f      	bls.n	8004958 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494e:	461a      	mov	r2, r3
 8004950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004954:	6093      	str	r3, [r2, #8]
 8004956:	e0a2      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800496a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	0159      	lsls	r1, r3, #5
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	440b      	add	r3, r1
 8004974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800497e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	1a9b      	subs	r3, r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4403      	add	r3, r0
 800498e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004992:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049a6:	6819      	ldr	r1, [r3, #0]
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4403      	add	r3, r0
 80049b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4419      	add	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4403      	add	r3, r0
 80049cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049d0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d114      	bne.n	8004a02 <PCD_EP_OutXfrComplete_int+0x16a>
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d108      	bne.n	8004a02 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049fa:	461a      	mov	r2, r3
 80049fc:	2101      	movs	r1, #1
 80049fe:	f002 f81f 	bl	8006a40 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f003 ff65 	bl	80088d8 <HAL_PCD_DataOutStageCallback>
 8004a0e:	e046      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a26      	ldr	r2, [pc, #152]	; (8004aac <PCD_EP_OutXfrComplete_int+0x214>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d124      	bne.n	8004a62 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a34:	6093      	str	r3, [r2, #8]
 8004a36:	e032      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d008      	beq.n	8004a54 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4e:	461a      	mov	r2, r3
 8004a50:	2320      	movs	r3, #32
 8004a52:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f003 ff3c 	bl	80088d8 <HAL_PCD_DataOutStageCallback>
 8004a60:	e01d      	b.n	8004a9e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d114      	bne.n	8004a92 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d108      	bne.n	8004a92 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	f001 ffd7 	bl	8006a40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f003 ff1d 	bl	80088d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	4f54300a 	.word	0x4f54300a
 8004aac:	4f54310a 	.word	0x4f54310a

08004ab0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	333c      	adds	r3, #60	; 0x3c
 8004ac8:	3304      	adds	r3, #4
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d90e      	bls.n	8004b04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	461a      	mov	r2, r3
 8004afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f003 fed5 	bl	80088b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d90c      	bls.n	8004b2c <PCD_EP_OutSetupPacket_int+0x7c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d108      	bne.n	8004b2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b24:	461a      	mov	r2, r3
 8004b26:	2101      	movs	r1, #1
 8004b28:	f001 ff8a 	bl	8006a40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	4f54300a 	.word	0x4f54300a

08004b3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d107      	bne.n	8004b6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b5a:	883b      	ldrh	r3, [r7, #0]
 8004b5c:	0419      	lsls	r1, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28
 8004b68:	e028      	b.n	8004bbc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	4413      	add	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	73fb      	strb	r3, [r7, #15]
 8004b7c:	e00d      	b.n	8004b9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	3340      	adds	r3, #64	; 0x40
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4413      	add	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	3301      	adds	r3, #1
 8004b98:	73fb      	strb	r3, [r7, #15]
 8004b9a:	7bfa      	ldrb	r2, [r7, #15]
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d3ec      	bcc.n	8004b7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ba4:	883b      	ldrh	r3, [r7, #0]
 8004ba6:	0418      	lsls	r0, r3, #16
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6819      	ldr	r1, [r3, #0]
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	4302      	orrs	r2, r0
 8004bb4:	3340      	adds	r3, #64	; 0x40
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	887a      	ldrh	r2, [r7, #2]
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e264      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d075      	beq.n	8004d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c22:	4ba3      	ldr	r3, [pc, #652]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d00c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2e:	4ba0      	ldr	r3, [pc, #640]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d112      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3a:	4b9d      	ldr	r3, [pc, #628]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c46:	d10b      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	4b99      	ldr	r3, [pc, #612]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d05b      	beq.n	8004d0c <HAL_RCC_OscConfig+0x108>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d157      	bne.n	8004d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e23f      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d106      	bne.n	8004c78 <HAL_RCC_OscConfig+0x74>
 8004c6a:	4b91      	ldr	r3, [pc, #580]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a90      	ldr	r2, [pc, #576]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e01d      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x98>
 8004c82:	4b8b      	ldr	r3, [pc, #556]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a8a      	ldr	r2, [pc, #552]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	4b88      	ldr	r3, [pc, #544]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a87      	ldr	r2, [pc, #540]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c9c:	4b84      	ldr	r3, [pc, #528]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a83      	ldr	r2, [pc, #524]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4b81      	ldr	r3, [pc, #516]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a80      	ldr	r2, [pc, #512]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d013      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fd fa18 	bl	80020f0 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fd fa14 	bl	80020f0 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	; 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e204      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	4b76      	ldr	r3, [pc, #472]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xc0>
 8004ce2:	e014      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fd fa04 	bl	80020f0 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fd fa00 	bl	80020f0 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	; 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e1f0      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfe:	4b6c      	ldr	r3, [pc, #432]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0xe8>
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d063      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d1a:	4b65      	ldr	r3, [pc, #404]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d26:	4b62      	ldr	r3, [pc, #392]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d11c      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d32:	4b5f      	ldr	r3, [pc, #380]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3e:	4b5c      	ldr	r3, [pc, #368]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d001      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e1c4      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	4b56      	ldr	r3, [pc, #344]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4952      	ldr	r1, [pc, #328]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6a:	e03a      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d74:	4b4f      	ldr	r3, [pc, #316]	; (8004eb4 <HAL_RCC_OscConfig+0x2b0>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fd f9b9 	bl	80020f0 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d82:	f7fd f9b5 	bl	80020f0 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e1a5      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d94:	4b46      	ldr	r3, [pc, #280]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da0:	4b43      	ldr	r3, [pc, #268]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4940      	ldr	r1, [pc, #256]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]
 8004db4:	e015      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db6:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <HAL_RCC_OscConfig+0x2b0>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fd f998 	bl	80020f0 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc4:	f7fd f994 	bl	80020f0 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e184      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	4b36      	ldr	r3, [pc, #216]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d030      	beq.n	8004e50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df6:	4b30      	ldr	r3, [pc, #192]	; (8004eb8 <HAL_RCC_OscConfig+0x2b4>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fd f978 	bl	80020f0 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e04:	f7fd f974 	bl	80020f0 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e164      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e16:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x200>
 8004e22:	e015      	b.n	8004e50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e24:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <HAL_RCC_OscConfig+0x2b4>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2a:	f7fd f961 	bl	80020f0 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e32:	f7fd f95d 	bl	80020f0 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e14d      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e44:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f0      	bne.n	8004e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80a0 	beq.w	8004f9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e62:	4b13      	ldr	r3, [pc, #76]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	4a0e      	ldr	r2, [pc, #56]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <HAL_RCC_OscConfig+0x2ac>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_RCC_OscConfig+0x2b8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d121      	bne.n	8004ede <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e9a:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <HAL_RCC_OscConfig+0x2b8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a07      	ldr	r2, [pc, #28]	; (8004ebc <HAL_RCC_OscConfig+0x2b8>)
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea6:	f7fd f923 	bl	80020f0 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eac:	e011      	b.n	8004ed2 <HAL_RCC_OscConfig+0x2ce>
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	42470000 	.word	0x42470000
 8004eb8:	42470e80 	.word	0x42470e80
 8004ebc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec0:	f7fd f916 	bl	80020f0 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e106      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed2:	4b85      	ldr	r3, [pc, #532]	; (80050e8 <HAL_RCC_OscConfig+0x4e4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d106      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x2f0>
 8004ee6:	4b81      	ldr	r3, [pc, #516]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	4a80      	ldr	r2, [pc, #512]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef2:	e01c      	b.n	8004f2e <HAL_RCC_OscConfig+0x32a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b05      	cmp	r3, #5
 8004efa:	d10c      	bne.n	8004f16 <HAL_RCC_OscConfig+0x312>
 8004efc:	4b7b      	ldr	r3, [pc, #492]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4a7a      	ldr	r2, [pc, #488]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f02:	f043 0304 	orr.w	r3, r3, #4
 8004f06:	6713      	str	r3, [r2, #112]	; 0x70
 8004f08:	4b78      	ldr	r3, [pc, #480]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0c:	4a77      	ldr	r2, [pc, #476]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	6713      	str	r3, [r2, #112]	; 0x70
 8004f14:	e00b      	b.n	8004f2e <HAL_RCC_OscConfig+0x32a>
 8004f16:	4b75      	ldr	r3, [pc, #468]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	4a74      	ldr	r2, [pc, #464]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	6713      	str	r3, [r2, #112]	; 0x70
 8004f22:	4b72      	ldr	r3, [pc, #456]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	4a71      	ldr	r2, [pc, #452]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f28:	f023 0304 	bic.w	r3, r3, #4
 8004f2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d015      	beq.n	8004f62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f36:	f7fd f8db 	bl	80020f0 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3c:	e00a      	b.n	8004f54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f3e:	f7fd f8d7 	bl	80020f0 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e0c5      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f54:	4b65      	ldr	r3, [pc, #404]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ee      	beq.n	8004f3e <HAL_RCC_OscConfig+0x33a>
 8004f60:	e014      	b.n	8004f8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f62:	f7fd f8c5 	bl	80020f0 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f68:	e00a      	b.n	8004f80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f6a:	f7fd f8c1 	bl	80020f0 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e0af      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f80:	4b5a      	ldr	r3, [pc, #360]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1ee      	bne.n	8004f6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f8c:	7dfb      	ldrb	r3, [r7, #23]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d105      	bne.n	8004f9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f92:	4b56      	ldr	r3, [pc, #344]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	4a55      	ldr	r2, [pc, #340]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 809b 	beq.w	80050de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa8:	4b50      	ldr	r3, [pc, #320]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 030c 	and.w	r3, r3, #12
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d05c      	beq.n	800506e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d141      	bne.n	8005040 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbc:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <HAL_RCC_OscConfig+0x4ec>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc2:	f7fd f895 	bl	80020f0 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fca:	f7fd f891 	bl	80020f0 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e081      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fdc:	4b43      	ldr	r3, [pc, #268]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f0      	bne.n	8004fca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	019b      	lsls	r3, r3, #6
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	085b      	lsrs	r3, r3, #1
 8005000:	3b01      	subs	r3, #1
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	061b      	lsls	r3, r3, #24
 800500c:	4937      	ldr	r1, [pc, #220]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 800500e:	4313      	orrs	r3, r2
 8005010:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005012:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <HAL_RCC_OscConfig+0x4ec>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005018:	f7fd f86a 	bl	80020f0 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005020:	f7fd f866 	bl	80020f0 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e056      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005032:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x41c>
 800503e:	e04e      	b.n	80050de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005040:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <HAL_RCC_OscConfig+0x4ec>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005046:	f7fd f853 	bl	80020f0 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504e:	f7fd f84f 	bl	80020f0 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e03f      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005060:	4b22      	ldr	r3, [pc, #136]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f0      	bne.n	800504e <HAL_RCC_OscConfig+0x44a>
 800506c:	e037      	b.n	80050de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e032      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800507a:	4b1c      	ldr	r3, [pc, #112]	; (80050ec <HAL_RCC_OscConfig+0x4e8>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d028      	beq.n	80050da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d121      	bne.n	80050da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d11a      	bne.n	80050da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050aa:	4013      	ands	r3, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d111      	bne.n	80050da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	3b01      	subs	r3, #1
 80050c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d107      	bne.n	80050da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40007000 	.word	0x40007000
 80050ec:	40023800 	.word	0x40023800
 80050f0:	42470060 	.word	0x42470060

080050f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0cc      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005108:	4b68      	ldr	r3, [pc, #416]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d90c      	bls.n	8005130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b65      	ldr	r3, [pc, #404]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b63      	ldr	r3, [pc, #396]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0b8      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005148:	4b59      	ldr	r3, [pc, #356]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005160:	4b53      	ldr	r3, [pc, #332]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a52      	ldr	r2, [pc, #328]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800516a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516c:	4b50      	ldr	r3, [pc, #320]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	494d      	ldr	r1, [pc, #308]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	4313      	orrs	r3, r2
 800517c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d044      	beq.n	8005214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005192:	4b47      	ldr	r3, [pc, #284]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d119      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e07f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b2:	4b3f      	ldr	r3, [pc, #252]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e06f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c2:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e067      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f023 0203 	bic.w	r2, r3, #3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4934      	ldr	r1, [pc, #208]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e4:	f7fc ff84 	bl	80020f0 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ec:	f7fc ff80 	bl	80020f0 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e04f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 020c 	and.w	r2, r3, #12
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	429a      	cmp	r2, r3
 8005212:	d1eb      	bne.n	80051ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d20c      	bcs.n	800523c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b22      	ldr	r3, [pc, #136]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b20      	ldr	r3, [pc, #128]	; (80052ac <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e032      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4916      	ldr	r1, [pc, #88]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005266:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	490e      	ldr	r1, [pc, #56]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800527a:	f000 f821 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 800527e:	4602      	mov	r2, r0
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	490a      	ldr	r1, [pc, #40]	; (80052b4 <HAL_RCC_ClockConfig+0x1c0>)
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005296:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fc fee4 	bl	8002068 <HAL_InitTick>

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40023c00 	.word	0x40023c00
 80052b0:	40023800 	.word	0x40023800
 80052b4:	08009d6c 	.word	0x08009d6c
 80052b8:	20000008 	.word	0x20000008
 80052bc:	2000000c 	.word	0x2000000c

080052c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	b5b0      	push	{r4, r5, r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052c6:	2100      	movs	r1, #0
 80052c8:	6079      	str	r1, [r7, #4]
 80052ca:	2100      	movs	r1, #0
 80052cc:	60f9      	str	r1, [r7, #12]
 80052ce:	2100      	movs	r1, #0
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052d2:	2100      	movs	r1, #0
 80052d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052d6:	4952      	ldr	r1, [pc, #328]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 80052d8:	6889      	ldr	r1, [r1, #8]
 80052da:	f001 010c 	and.w	r1, r1, #12
 80052de:	2908      	cmp	r1, #8
 80052e0:	d00d      	beq.n	80052fe <HAL_RCC_GetSysClockFreq+0x3e>
 80052e2:	2908      	cmp	r1, #8
 80052e4:	f200 8094 	bhi.w	8005410 <HAL_RCC_GetSysClockFreq+0x150>
 80052e8:	2900      	cmp	r1, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_RCC_GetSysClockFreq+0x32>
 80052ec:	2904      	cmp	r1, #4
 80052ee:	d003      	beq.n	80052f8 <HAL_RCC_GetSysClockFreq+0x38>
 80052f0:	e08e      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052f2:	4b4c      	ldr	r3, [pc, #304]	; (8005424 <HAL_RCC_GetSysClockFreq+0x164>)
 80052f4:	60bb      	str	r3, [r7, #8]
       break;
 80052f6:	e08e      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052f8:	4b4b      	ldr	r3, [pc, #300]	; (8005428 <HAL_RCC_GetSysClockFreq+0x168>)
 80052fa:	60bb      	str	r3, [r7, #8]
      break;
 80052fc:	e08b      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052fe:	4948      	ldr	r1, [pc, #288]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 8005300:	6849      	ldr	r1, [r1, #4]
 8005302:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005306:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005308:	4945      	ldr	r1, [pc, #276]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 800530a:	6849      	ldr	r1, [r1, #4]
 800530c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005310:	2900      	cmp	r1, #0
 8005312:	d024      	beq.n	800535e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005314:	4942      	ldr	r1, [pc, #264]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 8005316:	6849      	ldr	r1, [r1, #4]
 8005318:	0989      	lsrs	r1, r1, #6
 800531a:	4608      	mov	r0, r1
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005324:	f04f 0500 	mov.w	r5, #0
 8005328:	ea00 0204 	and.w	r2, r0, r4
 800532c:	ea01 0305 	and.w	r3, r1, r5
 8005330:	493d      	ldr	r1, [pc, #244]	; (8005428 <HAL_RCC_GetSysClockFreq+0x168>)
 8005332:	fb01 f003 	mul.w	r0, r1, r3
 8005336:	2100      	movs	r1, #0
 8005338:	fb01 f102 	mul.w	r1, r1, r2
 800533c:	1844      	adds	r4, r0, r1
 800533e:	493a      	ldr	r1, [pc, #232]	; (8005428 <HAL_RCC_GetSysClockFreq+0x168>)
 8005340:	fba2 0101 	umull	r0, r1, r2, r1
 8005344:	1863      	adds	r3, r4, r1
 8005346:	4619      	mov	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	461a      	mov	r2, r3
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	f7fb fb20 	bl	8000994 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4613      	mov	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e04a      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535e:	4b30      	ldr	r3, [pc, #192]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	099b      	lsrs	r3, r3, #6
 8005364:	461a      	mov	r2, r3
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800536e:	f04f 0100 	mov.w	r1, #0
 8005372:	ea02 0400 	and.w	r4, r2, r0
 8005376:	ea03 0501 	and.w	r5, r3, r1
 800537a:	4620      	mov	r0, r4
 800537c:	4629      	mov	r1, r5
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	014b      	lsls	r3, r1, #5
 8005388:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800538c:	0142      	lsls	r2, r0, #5
 800538e:	4610      	mov	r0, r2
 8005390:	4619      	mov	r1, r3
 8005392:	1b00      	subs	r0, r0, r4
 8005394:	eb61 0105 	sbc.w	r1, r1, r5
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	018b      	lsls	r3, r1, #6
 80053a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053a6:	0182      	lsls	r2, r0, #6
 80053a8:	1a12      	subs	r2, r2, r0
 80053aa:	eb63 0301 	sbc.w	r3, r3, r1
 80053ae:	f04f 0000 	mov.w	r0, #0
 80053b2:	f04f 0100 	mov.w	r1, #0
 80053b6:	00d9      	lsls	r1, r3, #3
 80053b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053bc:	00d0      	lsls	r0, r2, #3
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	1912      	adds	r2, r2, r4
 80053c4:	eb45 0303 	adc.w	r3, r5, r3
 80053c8:	f04f 0000 	mov.w	r0, #0
 80053cc:	f04f 0100 	mov.w	r1, #0
 80053d0:	0299      	lsls	r1, r3, #10
 80053d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053d6:	0290      	lsls	r0, r2, #10
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	f7fb fad4 	bl	8000994 <__aeabi_uldivmod>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4613      	mov	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053f4:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <HAL_RCC_GetSysClockFreq+0x160>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	3301      	adds	r3, #1
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	60bb      	str	r3, [r7, #8]
      break;
 800540e:	e002      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005410:	4b04      	ldr	r3, [pc, #16]	; (8005424 <HAL_RCC_GetSysClockFreq+0x164>)
 8005412:	60bb      	str	r3, [r7, #8]
      break;
 8005414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005416:	68bb      	ldr	r3, [r7, #8]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bdb0      	pop	{r4, r5, r7, pc}
 8005420:	40023800 	.word	0x40023800
 8005424:	00f42400 	.word	0x00f42400
 8005428:	017d7840 	.word	0x017d7840

0800542c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005430:	4b03      	ldr	r3, [pc, #12]	; (8005440 <HAL_RCC_GetHCLKFreq+0x14>)
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000008 	.word	0x20000008

08005444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005448:	f7ff fff0 	bl	800542c <HAL_RCC_GetHCLKFreq>
 800544c:	4602      	mov	r2, r0
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	0a9b      	lsrs	r3, r3, #10
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	4903      	ldr	r1, [pc, #12]	; (8005468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800545a:	5ccb      	ldrb	r3, [r1, r3]
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40023800 	.word	0x40023800
 8005468:	08009d7c 	.word	0x08009d7c

0800546c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800546c:	b084      	sub	sp, #16
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	f107 001c 	add.w	r0, r7, #28
 800547a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	2b01      	cmp	r3, #1
 8005482:	d122      	bne.n	80054ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d105      	bne.n	80054be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f001 fb1c 	bl	8006afc <USB_CoreReset>
 80054c4:	4603      	mov	r3, r0
 80054c6:	73fb      	strb	r3, [r7, #15]
 80054c8:	e01a      	b.n	8005500 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 fb10 	bl	8006afc <USB_CoreReset>
 80054dc:	4603      	mov	r3, r0
 80054de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	639a      	str	r2, [r3, #56]	; 0x38
 80054f2:	e005      	b.n	8005500 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	2b01      	cmp	r3, #1
 8005504:	d10b      	bne.n	800551e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f043 0206 	orr.w	r2, r3, #6
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800551e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800552a:	b004      	add	sp, #16
 800552c:	4770      	bx	lr
	...

08005530 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d165      	bne.n	8005610 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4a41      	ldr	r2, [pc, #260]	; (800564c <USB_SetTurnaroundTime+0x11c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d906      	bls.n	800555a <USB_SetTurnaroundTime+0x2a>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4a40      	ldr	r2, [pc, #256]	; (8005650 <USB_SetTurnaroundTime+0x120>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d202      	bcs.n	800555a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005554:	230f      	movs	r3, #15
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e062      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4a3c      	ldr	r2, [pc, #240]	; (8005650 <USB_SetTurnaroundTime+0x120>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d306      	bcc.n	8005570 <USB_SetTurnaroundTime+0x40>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4a3b      	ldr	r2, [pc, #236]	; (8005654 <USB_SetTurnaroundTime+0x124>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d202      	bcs.n	8005570 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800556a:	230e      	movs	r3, #14
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	e057      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4a38      	ldr	r2, [pc, #224]	; (8005654 <USB_SetTurnaroundTime+0x124>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d306      	bcc.n	8005586 <USB_SetTurnaroundTime+0x56>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4a37      	ldr	r2, [pc, #220]	; (8005658 <USB_SetTurnaroundTime+0x128>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d202      	bcs.n	8005586 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005580:	230d      	movs	r3, #13
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e04c      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4a33      	ldr	r2, [pc, #204]	; (8005658 <USB_SetTurnaroundTime+0x128>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d306      	bcc.n	800559c <USB_SetTurnaroundTime+0x6c>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4a32      	ldr	r2, [pc, #200]	; (800565c <USB_SetTurnaroundTime+0x12c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d802      	bhi.n	800559c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005596:	230c      	movs	r3, #12
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	e041      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4a2f      	ldr	r2, [pc, #188]	; (800565c <USB_SetTurnaroundTime+0x12c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d906      	bls.n	80055b2 <USB_SetTurnaroundTime+0x82>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a2e      	ldr	r2, [pc, #184]	; (8005660 <USB_SetTurnaroundTime+0x130>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d802      	bhi.n	80055b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055ac:	230b      	movs	r3, #11
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	e036      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4a2a      	ldr	r2, [pc, #168]	; (8005660 <USB_SetTurnaroundTime+0x130>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d906      	bls.n	80055c8 <USB_SetTurnaroundTime+0x98>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4a29      	ldr	r2, [pc, #164]	; (8005664 <USB_SetTurnaroundTime+0x134>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d802      	bhi.n	80055c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055c2:	230a      	movs	r3, #10
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e02b      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4a26      	ldr	r2, [pc, #152]	; (8005664 <USB_SetTurnaroundTime+0x134>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d906      	bls.n	80055de <USB_SetTurnaroundTime+0xae>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a25      	ldr	r2, [pc, #148]	; (8005668 <USB_SetTurnaroundTime+0x138>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d202      	bcs.n	80055de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055d8:	2309      	movs	r3, #9
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e020      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4a21      	ldr	r2, [pc, #132]	; (8005668 <USB_SetTurnaroundTime+0x138>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d306      	bcc.n	80055f4 <USB_SetTurnaroundTime+0xc4>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4a20      	ldr	r2, [pc, #128]	; (800566c <USB_SetTurnaroundTime+0x13c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d802      	bhi.n	80055f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055ee:	2308      	movs	r3, #8
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e015      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4a1d      	ldr	r2, [pc, #116]	; (800566c <USB_SetTurnaroundTime+0x13c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d906      	bls.n	800560a <USB_SetTurnaroundTime+0xda>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4a1c      	ldr	r2, [pc, #112]	; (8005670 <USB_SetTurnaroundTime+0x140>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d202      	bcs.n	800560a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005604:	2307      	movs	r3, #7
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e00a      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800560a:	2306      	movs	r3, #6
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e007      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d102      	bne.n	800561c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005616:	2309      	movs	r3, #9
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	e001      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800561c:	2309      	movs	r3, #9
 800561e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	029b      	lsls	r3, r3, #10
 8005634:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005638:	431a      	orrs	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	00d8acbf 	.word	0x00d8acbf
 8005650:	00e4e1c0 	.word	0x00e4e1c0
 8005654:	00f42400 	.word	0x00f42400
 8005658:	01067380 	.word	0x01067380
 800565c:	011a499f 	.word	0x011a499f
 8005660:	01312cff 	.word	0x01312cff
 8005664:	014ca43f 	.word	0x014ca43f
 8005668:	016e3600 	.word	0x016e3600
 800566c:	01a6ab1f 	.word	0x01a6ab1f
 8005670:	01e84800 	.word	0x01e84800

08005674 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f043 0201 	orr.w	r2, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f023 0201 	bic.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d115      	bne.n	8005706 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056e6:	2001      	movs	r0, #1
 80056e8:	f7fc fd0e 	bl	8002108 <HAL_Delay>
      ms++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 f972 	bl	80069dc <USB_GetMode>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d01e      	beq.n	800573c <USB_SetCurrentMode+0x84>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b31      	cmp	r3, #49	; 0x31
 8005702:	d9f0      	bls.n	80056e6 <USB_SetCurrentMode+0x2e>
 8005704:	e01a      	b.n	800573c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d115      	bne.n	8005738 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005718:	2001      	movs	r0, #1
 800571a:	f7fc fcf5 	bl	8002108 <HAL_Delay>
      ms++;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3301      	adds	r3, #1
 8005722:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 f959 	bl	80069dc <USB_GetMode>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <USB_SetCurrentMode+0x84>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b31      	cmp	r3, #49	; 0x31
 8005734:	d9f0      	bls.n	8005718 <USB_SetCurrentMode+0x60>
 8005736:	e001      	b.n	800573c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e005      	b.n	8005748 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b32      	cmp	r3, #50	; 0x32
 8005740:	d101      	bne.n	8005746 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005750:	b084      	sub	sp, #16
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800575e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	e009      	b.n	8005784 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	3340      	adds	r3, #64	; 0x40
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	2200      	movs	r2, #0
 800577c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	3301      	adds	r3, #1
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b0e      	cmp	r3, #14
 8005788:	d9f2      	bls.n	8005770 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800578a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d11c      	bne.n	80057ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800579e:	f043 0302 	orr.w	r3, r3, #2
 80057a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	639a      	str	r2, [r3, #56]	; 0x38
 80057c8:	e00b      	b.n	80057e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057e8:	461a      	mov	r2, r3
 80057ea:	2300      	movs	r3, #0
 80057ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f4:	4619      	mov	r1, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fc:	461a      	mov	r2, r3
 80057fe:	680b      	ldr	r3, [r1, #0]
 8005800:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	2b01      	cmp	r3, #1
 8005806:	d10c      	bne.n	8005822 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d104      	bne.n	8005818 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800580e:	2100      	movs	r1, #0
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f945 	bl	8005aa0 <USB_SetDevSpeed>
 8005816:	e008      	b.n	800582a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005818:	2101      	movs	r1, #1
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f940 	bl	8005aa0 <USB_SetDevSpeed>
 8005820:	e003      	b.n	800582a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005822:	2103      	movs	r1, #3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f93b 	bl	8005aa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800582a:	2110      	movs	r1, #16
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f8f3 	bl	8005a18 <USB_FlushTxFifo>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f90f 	bl	8005a60 <USB_FlushRxFifo>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	461a      	mov	r2, r3
 8005854:	2300      	movs	r3, #0
 8005856:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585e:	461a      	mov	r2, r3
 8005860:	2300      	movs	r3, #0
 8005862:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	461a      	mov	r2, r3
 800586c:	2300      	movs	r3, #0
 800586e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005870:	2300      	movs	r3, #0
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	e043      	b.n	80058fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800588c:	d118      	bne.n	80058c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	461a      	mov	r2, r3
 80058a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	e013      	b.n	80058d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	461a      	mov	r2, r3
 80058b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	e008      	b.n	80058d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058cc:	461a      	mov	r2, r3
 80058ce:	2300      	movs	r3, #0
 80058d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	461a      	mov	r2, r3
 80058e0:	2300      	movs	r3, #0
 80058e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	461a      	mov	r2, r3
 80058f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	3301      	adds	r3, #1
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	429a      	cmp	r2, r3
 8005904:	d3b7      	bcc.n	8005876 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005906:	2300      	movs	r3, #0
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	e043      	b.n	8005994 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800591e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005922:	d118      	bne.n	8005956 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	461a      	mov	r2, r3
 8005938:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	e013      	b.n	8005968 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	461a      	mov	r2, r3
 800594e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	e008      	b.n	8005968 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	461a      	mov	r2, r3
 8005964:	2300      	movs	r3, #0
 8005966:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	461a      	mov	r2, r3
 8005976:	2300      	movs	r3, #0
 8005978:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	461a      	mov	r2, r3
 8005988:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800598c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	3301      	adds	r3, #1
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	429a      	cmp	r2, r3
 800599a:	d3b7      	bcc.n	800590c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d105      	bne.n	80059d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f043 0210 	orr.w	r2, r3, #16
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <USB_DevInit+0x2c4>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	f043 0208 	orr.w	r2, r3, #8
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d107      	bne.n	8005a04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059fc:	f043 0304 	orr.w	r3, r3, #4
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a10:	b004      	add	sp, #16
 8005a12:	4770      	bx	lr
 8005a14:	803c3800 	.word	0x803c3800

08005a18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	019b      	lsls	r3, r3, #6
 8005a2a:	f043 0220 	orr.w	r2, r3, #32
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3301      	adds	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <USB_FlushTxFifo+0x44>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e006      	b.n	8005a50 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d0f1      	beq.n	8005a32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	00030d40 	.word	0x00030d40

08005a60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2210      	movs	r2, #16
 8005a70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3301      	adds	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	4a08      	ldr	r2, [pc, #32]	; (8005a9c <USB_FlushRxFifo+0x3c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d901      	bls.n	8005a82 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e006      	b.n	8005a90 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b10      	cmp	r3, #16
 8005a8c:	d0f1      	beq.n	8005a72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	00030d40 	.word	0x00030d40

08005aa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	68f9      	ldr	r1, [r7, #12]
 8005abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b087      	sub	sp, #28
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 0306 	and.w	r3, r3, #6
 8005aea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d102      	bne.n	8005af8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005af2:	2300      	movs	r3, #0
 8005af4:	75fb      	strb	r3, [r7, #23]
 8005af6:	e00a      	b.n	8005b0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d002      	beq.n	8005b04 <USB_GetDevSpeed+0x32>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b06      	cmp	r3, #6
 8005b02:	d102      	bne.n	8005b0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b04:	2302      	movs	r3, #2
 8005b06:	75fb      	strb	r3, [r7, #23]
 8005b08:	e001      	b.n	8005b0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b0a:	230f      	movs	r3, #15
 8005b0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	371c      	adds	r7, #28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d13a      	bne.n	8005bae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	2101      	movs	r1, #1
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	68f9      	ldr	r1, [r7, #12]
 8005b52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d155      	bne.n	8005c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	78db      	ldrb	r3, [r3, #3]
 8005b8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	059b      	lsls	r3, r3, #22
 8005b92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b94:	4313      	orrs	r3, r2
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	e036      	b.n	8005c1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb4:	69da      	ldr	r2, [r3, #28]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc4:	041b      	lsls	r3, r3, #16
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d11a      	bne.n	8005c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	78db      	ldrb	r3, [r3, #3]
 8005c00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c02:	430b      	orrs	r3, r1
 8005c04:	4313      	orrs	r3, r2
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d161      	bne.n	8005d0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c5e:	d11f      	bne.n	8005ca0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	0151      	lsls	r1, r2, #5
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	440a      	add	r2, r1
 8005c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	0159      	lsls	r1, r3, #5
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	440b      	add	r3, r1
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	4619      	mov	r1, r3
 8005d04:	4b35      	ldr	r3, [pc, #212]	; (8005ddc <USB_DeactivateEndpoint+0x1b0>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	600b      	str	r3, [r1, #0]
 8005d0a:	e060      	b.n	8005dce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d22:	d11f      	bne.n	8005d64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	0151      	lsls	r1, r2, #5
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	440a      	add	r2, r1
 8005d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	2101      	movs	r1, #1
 8005d76:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d84:	4013      	ands	r3, r2
 8005d86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	2101      	movs	r1, #1
 8005d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9e:	041b      	lsls	r3, r3, #16
 8005da0:	43db      	mvns	r3, r3
 8005da2:	68f9      	ldr	r1, [r7, #12]
 8005da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da8:	4013      	ands	r3, r2
 8005daa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	0159      	lsls	r1, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	440b      	add	r3, r1
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <USB_DeactivateEndpoint+0x1b4>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	ec337800 	.word	0xec337800
 8005de0:	eff37800 	.word	0xeff37800

08005de4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	; 0x28
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	4613      	mov	r3, r2
 8005df0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	f040 815c 	bne.w	80060be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d132      	bne.n	8005e74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	0151      	lsls	r1, r2, #5
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	440a      	add	r2, r1
 8005e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6c:	0cdb      	lsrs	r3, r3, #19
 8005e6e:	04db      	lsls	r3, r3, #19
 8005e70:	6113      	str	r3, [r2, #16]
 8005e72:	e074      	b.n	8005f5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8e:	0cdb      	lsrs	r3, r3, #19
 8005e90:	04db      	lsls	r3, r3, #19
 8005e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6959      	ldr	r1, [r3, #20]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	440b      	add	r3, r1
 8005ed0:	1e59      	subs	r1, r3, #1
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eda:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005edc:	4b9d      	ldr	r3, [pc, #628]	; (8006154 <USB_EPStartXfer+0x370>)
 8005ede:	400b      	ands	r3, r1
 8005ee0:	69b9      	ldr	r1, [r7, #24]
 8005ee2:	0148      	lsls	r0, r1, #5
 8005ee4:	69f9      	ldr	r1, [r7, #28]
 8005ee6:	4401      	add	r1, r0
 8005ee8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005eec:	4313      	orrs	r3, r2
 8005eee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f06:	69b9      	ldr	r1, [r7, #24]
 8005f08:	0148      	lsls	r0, r1, #5
 8005f0a:	69f9      	ldr	r1, [r7, #28]
 8005f0c:	4401      	add	r1, r0
 8005f0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f12:	4313      	orrs	r3, r2
 8005f14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	78db      	ldrb	r3, [r3, #3]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d11f      	bne.n	8005f5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005f3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d14b      	bne.n	8005ffc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d009      	beq.n	8005f80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f78:	461a      	mov	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	78db      	ldrb	r3, [r3, #3]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d128      	bne.n	8005fda <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d110      	bne.n	8005fba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	e00f      	b.n	8005fda <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	0151      	lsls	r1, r2, #5
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	440a      	add	r2, r1
 8005fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	e12f      	b.n	800625c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006016:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800601a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	78db      	ldrb	r3, [r3, #3]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d015      	beq.n	8006050 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8117 	beq.w	800625c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	2101      	movs	r1, #1
 8006040:	fa01 f303 	lsl.w	r3, r1, r3
 8006044:	69f9      	ldr	r1, [r7, #28]
 8006046:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800604a:	4313      	orrs	r3, r2
 800604c:	634b      	str	r3, [r1, #52]	; 0x34
 800604e:	e105      	b.n	800625c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d110      	bne.n	8006082 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800607a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	e00f      	b.n	80060a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	0151      	lsls	r1, r2, #5
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	440a      	add	r2, r1
 8006098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	68d9      	ldr	r1, [r3, #12]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	781a      	ldrb	r2, [r3, #0]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	b298      	uxth	r0, r3
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	4603      	mov	r3, r0
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fa2b 	bl	8006512 <USB_WritePacket>
 80060bc:	e0ce      	b.n	800625c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d8:	0cdb      	lsrs	r3, r3, #19
 80060da:	04db      	lsls	r3, r3, #19
 80060dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006100:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d126      	bne.n	8006158 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006120:	69b9      	ldr	r1, [r7, #24]
 8006122:	0148      	lsls	r0, r1, #5
 8006124:	69f9      	ldr	r1, [r7, #28]
 8006126:	4401      	add	r1, r0
 8006128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800612c:	4313      	orrs	r3, r2
 800612e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800614a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800614e:	6113      	str	r3, [r2, #16]
 8006150:	e036      	b.n	80061c0 <USB_EPStartXfer+0x3dc>
 8006152:	bf00      	nop
 8006154:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	695a      	ldr	r2, [r3, #20]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	4413      	add	r3, r2
 8006162:	1e5a      	subs	r2, r3, #1
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	fbb2 f3f3 	udiv	r3, r2, r3
 800616c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	8afb      	ldrh	r3, [r7, #22]
 800617e:	04d9      	lsls	r1, r3, #19
 8006180:	4b39      	ldr	r3, [pc, #228]	; (8006268 <USB_EPStartXfer+0x484>)
 8006182:	400b      	ands	r3, r1
 8006184:	69b9      	ldr	r1, [r7, #24]
 8006186:	0148      	lsls	r0, r1, #5
 8006188:	69f9      	ldr	r1, [r7, #28]
 800618a:	4401      	add	r1, r0
 800618c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006190:	4313      	orrs	r3, r2
 8006192:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a0:	691a      	ldr	r2, [r3, #16]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	8af9      	ldrh	r1, [r7, #22]
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b0:	69b9      	ldr	r1, [r7, #24]
 80061b2:	0148      	lsls	r0, r1, #5
 80061b4:	69f9      	ldr	r1, [r7, #28]
 80061b6:	4401      	add	r1, r0
 80061b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061bc:	4313      	orrs	r3, r2
 80061be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d10d      	bne.n	80061e2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	68d9      	ldr	r1, [r3, #12]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061de:	460a      	mov	r2, r1
 80061e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d128      	bne.n	800623c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d110      	bne.n	800621c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e00f      	b.n	800623c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800625a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3720      	adds	r7, #32
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	1ff80000 	.word	0x1ff80000

0800626c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b01      	cmp	r3, #1
 800628a:	f040 80cd 	bne.w	8006428 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d132      	bne.n	80062fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f4:	0cdb      	lsrs	r3, r3, #19
 80062f6:	04db      	lsls	r3, r3, #19
 80062f8:	6113      	str	r3, [r2, #16]
 80062fa:	e04e      	b.n	800639a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006316:	0cdb      	lsrs	r3, r3, #19
 8006318:	04db      	lsls	r3, r3, #19
 800631a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	440a      	add	r2, r1
 8006332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006336:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800633a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800633e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	695a      	ldr	r2, [r3, #20]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	429a      	cmp	r2, r3
 800634a:	d903      	bls.n	8006354 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800638a:	6939      	ldr	r1, [r7, #16]
 800638c:	0148      	lsls	r0, r1, #5
 800638e:	6979      	ldr	r1, [r7, #20]
 8006390:	4401      	add	r1, r0
 8006392:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006396:	4313      	orrs	r3, r2
 8006398:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d11e      	bne.n	80063de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d009      	beq.n	80063bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	461a      	mov	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	e092      	b.n	8006504 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d07e      	beq.n	8006504 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	2101      	movs	r1, #1
 8006418:	fa01 f303 	lsl.w	r3, r1, r3
 800641c:	6979      	ldr	r1, [r7, #20]
 800641e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006422:	4313      	orrs	r3, r2
 8006424:	634b      	str	r3, [r1, #52]	; 0x34
 8006426:	e06d      	b.n	8006504 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	440a      	add	r2, r1
 800643e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006442:	0cdb      	lsrs	r3, r3, #19
 8006444:	04db      	lsls	r3, r3, #19
 8006446:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	440a      	add	r2, r1
 800645e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006462:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006466:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800646a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006496:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800649a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b2:	6939      	ldr	r1, [r7, #16]
 80064b4:	0148      	lsls	r0, r1, #5
 80064b6:	6979      	ldr	r1, [r7, #20]
 80064b8:	4401      	add	r1, r0
 80064ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064be:	4313      	orrs	r3, r2
 80064c0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10d      	bne.n	80064e4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d009      	beq.n	80064e4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	68d9      	ldr	r1, [r3, #12]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e0:	460a      	mov	r2, r1
 80064e2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006502:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006512:	b480      	push	{r7}
 8006514:	b089      	sub	sp, #36	; 0x24
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	4611      	mov	r1, r2
 800651e:	461a      	mov	r2, r3
 8006520:	460b      	mov	r3, r1
 8006522:	71fb      	strb	r3, [r7, #7]
 8006524:	4613      	mov	r3, r2
 8006526:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006530:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006534:	2b00      	cmp	r3, #0
 8006536:	d123      	bne.n	8006580 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006538:	88bb      	ldrh	r3, [r7, #4]
 800653a:	3303      	adds	r3, #3
 800653c:	089b      	lsrs	r3, r3, #2
 800653e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006540:	2300      	movs	r3, #0
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	e018      	b.n	8006578 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	031a      	lsls	r2, r3, #12
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	4413      	add	r3, r2
 800654e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006552:	461a      	mov	r2, r3
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6013      	str	r3, [r2, #0]
      pSrc++;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	3301      	adds	r3, #1
 800655e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	3301      	adds	r3, #1
 8006564:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	3301      	adds	r3, #1
 800656a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	3301      	adds	r3, #1
 8006570:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	3301      	adds	r3, #1
 8006576:	61bb      	str	r3, [r7, #24]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	429a      	cmp	r2, r3
 800657e:	d3e2      	bcc.n	8006546 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3724      	adds	r7, #36	; 0x24
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800658e:	b480      	push	{r7}
 8006590:	b08b      	sub	sp, #44	; 0x2c
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	4613      	mov	r3, r2
 800659a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	089b      	lsrs	r3, r3, #2
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065ac:	88fb      	ldrh	r3, [r7, #6]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065b4:	2300      	movs	r3, #0
 80065b6:	623b      	str	r3, [r7, #32]
 80065b8:	e014      	b.n	80065e4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	601a      	str	r2, [r3, #0]
    pDest++;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	3301      	adds	r3, #1
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	3301      	adds	r3, #1
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	3301      	adds	r3, #1
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	3301      	adds	r3, #1
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	3301      	adds	r3, #1
 80065e2:	623b      	str	r3, [r7, #32]
 80065e4:	6a3a      	ldr	r2, [r7, #32]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d3e6      	bcc.n	80065ba <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065ec:	8bfb      	ldrh	r3, [r7, #30]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01e      	beq.n	8006630 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fc:	461a      	mov	r2, r3
 80065fe:	f107 0310 	add.w	r3, r7, #16
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	fa22 f303 	lsr.w	r3, r2, r3
 8006612:	b2da      	uxtb	r2, r3
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	701a      	strb	r2, [r3, #0]
      i++;
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	3301      	adds	r3, #1
 800661c:	623b      	str	r3, [r7, #32]
      pDest++;
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	3301      	adds	r3, #1
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006624:	8bfb      	ldrh	r3, [r7, #30]
 8006626:	3b01      	subs	r3, #1
 8006628:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800662a:	8bfb      	ldrh	r3, [r7, #30]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1ea      	bne.n	8006606 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006632:	4618      	mov	r0, r3
 8006634:	372c      	adds	r7, #44	; 0x2c
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d12c      	bne.n	80066b4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	db12      	blt.n	8006692 <USB_EPSetStall+0x54>
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00f      	beq.n	8006692 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	440a      	add	r2, r1
 8006688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006690:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	e02b      	b.n	800670c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	db12      	blt.n	80066ec <USB_EPSetStall+0xae>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00f      	beq.n	80066ec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066ea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	440a      	add	r2, r1
 8006702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006706:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800670a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800671a:	b480      	push	{r7}
 800671c:	b085      	sub	sp, #20
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d128      	bne.n	8006788 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	440a      	add	r2, r1
 800674c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006750:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006754:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	78db      	ldrb	r3, [r3, #3]
 800675a:	2b03      	cmp	r3, #3
 800675c:	d003      	beq.n	8006766 <USB_EPClearStall+0x4c>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	78db      	ldrb	r3, [r3, #3]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d138      	bne.n	80067d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	e027      	b.n	80067d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	78db      	ldrb	r3, [r3, #3]
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d003      	beq.n	80067b8 <USB_EPClearStall+0x9e>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	78db      	ldrb	r3, [r3, #3]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d10f      	bne.n	80067d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	0151      	lsls	r1, r2, #5
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	440a      	add	r2, r1
 80067ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b085      	sub	sp, #20
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006804:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006808:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006820:	4313      	orrs	r3, r2
 8006822:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800684c:	f023 0303 	bic.w	r3, r3, #3
 8006850:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006860:	f023 0302 	bic.w	r3, r3, #2
 8006864:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800688e:	f023 0303 	bic.w	r3, r3, #3
 8006892:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068a2:	f043 0302 	orr.w	r3, r3, #2
 80068a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b085      	sub	sp, #20
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4013      	ands	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068ce:	68fb      	ldr	r3, [r7, #12]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4013      	ands	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	0c1b      	lsrs	r3, r3, #16
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	4013      	ands	r3, r2
 8006932:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	b29b      	uxth	r3, r3
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	4013      	ands	r3, r2
 8006970:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006972:	68bb      	ldr	r3, [r7, #8]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	01db      	lsls	r3, r3, #7
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4013      	ands	r3, r2
 80069cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069ce:	68bb      	ldr	r3, [r7, #8]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	f003 0301 	and.w	r3, r3, #1
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a16:	f023 0307 	bic.w	r3, r3, #7
 8006a1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
	...

08006a40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	333c      	adds	r3, #60	; 0x3c
 8006a56:	3304      	adds	r3, #4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4a26      	ldr	r2, [pc, #152]	; (8006af8 <USB_EP0_OutStart+0xb8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d90a      	bls.n	8006a7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a74:	d101      	bne.n	8006a7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	e037      	b.n	8006aea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a80:	461a      	mov	r2, r3
 8006a82:	2300      	movs	r3, #0
 8006a84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa8:	f043 0318 	orr.w	r3, r3, #24
 8006aac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006abc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ac0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ac2:	7afb      	ldrb	r3, [r7, #11]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d10f      	bne.n	8006ae8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	461a      	mov	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ae6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	4f54300a 	.word	0x4f54300a

08006afc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	4a13      	ldr	r2, [pc, #76]	; (8006b5c <USB_CoreReset+0x60>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d901      	bls.n	8006b18 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e01a      	b.n	8006b4e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	daf3      	bge.n	8006b08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f043 0201 	orr.w	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <USB_CoreReset+0x60>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d901      	bls.n	8006b40 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e006      	b.n	8006b4e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d0f1      	beq.n	8006b30 <USB_CoreReset+0x34>

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	00030d40 	.word	0x00030d40

08006b60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b70:	f002 f91c 	bl	8008dac <USBD_static_malloc>
 8006b74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d105      	bne.n	8006b88 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006b84:	2302      	movs	r3, #2
 8006b86:	e066      	b.n	8006c56 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7c1b      	ldrb	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d119      	bne.n	8006bcc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	2181      	movs	r1, #129	; 0x81
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 ffe0 	bl	8008b66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 ffd6 	bl	8008b66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2210      	movs	r2, #16
 8006bc6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006bca:	e016      	b.n	8006bfa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bcc:	2340      	movs	r3, #64	; 0x40
 8006bce:	2202      	movs	r2, #2
 8006bd0:	2181      	movs	r1, #129	; 0x81
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 ffc7 	bl	8008b66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bde:	2340      	movs	r3, #64	; 0x40
 8006be0:	2202      	movs	r2, #2
 8006be2:	2101      	movs	r1, #1
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 ffbe 	bl	8008b66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2210      	movs	r2, #16
 8006bf6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	2203      	movs	r2, #3
 8006bfe:	2182      	movs	r1, #130	; 0x82
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 ffb0 	bl	8008b66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	7c1b      	ldrb	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f002 f881 	bl	8008d44 <USBD_LL_PrepareReceive>
 8006c42:	e007      	b.n	8006c54 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c4a:	2340      	movs	r3, #64	; 0x40
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f002 f878 	bl	8008d44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c6a:	2181      	movs	r1, #129	; 0x81
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 ffa0 	bl	8008bb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c78:	2101      	movs	r1, #1
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 ff99 	bl	8008bb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c88:	2182      	movs	r1, #130	; 0x82
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 ff91 	bl	8008bb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00e      	beq.n	8006cc8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f002 f884 	bl	8008dc8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ce4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e0af      	b.n	8006e5c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d03f      	beq.n	8006d88 <USBD_CDC_Setup+0xb4>
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	f040 809f 	bne.w	8006e4c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	88db      	ldrh	r3, [r3, #6]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d02e      	beq.n	8006d74 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	b25b      	sxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da16      	bge.n	8006d4e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006d2c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	88d2      	ldrh	r2, [r2, #6]
 8006d32:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	88db      	ldrh	r3, [r3, #6]
 8006d38:	2b07      	cmp	r3, #7
 8006d3a:	bf28      	it	cs
 8006d3c:	2307      	movcs	r3, #7
 8006d3e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	89fa      	ldrh	r2, [r7, #14]
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fae9 	bl	800831e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006d4c:	e085      	b.n	8006e5a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	785a      	ldrb	r2, [r3, #1]
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	88db      	ldrh	r3, [r3, #6]
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d64:	6939      	ldr	r1, [r7, #16]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	88db      	ldrh	r3, [r3, #6]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 fb02 	bl	8008376 <USBD_CtlPrepareRx>
      break;
 8006d72:	e072      	b.n	8006e5a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	7850      	ldrb	r0, [r2, #1]
 8006d80:	2200      	movs	r2, #0
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	4798      	blx	r3
      break;
 8006d86:	e068      	b.n	8006e5a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	2b0b      	cmp	r3, #11
 8006d8e:	d852      	bhi.n	8006e36 <USBD_CDC_Setup+0x162>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <USBD_CDC_Setup+0xc4>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006dc9 	.word	0x08006dc9
 8006d9c:	08006e45 	.word	0x08006e45
 8006da0:	08006e37 	.word	0x08006e37
 8006da4:	08006e37 	.word	0x08006e37
 8006da8:	08006e37 	.word	0x08006e37
 8006dac:	08006e37 	.word	0x08006e37
 8006db0:	08006e37 	.word	0x08006e37
 8006db4:	08006e37 	.word	0x08006e37
 8006db8:	08006e37 	.word	0x08006e37
 8006dbc:	08006e37 	.word	0x08006e37
 8006dc0:	08006df3 	.word	0x08006df3
 8006dc4:	08006e1d 	.word	0x08006e1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d107      	bne.n	8006de4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006dd4:	f107 030a 	add.w	r3, r7, #10
 8006dd8:	2202      	movs	r2, #2
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fa9e 	bl	800831e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006de2:	e032      	b.n	8006e4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fa28 	bl	800823c <USBD_CtlError>
            ret = USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	75fb      	strb	r3, [r7, #23]
          break;
 8006df0:	e02b      	b.n	8006e4a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d107      	bne.n	8006e0e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006dfe:	f107 030d 	add.w	r3, r7, #13
 8006e02:	2201      	movs	r2, #1
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fa89 	bl	800831e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e0c:	e01d      	b.n	8006e4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 fa13 	bl	800823c <USBD_CtlError>
            ret = USBD_FAIL;
 8006e16:	2303      	movs	r3, #3
 8006e18:	75fb      	strb	r3, [r7, #23]
          break;
 8006e1a:	e016      	b.n	8006e4a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d00f      	beq.n	8006e48 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fa06 	bl	800823c <USBD_CtlError>
            ret = USBD_FAIL;
 8006e30:	2303      	movs	r3, #3
 8006e32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e34:	e008      	b.n	8006e48 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f9ff 	bl	800823c <USBD_CtlError>
          ret = USBD_FAIL;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	75fb      	strb	r3, [r7, #23]
          break;
 8006e42:	e002      	b.n	8006e4a <USBD_CDC_Setup+0x176>
          break;
 8006e44:	bf00      	nop
 8006e46:	e008      	b.n	8006e5a <USBD_CDC_Setup+0x186>
          break;
 8006e48:	bf00      	nop
      }
      break;
 8006e4a:	e006      	b.n	8006e5a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 f9f4 	bl	800823c <USBD_CtlError>
      ret = USBD_FAIL;
 8006e54:	2303      	movs	r3, #3
 8006e56:	75fb      	strb	r3, [r7, #23]
      break;
 8006e58:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e04f      	b.n	8006f26 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e8e:	78fa      	ldrb	r2, [r7, #3]
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	3318      	adds	r3, #24
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d029      	beq.n	8006ef8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ea4:	78fa      	ldrb	r2, [r7, #3]
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	3318      	adds	r3, #24
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	78f9      	ldrb	r1, [r7, #3]
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	1a5b      	subs	r3, r3, r1
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4403      	add	r3, r0
 8006ec4:	3344      	adds	r3, #68	; 0x44
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ecc:	fb03 f301 	mul.w	r3, r3, r1
 8006ed0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d110      	bne.n	8006ef8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006ed6:	78fa      	ldrb	r2, [r7, #3]
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	3318      	adds	r3, #24
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006eea:	78f9      	ldrb	r1, [r7, #3]
 8006eec:	2300      	movs	r3, #0
 8006eee:	2200      	movs	r2, #0
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 ff06 	bl	8008d02 <USBD_LL_Transmit>
 8006ef6:	e015      	b.n	8006f24 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00b      	beq.n	8006f24 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f20:	78fa      	ldrb	r2, [r7, #3]
 8006f22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e015      	b.n	8006f7c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 ff16 	bl	8008d86 <USBD_LL_GetRxDataSize>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f76:	4611      	mov	r1, r2
 8006f78:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e01b      	b.n	8006fd6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d015      	beq.n	8006fd4 <USBD_CDC_EP0_RxReady+0x50>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fae:	2bff      	cmp	r3, #255	; 0xff
 8006fb0:	d010      	beq.n	8006fd4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006fc0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	22ff      	movs	r2, #255	; 0xff
 8006fd0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2243      	movs	r2, #67	; 0x43
 8006fec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006fee:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	2000009c 	.word	0x2000009c

08007000 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2243      	movs	r2, #67	; 0x43
 800700c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800700e:	4b03      	ldr	r3, [pc, #12]	; (800701c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	20000058 	.word	0x20000058

08007020 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2243      	movs	r2, #67	; 0x43
 800702c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800702e:	4b03      	ldr	r3, [pc, #12]	; (800703c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	200000e0 	.word	0x200000e0

08007040 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	220a      	movs	r2, #10
 800704c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800704e:	4b03      	ldr	r3, [pc, #12]	; (800705c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000014 	.word	0x20000014

08007060 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007070:	2303      	movs	r3, #3
 8007072:	e004      	b.n	800707e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800708a:	b480      	push	{r7}
 800708c:	b087      	sub	sp, #28
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800709c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e008      	b.n	80070ba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80070de:	2303      	movs	r3, #3
 80070e0:	e004      	b.n	80070ec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007106:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007112:	2303      	movs	r3, #3
 8007114:	e016      	b.n	8007144 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	7c1b      	ldrb	r3, [r3, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d109      	bne.n	8007132 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007128:	2101      	movs	r1, #1
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 fe0a 	bl	8008d44 <USBD_LL_PrepareReceive>
 8007130:	e007      	b.n	8007142 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007138:	2340      	movs	r3, #64	; 0x40
 800713a:	2101      	movs	r1, #1
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fe01 	bl	8008d44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007160:	2303      	movs	r3, #3
 8007162:	e01f      	b.n	80071a4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	79fa      	ldrb	r2, [r7, #7]
 8007196:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f001 fc7d 	bl	8008a98 <USBD_LL_Init>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e016      	b.n	80071f2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	f107 020e 	add.w	r2, r7, #14
 80071e4:	4610      	mov	r0, r2
 80071e6:	4798      	blx	r3
 80071e8:	4602      	mov	r2, r0
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 fc94 	bl	8008b30 <USBD_LL_Start>
 8007208:	4603      	mov	r3, r0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007234:	2303      	movs	r3, #3
 8007236:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723e:	2b00      	cmp	r3, #0
 8007240:	d009      	beq.n	8007256 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	78fa      	ldrb	r2, [r7, #3]
 800724c:	4611      	mov	r1, r2
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4798      	blx	r3
 8007252:	4603      	mov	r3, r0
 8007254:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007256:	7bfb      	ldrb	r3, [r7, #15]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	78fa      	ldrb	r2, [r7, #3]
 8007280:	4611      	mov	r1, r2
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	4798      	blx	r3
  }

  return USBD_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 ff90 	bl	80081c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80072b6:	461a      	mov	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072c4:	f003 031f 	and.w	r3, r3, #31
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d01a      	beq.n	8007302 <USBD_LL_SetupStage+0x72>
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d822      	bhi.n	8007316 <USBD_LL_SetupStage+0x86>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <USBD_LL_SetupStage+0x4a>
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d00a      	beq.n	80072ee <USBD_LL_SetupStage+0x5e>
 80072d8:	e01d      	b.n	8007316 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa62 	bl	80077ac <USBD_StdDevReq>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]
      break;
 80072ec:	e020      	b.n	8007330 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fac6 	bl	8007888 <USBD_StdItfReq>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007300:	e016      	b.n	8007330 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fb05 	bl	800791a <USBD_StdEPReq>
 8007310:	4603      	mov	r3, r0
 8007312:	73fb      	strb	r3, [r7, #15]
      break;
 8007314:	e00c      	b.n	8007330 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800731c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007320:	b2db      	uxtb	r3, r3
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fc63 	bl	8008bf0 <USBD_LL_StallEP>
 800732a:	4603      	mov	r3, r0
 800732c:	73fb      	strb	r3, [r7, #15]
      break;
 800732e:	bf00      	nop
  }

  return ret;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b086      	sub	sp, #24
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	460b      	mov	r3, r1
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007348:	7afb      	ldrb	r3, [r7, #11]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d138      	bne.n	80073c0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007354:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800735c:	2b03      	cmp	r3, #3
 800735e:	d14a      	bne.n	80073f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	429a      	cmp	r2, r3
 800736a:	d913      	bls.n	8007394 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	1ad2      	subs	r2, r2, r3
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	4293      	cmp	r3, r2
 8007384:	bf28      	it	cs
 8007386:	4613      	movcs	r3, r2
 8007388:	461a      	mov	r2, r3
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f001 f80f 	bl	80083b0 <USBD_CtlContinueRx>
 8007392:	e030      	b.n	80073f6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b03      	cmp	r3, #3
 800739e:	d10b      	bne.n	80073b8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d005      	beq.n	80073b8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f001 f80a 	bl	80083d2 <USBD_CtlSendStatus>
 80073be:	e01a      	b.n	80073f6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d114      	bne.n	80073f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00e      	beq.n	80073f6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	7afa      	ldrb	r2, [r7, #11]
 80073e2:	4611      	mov	r1, r2
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	4798      	blx	r3
 80073e8:	4603      	mov	r3, r0
 80073ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	e000      	b.n	80073f8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	460b      	mov	r3, r1
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800740e:	7afb      	ldrb	r3, [r7, #11]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d16b      	bne.n	80074ec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3314      	adds	r3, #20
 8007418:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007420:	2b02      	cmp	r3, #2
 8007422:	d156      	bne.n	80074d2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	429a      	cmp	r2, r3
 800742e:	d914      	bls.n	800745a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	1ad2      	subs	r2, r2, r3
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	461a      	mov	r2, r3
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 ff84 	bl	8008354 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800744c:	2300      	movs	r3, #0
 800744e:	2200      	movs	r2, #0
 8007450:	2100      	movs	r1, #0
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f001 fc76 	bl	8008d44 <USBD_LL_PrepareReceive>
 8007458:	e03b      	b.n	80074d2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	429a      	cmp	r2, r3
 8007464:	d11c      	bne.n	80074a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800746e:	429a      	cmp	r2, r3
 8007470:	d316      	bcc.n	80074a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800747c:	429a      	cmp	r2, r3
 800747e:	d20f      	bcs.n	80074a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007480:	2200      	movs	r2, #0
 8007482:	2100      	movs	r1, #0
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 ff65 	bl	8008354 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007492:	2300      	movs	r3, #0
 8007494:	2200      	movs	r2, #0
 8007496:	2100      	movs	r1, #0
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f001 fc53 	bl	8008d44 <USBD_LL_PrepareReceive>
 800749e:	e018      	b.n	80074d2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d10b      	bne.n	80074c4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074c4:	2180      	movs	r1, #128	; 0x80
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f001 fb92 	bl	8008bf0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 ff93 	bl	80083f8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d122      	bne.n	8007522 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f7ff fe98 	bl	8007212 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074ea:	e01a      	b.n	8007522 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d114      	bne.n	8007522 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00e      	beq.n	8007522 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	7afa      	ldrb	r2, [r7, #11]
 800750e:	4611      	mov	r1, r2
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	4798      	blx	r3
 8007514:	4603      	mov	r3, r0
 8007516:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	e000      	b.n	8007524 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	e02f      	b.n	80075c0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00f      	beq.n	800758a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d009      	beq.n	800758a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6852      	ldr	r2, [r2, #4]
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	4611      	mov	r1, r2
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800758a:	2340      	movs	r3, #64	; 0x40
 800758c:	2200      	movs	r2, #0
 800758e:	2100      	movs	r1, #0
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 fae8 	bl	8008b66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2240      	movs	r2, #64	; 0x40
 80075a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075a6:	2340      	movs	r3, #64	; 0x40
 80075a8:	2200      	movs	r2, #0
 80075aa:	2180      	movs	r1, #128	; 0x80
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 fada 	bl	8008b66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2240      	movs	r2, #64	; 0x40
 80075bc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2204      	movs	r2, #4
 8007602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b04      	cmp	r3, #4
 8007626:	d106      	bne.n	8007636 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800762e:	b2da      	uxtb	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007656:	2303      	movs	r3, #3
 8007658:	e012      	b.n	8007680 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b03      	cmp	r3, #3
 8007664:	d10b      	bne.n	800767e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800769e:	2303      	movs	r3, #3
 80076a0:	e014      	b.n	80076cc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d10d      	bne.n	80076ca <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d007      	beq.n	80076ca <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	4611      	mov	r1, r2
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e014      	b.n	8007718 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d10d      	bne.n	8007716 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b00      	cmp	r3, #0
 8007704:	d007      	beq.n	8007716 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	78fa      	ldrb	r2, [r7, #3]
 8007710:	4611      	mov	r1, r2
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774c:	2b00      	cmp	r3, #0
 800774e:	d009      	beq.n	8007764 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	6852      	ldr	r2, [r2, #4]
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	4611      	mov	r1, r2
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	4798      	blx	r3
  }

  return USBD_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800776e:	b480      	push	{r7}
 8007770:	b087      	sub	sp, #28
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	3301      	adds	r3, #1
 8007784:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800778c:	8a3b      	ldrh	r3, [r7, #16]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	b21a      	sxth	r2, r3
 8007792:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007796:	4313      	orrs	r3, r2
 8007798:	b21b      	sxth	r3, r3
 800779a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800779c:	89fb      	ldrh	r3, [r7, #14]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
	...

080077ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077c2:	2b40      	cmp	r3, #64	; 0x40
 80077c4:	d005      	beq.n	80077d2 <USBD_StdDevReq+0x26>
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	d853      	bhi.n	8007872 <USBD_StdDevReq+0xc6>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <USBD_StdDevReq+0x3a>
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d14f      	bne.n	8007872 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
      break;
 80077e4:	e04a      	b.n	800787c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b09      	cmp	r3, #9
 80077ec:	d83b      	bhi.n	8007866 <USBD_StdDevReq+0xba>
 80077ee:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <USBD_StdDevReq+0x48>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	08007849 	.word	0x08007849
 80077f8:	0800785d 	.word	0x0800785d
 80077fc:	08007867 	.word	0x08007867
 8007800:	08007853 	.word	0x08007853
 8007804:	08007867 	.word	0x08007867
 8007808:	08007827 	.word	0x08007827
 800780c:	0800781d 	.word	0x0800781d
 8007810:	08007867 	.word	0x08007867
 8007814:	0800783f 	.word	0x0800783f
 8007818:	08007831 	.word	0x08007831
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f9de 	bl	8007be0 <USBD_GetDescriptor>
          break;
 8007824:	e024      	b.n	8007870 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fb43 	bl	8007eb4 <USBD_SetAddress>
          break;
 800782e:	e01f      	b.n	8007870 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fb82 	bl	8007f3c <USBD_SetConfig>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]
          break;
 800783c:	e018      	b.n	8007870 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fc21 	bl	8008088 <USBD_GetConfig>
          break;
 8007846:	e013      	b.n	8007870 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fc52 	bl	80080f4 <USBD_GetStatus>
          break;
 8007850:	e00e      	b.n	8007870 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fc81 	bl	800815c <USBD_SetFeature>
          break;
 800785a:	e009      	b.n	8007870 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fc90 	bl	8008184 <USBD_ClrFeature>
          break;
 8007864:	e004      	b.n	8007870 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fce7 	bl	800823c <USBD_CtlError>
          break;
 800786e:	bf00      	nop
      }
      break;
 8007870:	e004      	b.n	800787c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fce1 	bl	800823c <USBD_CtlError>
      break;
 800787a:	bf00      	nop
  }

  return ret;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop

08007888 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d005      	beq.n	80078ae <USBD_StdItfReq+0x26>
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d82f      	bhi.n	8007906 <USBD_StdItfReq+0x7e>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <USBD_StdItfReq+0x26>
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d12b      	bne.n	8007906 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d81d      	bhi.n	80078f8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	889b      	ldrh	r3, [r3, #4]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d813      	bhi.n	80078ee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4798      	blx	r3
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	88db      	ldrh	r3, [r3, #6]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d110      	bne.n	8007902 <USBD_StdItfReq+0x7a>
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10d      	bne.n	8007902 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fd73 	bl	80083d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078ec:	e009      	b.n	8007902 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fca3 	bl	800823c <USBD_CtlError>
          break;
 80078f6:	e004      	b.n	8007902 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fc9e 	bl	800823c <USBD_CtlError>
          break;
 8007900:	e000      	b.n	8007904 <USBD_StdItfReq+0x7c>
          break;
 8007902:	bf00      	nop
      }
      break;
 8007904:	e004      	b.n	8007910 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fc97 	bl	800823c <USBD_CtlError>
      break;
 800790e:	bf00      	nop
  }

  return ret;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	889b      	ldrh	r3, [r3, #4]
 800792c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d007      	beq.n	800794a <USBD_StdEPReq+0x30>
 800793a:	2b40      	cmp	r3, #64	; 0x40
 800793c:	f200 8145 	bhi.w	8007bca <USBD_StdEPReq+0x2b0>
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00c      	beq.n	800795e <USBD_StdEPReq+0x44>
 8007944:	2b20      	cmp	r3, #32
 8007946:	f040 8140 	bne.w	8007bca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	4798      	blx	r3
 8007958:	4603      	mov	r3, r0
 800795a:	73fb      	strb	r3, [r7, #15]
      break;
 800795c:	e13a      	b.n	8007bd4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	785b      	ldrb	r3, [r3, #1]
 8007962:	2b03      	cmp	r3, #3
 8007964:	d007      	beq.n	8007976 <USBD_StdEPReq+0x5c>
 8007966:	2b03      	cmp	r3, #3
 8007968:	f300 8129 	bgt.w	8007bbe <USBD_StdEPReq+0x2a4>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d07f      	beq.n	8007a70 <USBD_StdEPReq+0x156>
 8007970:	2b01      	cmp	r3, #1
 8007972:	d03c      	beq.n	80079ee <USBD_StdEPReq+0xd4>
 8007974:	e123      	b.n	8007bbe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d002      	beq.n	8007988 <USBD_StdEPReq+0x6e>
 8007982:	2b03      	cmp	r3, #3
 8007984:	d016      	beq.n	80079b4 <USBD_StdEPReq+0x9a>
 8007986:	e02c      	b.n	80079e2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00d      	beq.n	80079aa <USBD_StdEPReq+0x90>
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b80      	cmp	r3, #128	; 0x80
 8007992:	d00a      	beq.n	80079aa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 f929 	bl	8008bf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800799e:	2180      	movs	r1, #128	; 0x80
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 f925 	bl	8008bf0 <USBD_LL_StallEP>
 80079a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079a8:	e020      	b.n	80079ec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fc45 	bl	800823c <USBD_CtlError>
              break;
 80079b2:	e01b      	b.n	80079ec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	885b      	ldrh	r3, [r3, #2]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10e      	bne.n	80079da <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <USBD_StdEPReq+0xc0>
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b80      	cmp	r3, #128	; 0x80
 80079c6:	d008      	beq.n	80079da <USBD_StdEPReq+0xc0>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	88db      	ldrh	r3, [r3, #6]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 f90b 	bl	8008bf0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fcf9 	bl	80083d2 <USBD_CtlSendStatus>

              break;
 80079e0:	e004      	b.n	80079ec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fc29 	bl	800823c <USBD_CtlError>
              break;
 80079ea:	bf00      	nop
          }
          break;
 80079ec:	e0ec      	b.n	8007bc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d002      	beq.n	8007a00 <USBD_StdEPReq+0xe6>
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d016      	beq.n	8007a2c <USBD_StdEPReq+0x112>
 80079fe:	e030      	b.n	8007a62 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00d      	beq.n	8007a22 <USBD_StdEPReq+0x108>
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b80      	cmp	r3, #128	; 0x80
 8007a0a:	d00a      	beq.n	8007a22 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 f8ed 	bl	8008bf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a16:	2180      	movs	r1, #128	; 0x80
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 f8e9 	bl	8008bf0 <USBD_LL_StallEP>
 8007a1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a20:	e025      	b.n	8007a6e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fc09 	bl	800823c <USBD_CtlError>
              break;
 8007a2a:	e020      	b.n	8007a6e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	885b      	ldrh	r3, [r3, #2]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d11b      	bne.n	8007a6c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d004      	beq.n	8007a48 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f001 f8f3 	bl	8008c2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fcc2 	bl	80083d2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007a60:	e004      	b.n	8007a6c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fbe9 	bl	800823c <USBD_CtlError>
              break;
 8007a6a:	e000      	b.n	8007a6e <USBD_StdEPReq+0x154>
              break;
 8007a6c:	bf00      	nop
          }
          break;
 8007a6e:	e0ab      	b.n	8007bc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d002      	beq.n	8007a82 <USBD_StdEPReq+0x168>
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d032      	beq.n	8007ae6 <USBD_StdEPReq+0x1cc>
 8007a80:	e097      	b.n	8007bb2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d007      	beq.n	8007a98 <USBD_StdEPReq+0x17e>
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b80      	cmp	r3, #128	; 0x80
 8007a8c:	d004      	beq.n	8007a98 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fbd3 	bl	800823c <USBD_CtlError>
                break;
 8007a96:	e091      	b.n	8007bbc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	da0b      	bge.n	8007ab8 <USBD_StdEPReq+0x19e>
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	3310      	adds	r3, #16
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	e00b      	b.n	8007ad0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	3304      	adds	r3, #4
 8007ad0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2202      	movs	r2, #2
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fc1d 	bl	800831e <USBD_CtlSendData>
              break;
 8007ae4:	e06a      	b.n	8007bbc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	da11      	bge.n	8007b12 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	f003 020f 	and.w	r2, r3, #15
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	3324      	adds	r3, #36	; 0x24
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d117      	bne.n	8007b38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fb96 	bl	800823c <USBD_CtlError>
                  break;
 8007b10:	e054      	b.n	8007bbc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	f003 020f 	and.w	r2, r3, #15
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	440b      	add	r3, r1
 8007b24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fb83 	bl	800823c <USBD_CtlError>
                  break;
 8007b36:	e041      	b.n	8007bbc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	da0b      	bge.n	8007b58 <USBD_StdEPReq+0x23e>
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b46:	4613      	mov	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	3310      	adds	r3, #16
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	4413      	add	r3, r2
 8007b54:	3304      	adds	r3, #4
 8007b56:	e00b      	b.n	8007b70 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3304      	adds	r3, #4
 8007b70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <USBD_StdEPReq+0x264>
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b80      	cmp	r3, #128	; 0x80
 8007b7c:	d103      	bne.n	8007b86 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	e00e      	b.n	8007ba4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 f86e 	bl	8008c6c <USBD_LL_IsStallEP>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	e002      	b.n	8007ba4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fbb7 	bl	800831e <USBD_CtlSendData>
              break;
 8007bb0:	e004      	b.n	8007bbc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fb41 	bl	800823c <USBD_CtlError>
              break;
 8007bba:	bf00      	nop
          }
          break;
 8007bbc:	e004      	b.n	8007bc8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fb3b 	bl	800823c <USBD_CtlError>
          break;
 8007bc6:	bf00      	nop
      }
      break;
 8007bc8:	e004      	b.n	8007bd4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fb35 	bl	800823c <USBD_CtlError>
      break;
 8007bd2:	bf00      	nop
  }

  return ret;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	885b      	ldrh	r3, [r3, #2]
 8007bfa:	0a1b      	lsrs	r3, r3, #8
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	2b06      	cmp	r3, #6
 8007c02:	f200 8128 	bhi.w	8007e56 <USBD_GetDescriptor+0x276>
 8007c06:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <USBD_GetDescriptor+0x2c>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c29 	.word	0x08007c29
 8007c10:	08007c41 	.word	0x08007c41
 8007c14:	08007c81 	.word	0x08007c81
 8007c18:	08007e57 	.word	0x08007e57
 8007c1c:	08007e57 	.word	0x08007e57
 8007c20:	08007df7 	.word	0x08007df7
 8007c24:	08007e23 	.word	0x08007e23
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 0108 	add.w	r1, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
      break;
 8007c3e:	e112      	b.n	8007e66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7c1b      	ldrb	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10d      	bne.n	8007c64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c50:	f107 0208 	add.w	r2, r7, #8
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
 8007c58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	2202      	movs	r2, #2
 8007c60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c62:	e100      	b.n	8007e66 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	f107 0208 	add.w	r2, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	701a      	strb	r2, [r3, #0]
      break;
 8007c7e:	e0f2      	b.n	8007e66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	885b      	ldrh	r3, [r3, #2]
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	f200 80ac 	bhi.w	8007de4 <USBD_GetDescriptor+0x204>
 8007c8c:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <USBD_GetDescriptor+0xb4>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007cad 	.word	0x08007cad
 8007c98:	08007ce1 	.word	0x08007ce1
 8007c9c:	08007d15 	.word	0x08007d15
 8007ca0:	08007d49 	.word	0x08007d49
 8007ca4:	08007d7d 	.word	0x08007d7d
 8007ca8:	08007db1 	.word	0x08007db1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00b      	beq.n	8007cd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	7c12      	ldrb	r2, [r2, #16]
 8007cc4:	f107 0108 	add.w	r1, r7, #8
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
 8007ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cce:	e091      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fab2 	bl	800823c <USBD_CtlError>
            err++;
 8007cd8:	7afb      	ldrb	r3, [r7, #11]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cde:	e089      	b.n	8007df4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	7c12      	ldrb	r2, [r2, #16]
 8007cf8:	f107 0108 	add.w	r1, r7, #8
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4798      	blx	r3
 8007d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d02:	e077      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fa98 	bl	800823c <USBD_CtlError>
            err++;
 8007d0c:	7afb      	ldrb	r3, [r7, #11]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	72fb      	strb	r3, [r7, #11]
          break;
 8007d12:	e06f      	b.n	8007df4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	7c12      	ldrb	r2, [r2, #16]
 8007d2c:	f107 0108 	add.w	r1, r7, #8
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
 8007d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d36:	e05d      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa7e 	bl	800823c <USBD_CtlError>
            err++;
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	3301      	adds	r3, #1
 8007d44:	72fb      	strb	r3, [r7, #11]
          break;
 8007d46:	e055      	b.n	8007df4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00b      	beq.n	8007d6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	7c12      	ldrb	r2, [r2, #16]
 8007d60:	f107 0108 	add.w	r1, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d6a:	e043      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fa64 	bl	800823c <USBD_CtlError>
            err++;
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	3301      	adds	r3, #1
 8007d78:	72fb      	strb	r3, [r7, #11]
          break;
 8007d7a:	e03b      	b.n	8007df4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	7c12      	ldrb	r2, [r2, #16]
 8007d94:	f107 0108 	add.w	r1, r7, #8
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4798      	blx	r3
 8007d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d9e:	e029      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fa4a 	bl	800823c <USBD_CtlError>
            err++;
 8007da8:	7afb      	ldrb	r3, [r7, #11]
 8007daa:	3301      	adds	r3, #1
 8007dac:	72fb      	strb	r3, [r7, #11]
          break;
 8007dae:	e021      	b.n	8007df4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	7c12      	ldrb	r2, [r2, #16]
 8007dc8:	f107 0108 	add.w	r1, r7, #8
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4798      	blx	r3
 8007dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dd2:	e00f      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fa30 	bl	800823c <USBD_CtlError>
            err++;
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	3301      	adds	r3, #1
 8007de0:	72fb      	strb	r3, [r7, #11]
          break;
 8007de2:	e007      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa28 	bl	800823c <USBD_CtlError>
          err++;
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	3301      	adds	r3, #1
 8007df0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007df2:	bf00      	nop
      }
      break;
 8007df4:	e037      	b.n	8007e66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	7c1b      	ldrb	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d109      	bne.n	8007e12 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e06:	f107 0208 	add.w	r2, r7, #8
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	4798      	blx	r3
 8007e0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e10:	e029      	b.n	8007e66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fa11 	bl	800823c <USBD_CtlError>
        err++;
 8007e1a:	7afb      	ldrb	r3, [r7, #11]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e20:	e021      	b.n	8007e66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	7c1b      	ldrb	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10d      	bne.n	8007e46 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e32:	f107 0208 	add.w	r2, r7, #8
 8007e36:	4610      	mov	r0, r2
 8007e38:	4798      	blx	r3
 8007e3a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	2207      	movs	r2, #7
 8007e42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e44:	e00f      	b.n	8007e66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f9f7 	bl	800823c <USBD_CtlError>
        err++;
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	3301      	adds	r3, #1
 8007e52:	72fb      	strb	r3, [r7, #11]
      break;
 8007e54:	e007      	b.n	8007e66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f9ef 	bl	800823c <USBD_CtlError>
      err++;
 8007e5e:	7afb      	ldrb	r3, [r7, #11]
 8007e60:	3301      	adds	r3, #1
 8007e62:	72fb      	strb	r3, [r7, #11]
      break;
 8007e64:	bf00      	nop
  }

  if (err != 0U)
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d11e      	bne.n	8007eaa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	88db      	ldrh	r3, [r3, #6]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d016      	beq.n	8007ea2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e74:	893b      	ldrh	r3, [r7, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00e      	beq.n	8007e98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	88da      	ldrh	r2, [r3, #6]
 8007e7e:	893b      	ldrh	r3, [r7, #8]
 8007e80:	4293      	cmp	r3, r2
 8007e82:	bf28      	it	cs
 8007e84:	4613      	movcs	r3, r2
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e8a:	893b      	ldrh	r3, [r7, #8]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa44 	bl	800831e <USBD_CtlSendData>
 8007e96:	e009      	b.n	8007eac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f9ce 	bl	800823c <USBD_CtlError>
 8007ea0:	e004      	b.n	8007eac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa95 	bl	80083d2 <USBD_CtlSendStatus>
 8007ea8:	e000      	b.n	8007eac <USBD_GetDescriptor+0x2cc>
    return;
 8007eaa:	bf00      	nop
  }
}
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop

08007eb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	889b      	ldrh	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d131      	bne.n	8007f2a <USBD_SetAddress+0x76>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	88db      	ldrh	r3, [r3, #6]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d12d      	bne.n	8007f2a <USBD_SetAddress+0x76>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	885b      	ldrh	r3, [r3, #2]
 8007ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ed4:	d829      	bhi.n	8007f2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	885b      	ldrh	r3, [r3, #2]
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d104      	bne.n	8007ef8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f9a3 	bl	800823c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef6:	e01d      	b.n	8007f34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	7bfa      	ldrb	r2, [r7, #15]
 8007efc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fedd 	bl	8008cc4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa61 	bl	80083d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d004      	beq.n	8007f20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f1e:	e009      	b.n	8007f34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f28:	e004      	b.n	8007f34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f985 	bl	800823c <USBD_CtlError>
  }
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	885b      	ldrh	r3, [r3, #2]
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	4b4c      	ldr	r3, [pc, #304]	; (8008084 <USBD_SetConfig+0x148>)
 8007f52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f54:	4b4b      	ldr	r3, [pc, #300]	; (8008084 <USBD_SetConfig+0x148>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d905      	bls.n	8007f68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f96c 	bl	800823c <USBD_CtlError>
    return USBD_FAIL;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e088      	b.n	800807a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d002      	beq.n	8007f7a <USBD_SetConfig+0x3e>
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d025      	beq.n	8007fc4 <USBD_SetConfig+0x88>
 8007f78:	e071      	b.n	800805e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f7a:	4b42      	ldr	r3, [pc, #264]	; (8008084 <USBD_SetConfig+0x148>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d01c      	beq.n	8007fbc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007f82:	4b40      	ldr	r3, [pc, #256]	; (8008084 <USBD_SetConfig+0x148>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f8c:	4b3d      	ldr	r3, [pc, #244]	; (8008084 <USBD_SetConfig+0x148>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7ff f948 	bl	8007228 <USBD_SetClassConfig>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d004      	beq.n	8007fac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f949 	bl	800823c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007faa:	e065      	b.n	8008078 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa10 	bl	80083d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2203      	movs	r2, #3
 8007fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007fba:	e05d      	b.n	8008078 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fa08 	bl	80083d2 <USBD_CtlSendStatus>
      break;
 8007fc2:	e059      	b.n	8008078 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fc4:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <USBD_SetConfig+0x148>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d112      	bne.n	8007ff2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007fd4:	4b2b      	ldr	r3, [pc, #172]	; (8008084 <USBD_SetConfig+0x148>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fde:	4b29      	ldr	r3, [pc, #164]	; (8008084 <USBD_SetConfig+0x148>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff f93b 	bl	8007260 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f9f1 	bl	80083d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ff0:	e042      	b.n	8008078 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007ff2:	4b24      	ldr	r3, [pc, #144]	; (8008084 <USBD_SetConfig+0x148>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d02a      	beq.n	8008056 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff f929 	bl	8007260 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800800e:	4b1d      	ldr	r3, [pc, #116]	; (8008084 <USBD_SetConfig+0x148>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008018:	4b1a      	ldr	r3, [pc, #104]	; (8008084 <USBD_SetConfig+0x148>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff f902 	bl	8007228 <USBD_SetClassConfig>
 8008024:	4603      	mov	r3, r0
 8008026:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00f      	beq.n	800804e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f903 	bl	800823c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	b2db      	uxtb	r3, r3
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff f90e 	bl	8007260 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800804c:	e014      	b.n	8008078 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f9bf 	bl	80083d2 <USBD_CtlSendStatus>
      break;
 8008054:	e010      	b.n	8008078 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f9bb 	bl	80083d2 <USBD_CtlSendStatus>
      break;
 800805c:	e00c      	b.n	8008078 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f8eb 	bl	800823c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008066:	4b07      	ldr	r3, [pc, #28]	; (8008084 <USBD_SetConfig+0x148>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7ff f8f7 	bl	8007260 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008072:	2303      	movs	r3, #3
 8008074:	73fb      	strb	r3, [r7, #15]
      break;
 8008076:	bf00      	nop
  }

  return ret;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	200005aa 	.word	0x200005aa

08008088 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	88db      	ldrh	r3, [r3, #6]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d004      	beq.n	80080a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f8cd 	bl	800823c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080a2:	e023      	b.n	80080ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	dc02      	bgt.n	80080b6 <USBD_GetConfig+0x2e>
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	dc03      	bgt.n	80080bc <USBD_GetConfig+0x34>
 80080b4:	e015      	b.n	80080e2 <USBD_GetConfig+0x5a>
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d00b      	beq.n	80080d2 <USBD_GetConfig+0x4a>
 80080ba:	e012      	b.n	80080e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3308      	adds	r3, #8
 80080c6:	2201      	movs	r2, #1
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f927 	bl	800831e <USBD_CtlSendData>
        break;
 80080d0:	e00c      	b.n	80080ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3304      	adds	r3, #4
 80080d6:	2201      	movs	r2, #1
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f91f 	bl	800831e <USBD_CtlSendData>
        break;
 80080e0:	e004      	b.n	80080ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f8a9 	bl	800823c <USBD_CtlError>
        break;
 80080ea:	bf00      	nop
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008104:	b2db      	uxtb	r3, r3
 8008106:	3b01      	subs	r3, #1
 8008108:	2b02      	cmp	r3, #2
 800810a:	d81e      	bhi.n	800814a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	88db      	ldrh	r3, [r3, #6]
 8008110:	2b02      	cmp	r3, #2
 8008112:	d004      	beq.n	800811e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f890 	bl	800823c <USBD_CtlError>
        break;
 800811c:	e01a      	b.n	8008154 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800812a:	2b00      	cmp	r3, #0
 800812c:	d005      	beq.n	800813a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f043 0202 	orr.w	r2, r3, #2
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	330c      	adds	r3, #12
 800813e:	2202      	movs	r2, #2
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f8eb 	bl	800831e <USBD_CtlSendData>
      break;
 8008148:	e004      	b.n	8008154 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f875 	bl	800823c <USBD_CtlError>
      break;
 8008152:	bf00      	nop
  }
}
 8008154:	bf00      	nop
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	885b      	ldrh	r3, [r3, #2]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d106      	bne.n	800817c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f92b 	bl	80083d2 <USBD_CtlSendStatus>
  }
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008194:	b2db      	uxtb	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	2b02      	cmp	r3, #2
 800819a:	d80b      	bhi.n	80081b4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	885b      	ldrh	r3, [r3, #2]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d10c      	bne.n	80081be <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f910 	bl	80083d2 <USBD_CtlSendStatus>
      }
      break;
 80081b2:	e004      	b.n	80081be <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f840 	bl	800823c <USBD_CtlError>
      break;
 80081bc:	e000      	b.n	80081c0 <USBD_ClrFeature+0x3c>
      break;
 80081be:	bf00      	nop
  }
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	781a      	ldrb	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f7ff fabb 	bl	800776e <SWAPBYTE>
 80081f8:	4603      	mov	r3, r0
 80081fa:	461a      	mov	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3301      	adds	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff faae 	bl	800776e <SWAPBYTE>
 8008212:	4603      	mov	r3, r0
 8008214:	461a      	mov	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3301      	adds	r3, #1
 8008224:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff faa1 	bl	800776e <SWAPBYTE>
 800822c:	4603      	mov	r3, r0
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	80da      	strh	r2, [r3, #6]
}
 8008234:	bf00      	nop
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008246:	2180      	movs	r1, #128	; 0x80
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fcd1 	bl	8008bf0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800824e:	2100      	movs	r1, #0
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fccd 	bl	8008bf0 <USBD_LL_StallEP>
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b086      	sub	sp, #24
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d036      	beq.n	80082e2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008278:	6938      	ldr	r0, [r7, #16]
 800827a:	f000 f836 	bl	80082ea <USBD_GetLen>
 800827e:	4603      	mov	r3, r0
 8008280:	3301      	adds	r3, #1
 8008282:	b29b      	uxth	r3, r3
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	b29a      	uxth	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	4413      	add	r3, r2
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	7812      	ldrb	r2, [r2, #0]
 8008296:	701a      	strb	r2, [r3, #0]
  idx++;
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	3301      	adds	r3, #1
 800829c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	4413      	add	r3, r2
 80082a4:	2203      	movs	r2, #3
 80082a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	3301      	adds	r3, #1
 80082ac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082ae:	e013      	b.n	80082d8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	4413      	add	r3, r2
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	7812      	ldrb	r2, [r2, #0]
 80082ba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	3301      	adds	r3, #1
 80082c0:	613b      	str	r3, [r7, #16]
    idx++;
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	3301      	adds	r3, #1
 80082c6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	4413      	add	r3, r2
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]
    idx++;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	3301      	adds	r3, #1
 80082d6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e7      	bne.n	80082b0 <USBD_GetString+0x52>
 80082e0:	e000      	b.n	80082e4 <USBD_GetString+0x86>
    return;
 80082e2:	bf00      	nop
  }
}
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b085      	sub	sp, #20
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80082fa:	e005      	b.n	8008308 <USBD_GetLen+0x1e>
  {
    len++;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	3301      	adds	r3, #1
 8008300:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	3301      	adds	r3, #1
 8008306:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1f5      	bne.n	80082fc <USBD_GetLen+0x12>
  }

  return len;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	60f8      	str	r0, [r7, #12]
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2202      	movs	r2, #2
 800832e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	2100      	movs	r1, #0
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 fcdc 	bl	8008d02 <USBD_LL_Transmit>

  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	2100      	movs	r1, #0
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 fccb 	bl	8008d02 <USBD_LL_Transmit>

  return USBD_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2203      	movs	r2, #3
 8008386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	2100      	movs	r1, #0
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 fccf 	bl	8008d44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	2100      	movs	r1, #0
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 fcbe 	bl	8008d44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2204      	movs	r2, #4
 80083de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083e2:	2300      	movs	r3, #0
 80083e4:	2200      	movs	r2, #0
 80083e6:	2100      	movs	r1, #0
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fc8a 	bl	8008d02 <USBD_LL_Transmit>

  return USBD_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2205      	movs	r2, #5
 8008404:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008408:	2300      	movs	r3, #0
 800840a:	2200      	movs	r2, #0
 800840c:	2100      	movs	r1, #0
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fc98 	bl	8008d44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008424:	2200      	movs	r2, #0
 8008426:	4912      	ldr	r1, [pc, #72]	; (8008470 <MX_USB_DEVICE_Init+0x50>)
 8008428:	4812      	ldr	r0, [pc, #72]	; (8008474 <MX_USB_DEVICE_Init+0x54>)
 800842a:	f7fe fe8f 	bl	800714c <USBD_Init>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008434:	f7f8 ff30 	bl	8001298 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008438:	490f      	ldr	r1, [pc, #60]	; (8008478 <MX_USB_DEVICE_Init+0x58>)
 800843a:	480e      	ldr	r0, [pc, #56]	; (8008474 <MX_USB_DEVICE_Init+0x54>)
 800843c:	f7fe feb6 	bl	80071ac <USBD_RegisterClass>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008446:	f7f8 ff27 	bl	8001298 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800844a:	490c      	ldr	r1, [pc, #48]	; (800847c <MX_USB_DEVICE_Init+0x5c>)
 800844c:	4809      	ldr	r0, [pc, #36]	; (8008474 <MX_USB_DEVICE_Init+0x54>)
 800844e:	f7fe fe07 	bl	8007060 <USBD_CDC_RegisterInterface>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008458:	f7f8 ff1e 	bl	8001298 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800845c:	4805      	ldr	r0, [pc, #20]	; (8008474 <MX_USB_DEVICE_Init+0x54>)
 800845e:	f7fe fecc 	bl	80071fa <USBD_Start>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008468:	f7f8 ff16 	bl	8001298 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800846c:	bf00      	nop
 800846e:	bd80      	pop	{r7, pc}
 8008470:	20000138 	.word	0x20000138
 8008474:	20000960 	.word	0x20000960
 8008478:	20000020 	.word	0x20000020
 800847c:	20000124 	.word	0x20000124

08008480 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008484:	2200      	movs	r2, #0
 8008486:	4905      	ldr	r1, [pc, #20]	; (800849c <CDC_Init_FS+0x1c>)
 8008488:	4805      	ldr	r0, [pc, #20]	; (80084a0 <CDC_Init_FS+0x20>)
 800848a:	f7fe fdfe 	bl	800708a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800848e:	4905      	ldr	r1, [pc, #20]	; (80084a4 <CDC_Init_FS+0x24>)
 8008490:	4803      	ldr	r0, [pc, #12]	; (80084a0 <CDC_Init_FS+0x20>)
 8008492:	f7fe fe18 	bl	80070c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008496:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008498:	4618      	mov	r0, r3
 800849a:	bd80      	pop	{r7, pc}
 800849c:	20001430 	.word	0x20001430
 80084a0:	20000960 	.word	0x20000960
 80084a4:	20000c30 	.word	0x20000c30

080084a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084a8:	b480      	push	{r7}
 80084aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
 80084c4:	4613      	mov	r3, r2
 80084c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	2b23      	cmp	r3, #35	; 0x23
 80084cc:	d84a      	bhi.n	8008564 <CDC_Control_FS+0xac>
 80084ce:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <CDC_Control_FS+0x1c>)
 80084d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d4:	08008565 	.word	0x08008565
 80084d8:	08008565 	.word	0x08008565
 80084dc:	08008565 	.word	0x08008565
 80084e0:	08008565 	.word	0x08008565
 80084e4:	08008565 	.word	0x08008565
 80084e8:	08008565 	.word	0x08008565
 80084ec:	08008565 	.word	0x08008565
 80084f0:	08008565 	.word	0x08008565
 80084f4:	08008565 	.word	0x08008565
 80084f8:	08008565 	.word	0x08008565
 80084fc:	08008565 	.word	0x08008565
 8008500:	08008565 	.word	0x08008565
 8008504:	08008565 	.word	0x08008565
 8008508:	08008565 	.word	0x08008565
 800850c:	08008565 	.word	0x08008565
 8008510:	08008565 	.word	0x08008565
 8008514:	08008565 	.word	0x08008565
 8008518:	08008565 	.word	0x08008565
 800851c:	08008565 	.word	0x08008565
 8008520:	08008565 	.word	0x08008565
 8008524:	08008565 	.word	0x08008565
 8008528:	08008565 	.word	0x08008565
 800852c:	08008565 	.word	0x08008565
 8008530:	08008565 	.word	0x08008565
 8008534:	08008565 	.word	0x08008565
 8008538:	08008565 	.word	0x08008565
 800853c:	08008565 	.word	0x08008565
 8008540:	08008565 	.word	0x08008565
 8008544:	08008565 	.word	0x08008565
 8008548:	08008565 	.word	0x08008565
 800854c:	08008565 	.word	0x08008565
 8008550:	08008565 	.word	0x08008565
 8008554:	08008565 	.word	0x08008565
 8008558:	08008565 	.word	0x08008565
 800855c:	08008565 	.word	0x08008565
 8008560:	08008565 	.word	0x08008565
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008564:	bf00      	nop
  }

  return (USBD_OK);
 8008566:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008568:	4618      	mov	r0, r3
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	480f      	ldr	r0, [pc, #60]	; (80085c0 <CDC_Receive_FS+0x4c>)
 8008582:	f7fe fda0 	bl	80070c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008586:	480e      	ldr	r0, [pc, #56]	; (80085c0 <CDC_Receive_FS+0x4c>)
 8008588:	f7fe fdb6 	bl	80070f8 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 800858c:	2240      	movs	r2, #64	; 0x40
 800858e:	2100      	movs	r1, #0
 8008590:	480c      	ldr	r0, [pc, #48]	; (80085c4 <CDC_Receive_FS+0x50>)
 8008592:	f000 fc81 	bl	8008e98 <memset>
  uint8_t len = (uint8_t)*Len;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	461a      	mov	r2, r3
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	4808      	ldr	r0, [pc, #32]	; (80085c4 <CDC_Receive_FS+0x50>)
 80085a4:	f000 fc6a 	bl	8008e7c <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	461a      	mov	r2, r3
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fc72 	bl	8008e98 <memset>

  return (USBD_OK);
 80085b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20000960 	.word	0x20000960
 80085c4:	2000091c 	.word	0x2000091c

080085c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80085da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
	...

080085ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2212      	movs	r2, #18
 80085fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085fe:	4b03      	ldr	r3, [pc, #12]	; (800860c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	20000154 	.word	0x20000154

08008610 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	6039      	str	r1, [r7, #0]
 800861a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2204      	movs	r2, #4
 8008620:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008622:	4b03      	ldr	r3, [pc, #12]	; (8008630 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	20000168 	.word	0x20000168

08008634 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d105      	bne.n	8008652 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	4907      	ldr	r1, [pc, #28]	; (8008668 <USBD_FS_ProductStrDescriptor+0x34>)
 800864a:	4808      	ldr	r0, [pc, #32]	; (800866c <USBD_FS_ProductStrDescriptor+0x38>)
 800864c:	f7ff fe07 	bl	800825e <USBD_GetString>
 8008650:	e004      	b.n	800865c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	4904      	ldr	r1, [pc, #16]	; (8008668 <USBD_FS_ProductStrDescriptor+0x34>)
 8008656:	4805      	ldr	r0, [pc, #20]	; (800866c <USBD_FS_ProductStrDescriptor+0x38>)
 8008658:	f7ff fe01 	bl	800825e <USBD_GetString>
  }
  return USBD_StrDesc;
 800865c:	4b02      	ldr	r3, [pc, #8]	; (8008668 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800865e:	4618      	mov	r0, r3
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20001c30 	.word	0x20001c30
 800866c:	08008ecc 	.word	0x08008ecc

08008670 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	6039      	str	r1, [r7, #0]
 800867a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	4904      	ldr	r1, [pc, #16]	; (8008690 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008680:	4804      	ldr	r0, [pc, #16]	; (8008694 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008682:	f7ff fdec 	bl	800825e <USBD_GetString>
  return USBD_StrDesc;
 8008686:	4b02      	ldr	r3, [pc, #8]	; (8008690 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20001c30 	.word	0x20001c30
 8008694:	08008ee0 	.word	0x08008ee0

08008698 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	221a      	movs	r2, #26
 80086a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086aa:	f000 f843 	bl	8008734 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086ae:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	2000016c 	.word	0x2000016c

080086bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	6039      	str	r1, [r7, #0]
 80086c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d105      	bne.n	80086da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4907      	ldr	r1, [pc, #28]	; (80086f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086d2:	4808      	ldr	r0, [pc, #32]	; (80086f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086d4:	f7ff fdc3 	bl	800825e <USBD_GetString>
 80086d8:	e004      	b.n	80086e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	4904      	ldr	r1, [pc, #16]	; (80086f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086de:	4805      	ldr	r0, [pc, #20]	; (80086f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086e0:	f7ff fdbd 	bl	800825e <USBD_GetString>
  }
  return USBD_StrDesc;
 80086e4:	4b02      	ldr	r3, [pc, #8]	; (80086f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20001c30 	.word	0x20001c30
 80086f4:	08008ef4 	.word	0x08008ef4

080086f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008704:	79fb      	ldrb	r3, [r7, #7]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d105      	bne.n	8008716 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	4907      	ldr	r1, [pc, #28]	; (800872c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800870e:	4808      	ldr	r0, [pc, #32]	; (8008730 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008710:	f7ff fda5 	bl	800825e <USBD_GetString>
 8008714:	e004      	b.n	8008720 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	4904      	ldr	r1, [pc, #16]	; (800872c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800871a:	4805      	ldr	r0, [pc, #20]	; (8008730 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800871c:	f7ff fd9f 	bl	800825e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008720:	4b02      	ldr	r3, [pc, #8]	; (800872c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20001c30 	.word	0x20001c30
 8008730:	08008f00 	.word	0x08008f00

08008734 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800873a:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <Get_SerialNum+0x44>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008740:	4b0e      	ldr	r3, [pc, #56]	; (800877c <Get_SerialNum+0x48>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008746:	4b0e      	ldr	r3, [pc, #56]	; (8008780 <Get_SerialNum+0x4c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4413      	add	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d009      	beq.n	800876e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800875a:	2208      	movs	r2, #8
 800875c:	4909      	ldr	r1, [pc, #36]	; (8008784 <Get_SerialNum+0x50>)
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 f814 	bl	800878c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008764:	2204      	movs	r2, #4
 8008766:	4908      	ldr	r1, [pc, #32]	; (8008788 <Get_SerialNum+0x54>)
 8008768:	68b8      	ldr	r0, [r7, #8]
 800876a:	f000 f80f 	bl	800878c <IntToUnicode>
  }
}
 800876e:	bf00      	nop
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	1fff7a10 	.word	0x1fff7a10
 800877c:	1fff7a14 	.word	0x1fff7a14
 8008780:	1fff7a18 	.word	0x1fff7a18
 8008784:	2000016e 	.word	0x2000016e
 8008788:	2000017e 	.word	0x2000017e

0800878c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800879e:	2300      	movs	r3, #0
 80087a0:	75fb      	strb	r3, [r7, #23]
 80087a2:	e027      	b.n	80087f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	0f1b      	lsrs	r3, r3, #28
 80087a8:	2b09      	cmp	r3, #9
 80087aa:	d80b      	bhi.n	80087c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	0f1b      	lsrs	r3, r3, #28
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	4619      	mov	r1, r3
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	440b      	add	r3, r1
 80087bc:	3230      	adds	r2, #48	; 0x30
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	e00a      	b.n	80087da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	0f1b      	lsrs	r3, r3, #28
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	4619      	mov	r1, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	440b      	add	r3, r1
 80087d4:	3237      	adds	r2, #55	; 0x37
 80087d6:	b2d2      	uxtb	r2, r2
 80087d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	3301      	adds	r3, #1
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	4413      	add	r3, r2
 80087ea:	2200      	movs	r2, #0
 80087ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	3301      	adds	r3, #1
 80087f2:	75fb      	strb	r3, [r7, #23]
 80087f4:	7dfa      	ldrb	r2, [r7, #23]
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d3d3      	bcc.n	80087a4 <IntToUnicode+0x18>
  }
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	371c      	adds	r7, #28
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
	...

0800880c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08a      	sub	sp, #40	; 0x28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008814:	f107 0314 	add.w	r3, r7, #20
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	605a      	str	r2, [r3, #4]
 800881e:	609a      	str	r2, [r3, #8]
 8008820:	60da      	str	r2, [r3, #12]
 8008822:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800882c:	d13a      	bne.n	80088a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800882e:	2300      	movs	r3, #0
 8008830:	613b      	str	r3, [r7, #16]
 8008832:	4b1e      	ldr	r3, [pc, #120]	; (80088ac <HAL_PCD_MspInit+0xa0>)
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	4a1d      	ldr	r2, [pc, #116]	; (80088ac <HAL_PCD_MspInit+0xa0>)
 8008838:	f043 0301 	orr.w	r3, r3, #1
 800883c:	6313      	str	r3, [r2, #48]	; 0x30
 800883e:	4b1b      	ldr	r3, [pc, #108]	; (80088ac <HAL_PCD_MspInit+0xa0>)
 8008840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	613b      	str	r3, [r7, #16]
 8008848:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800884a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800884e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008850:	2302      	movs	r3, #2
 8008852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008854:	2300      	movs	r3, #0
 8008856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008858:	2303      	movs	r3, #3
 800885a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800885c:	230a      	movs	r3, #10
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008860:	f107 0314 	add.w	r3, r7, #20
 8008864:	4619      	mov	r1, r3
 8008866:	4812      	ldr	r0, [pc, #72]	; (80088b0 <HAL_PCD_MspInit+0xa4>)
 8008868:	f7f9 fd84 	bl	8002374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800886c:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <HAL_PCD_MspInit+0xa0>)
 800886e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008870:	4a0e      	ldr	r2, [pc, #56]	; (80088ac <HAL_PCD_MspInit+0xa0>)
 8008872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008876:	6353      	str	r3, [r2, #52]	; 0x34
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	4b0b      	ldr	r3, [pc, #44]	; (80088ac <HAL_PCD_MspInit+0xa0>)
 800887e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008880:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <HAL_PCD_MspInit+0xa0>)
 8008882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008886:	6453      	str	r3, [r2, #68]	; 0x44
 8008888:	4b08      	ldr	r3, [pc, #32]	; (80088ac <HAL_PCD_MspInit+0xa0>)
 800888a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008894:	2200      	movs	r2, #0
 8008896:	2100      	movs	r1, #0
 8008898:	2043      	movs	r0, #67	; 0x43
 800889a:	f7f9 fd34 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800889e:	2043      	movs	r0, #67	; 0x43
 80088a0:	f7f9 fd4d 	bl	800233e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088a4:	bf00      	nop
 80088a6:	3728      	adds	r7, #40	; 0x28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	40023800 	.word	0x40023800
 80088b0:	40020000 	.word	0x40020000

080088b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f7fe fce0 	bl	8007290 <USBD_LL_SetupStage>
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80088ea:	78fa      	ldrb	r2, [r7, #3]
 80088ec:	6879      	ldr	r1, [r7, #4]
 80088ee:	4613      	mov	r3, r2
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	1a9b      	subs	r3, r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	440b      	add	r3, r1
 80088f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	78fb      	ldrb	r3, [r7, #3]
 8008900:	4619      	mov	r1, r3
 8008902:	f7fe fd1a 	bl	800733a <USBD_LL_DataOutStage>
}
 8008906:	bf00      	nop
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	460b      	mov	r3, r1
 8008918:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008920:	78fa      	ldrb	r2, [r7, #3]
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4613      	mov	r3, r2
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	1a9b      	subs	r3, r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	3348      	adds	r3, #72	; 0x48
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	78fb      	ldrb	r3, [r7, #3]
 8008934:	4619      	mov	r1, r3
 8008936:	f7fe fd63 	bl	8007400 <USBD_LL_DataInStage>
}
 800893a:	bf00      	nop
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe fe77 	bl	8007644 <USBD_LL_SOF>
}
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008966:	2301      	movs	r3, #1
 8008968:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008972:	2300      	movs	r3, #0
 8008974:	73fb      	strb	r3, [r7, #15]
 8008976:	e008      	b.n	800898a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	2b02      	cmp	r3, #2
 800897e:	d102      	bne.n	8008986 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008980:	2301      	movs	r3, #1
 8008982:	73fb      	strb	r3, [r7, #15]
 8008984:	e001      	b.n	800898a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008986:	f7f8 fc87 	bl	8001298 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008990:	7bfa      	ldrb	r2, [r7, #15]
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f7fe fe17 	bl	80075c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fe fdc3 	bl	800752c <USBD_LL_Reset>
}
 80089a6:	bf00      	nop
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe fe12 	bl	80075e8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	6812      	ldr	r2, [r2, #0]
 80089d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089d6:	f043 0301 	orr.w	r3, r3, #1
 80089da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d005      	beq.n	80089f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089e4:	4b04      	ldr	r3, [pc, #16]	; (80089f8 <HAL_PCD_SuspendCallback+0x48>)
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	4a03      	ldr	r2, [pc, #12]	; (80089f8 <HAL_PCD_SuspendCallback+0x48>)
 80089ea:	f043 0306 	orr.w	r3, r3, #6
 80089ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	e000ed00 	.word	0xe000ed00

080089fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fe02 	bl	8007614 <USBD_LL_Resume>
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fe50 	bl	80076d4 <USBD_LL_IsoOUTIncomplete>
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	4611      	mov	r1, r2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe fe18 	bl	8007688 <USBD_LL_IsoINIncomplete>
}
 8008a58:	bf00      	nop
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fe56 	bl	8007720 <USBD_LL_DevConnected>
}
 8008a74:	bf00      	nop
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fe53 	bl	8007736 <USBD_LL_DevDisconnected>
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d13c      	bne.n	8008b22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008aa8:	4a20      	ldr	r2, [pc, #128]	; (8008b2c <USBD_LL_Init+0x94>)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a1e      	ldr	r2, [pc, #120]	; (8008b2c <USBD_LL_Init+0x94>)
 8008ab4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ab8:	4b1c      	ldr	r3, [pc, #112]	; (8008b2c <USBD_LL_Init+0x94>)
 8008aba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008abe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ac0:	4b1a      	ldr	r3, [pc, #104]	; (8008b2c <USBD_LL_Init+0x94>)
 8008ac2:	2204      	movs	r2, #4
 8008ac4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ac6:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <USBD_LL_Init+0x94>)
 8008ac8:	2202      	movs	r2, #2
 8008aca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008acc:	4b17      	ldr	r3, [pc, #92]	; (8008b2c <USBD_LL_Init+0x94>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ad2:	4b16      	ldr	r3, [pc, #88]	; (8008b2c <USBD_LL_Init+0x94>)
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ad8:	4b14      	ldr	r3, [pc, #80]	; (8008b2c <USBD_LL_Init+0x94>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ade:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <USBD_LL_Init+0x94>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ae4:	4b11      	ldr	r3, [pc, #68]	; (8008b2c <USBD_LL_Init+0x94>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008aea:	4b10      	ldr	r3, [pc, #64]	; (8008b2c <USBD_LL_Init+0x94>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008af0:	4b0e      	ldr	r3, [pc, #56]	; (8008b2c <USBD_LL_Init+0x94>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008af6:	480d      	ldr	r0, [pc, #52]	; (8008b2c <USBD_LL_Init+0x94>)
 8008af8:	f7fa ff01 	bl	80038fe <HAL_PCD_Init>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b02:	f7f8 fbc9 	bl	8001298 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b06:	2180      	movs	r1, #128	; 0x80
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <USBD_LL_Init+0x94>)
 8008b0a:	f7fc f85e 	bl	8004bca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b0e:	2240      	movs	r2, #64	; 0x40
 8008b10:	2100      	movs	r1, #0
 8008b12:	4806      	ldr	r0, [pc, #24]	; (8008b2c <USBD_LL_Init+0x94>)
 8008b14:	f7fc f812 	bl	8004b3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b18:	2280      	movs	r2, #128	; 0x80
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	4803      	ldr	r0, [pc, #12]	; (8008b2c <USBD_LL_Init+0x94>)
 8008b1e:	f7fc f80d 	bl	8004b3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20001e30 	.word	0x20001e30

08008b30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fa fff6 	bl	8003b38 <HAL_PCD_Start>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f942 	bl	8008ddc <USBD_Get_USB_Status>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	4608      	mov	r0, r1
 8008b70:	4611      	mov	r1, r2
 8008b72:	461a      	mov	r2, r3
 8008b74:	4603      	mov	r3, r0
 8008b76:	70fb      	strb	r3, [r7, #3]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70bb      	strb	r3, [r7, #2]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b8e:	78bb      	ldrb	r3, [r7, #2]
 8008b90:	883a      	ldrh	r2, [r7, #0]
 8008b92:	78f9      	ldrb	r1, [r7, #3]
 8008b94:	f7fb fbda 	bl	800434c <HAL_PCD_EP_Open>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 f91c 	bl	8008ddc <USBD_Get_USB_Status>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	460b      	mov	r3, r1
 8008bbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bcc:	78fa      	ldrb	r2, [r7, #3]
 8008bce:	4611      	mov	r1, r2
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fb fc23 	bl	800441c <HAL_PCD_EP_Close>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 f8fd 	bl	8008ddc <USBD_Get_USB_Status>
 8008be2:	4603      	mov	r3, r0
 8008be4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c0a:	78fa      	ldrb	r2, [r7, #3]
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fb fcfb 	bl	800460a <HAL_PCD_EP_SetStall>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 f8de 	bl	8008ddc <USBD_Get_USB_Status>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c48:	78fa      	ldrb	r2, [r7, #3]
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fb fd40 	bl	80046d2 <HAL_PCD_EP_ClrStall>
 8008c52:	4603      	mov	r3, r0
 8008c54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 f8bf 	bl	8008ddc <USBD_Get_USB_Status>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	da0b      	bge.n	8008ca0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c8e:	68f9      	ldr	r1, [r7, #12]
 8008c90:	4613      	mov	r3, r2
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	333e      	adds	r3, #62	; 0x3e
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	e00b      	b.n	8008cb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ca6:	68f9      	ldr	r1, [r7, #12]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	1a9b      	subs	r3, r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	440b      	add	r3, r1
 8008cb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008cb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cde:	78fa      	ldrb	r2, [r7, #3]
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fb fb0d 	bl	8004302 <HAL_PCD_SetAddress>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 f874 	bl	8008ddc <USBD_Get_USB_Status>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d20:	7af9      	ldrb	r1, [r7, #11]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	f7fb fc26 	bl	8004576 <HAL_PCD_EP_Transmit>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 f853 	bl	8008ddc <USBD_Get_USB_Status>
 8008d36:	4603      	mov	r3, r0
 8008d38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	607a      	str	r2, [r7, #4]
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	460b      	mov	r3, r1
 8008d52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d62:	7af9      	ldrb	r1, [r7, #11]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	f7fb fba2 	bl	80044b0 <HAL_PCD_EP_Receive>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 f832 	bl	8008ddc <USBD_Get_USB_Status>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	460b      	mov	r3, r1
 8008d90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d98:	78fa      	ldrb	r2, [r7, #3]
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fb fbd2 	bl	8004546 <HAL_PCD_EP_GetRxCount>
 8008da2:	4603      	mov	r3, r0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008db4:	4b03      	ldr	r3, [pc, #12]	; (8008dc4 <USBD_static_malloc+0x18>)
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	200005ac 	.word	0x200005ac

08008dc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]

}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d817      	bhi.n	8008e20 <USBD_Get_USB_Status+0x44>
 8008df0:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <USBD_Get_USB_Status+0x1c>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e09 	.word	0x08008e09
 8008dfc:	08008e0f 	.word	0x08008e0f
 8008e00:	08008e15 	.word	0x08008e15
 8008e04:	08008e1b 	.word	0x08008e1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0c:	e00b      	b.n	8008e26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	73fb      	strb	r3, [r7, #15]
    break;
 8008e12:	e008      	b.n	8008e26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
    break;
 8008e18:	e005      	b.n	8008e26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1e:	e002      	b.n	8008e26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e20:	2303      	movs	r3, #3
 8008e22:	73fb      	strb	r3, [r7, #15]
    break;
 8008e24:	bf00      	nop
  }
  return usb_status;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <__libc_init_array>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	4d0d      	ldr	r5, [pc, #52]	; (8008e6c <__libc_init_array+0x38>)
 8008e38:	4c0d      	ldr	r4, [pc, #52]	; (8008e70 <__libc_init_array+0x3c>)
 8008e3a:	1b64      	subs	r4, r4, r5
 8008e3c:	10a4      	asrs	r4, r4, #2
 8008e3e:	2600      	movs	r6, #0
 8008e40:	42a6      	cmp	r6, r4
 8008e42:	d109      	bne.n	8008e58 <__libc_init_array+0x24>
 8008e44:	4d0b      	ldr	r5, [pc, #44]	; (8008e74 <__libc_init_array+0x40>)
 8008e46:	4c0c      	ldr	r4, [pc, #48]	; (8008e78 <__libc_init_array+0x44>)
 8008e48:	f000 f82e 	bl	8008ea8 <_init>
 8008e4c:	1b64      	subs	r4, r4, r5
 8008e4e:	10a4      	asrs	r4, r4, #2
 8008e50:	2600      	movs	r6, #0
 8008e52:	42a6      	cmp	r6, r4
 8008e54:	d105      	bne.n	8008e62 <__libc_init_array+0x2e>
 8008e56:	bd70      	pop	{r4, r5, r6, pc}
 8008e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e5c:	4798      	blx	r3
 8008e5e:	3601      	adds	r6, #1
 8008e60:	e7ee      	b.n	8008e40 <__libc_init_array+0xc>
 8008e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e66:	4798      	blx	r3
 8008e68:	3601      	adds	r6, #1
 8008e6a:	e7f2      	b.n	8008e52 <__libc_init_array+0x1e>
 8008e6c:	08009d8c 	.word	0x08009d8c
 8008e70:	08009d8c 	.word	0x08009d8c
 8008e74:	08009d8c 	.word	0x08009d8c
 8008e78:	08009d90 	.word	0x08009d90

08008e7c <memcpy>:
 8008e7c:	440a      	add	r2, r1
 8008e7e:	4291      	cmp	r1, r2
 8008e80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e84:	d100      	bne.n	8008e88 <memcpy+0xc>
 8008e86:	4770      	bx	lr
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e92:	4291      	cmp	r1, r2
 8008e94:	d1f9      	bne.n	8008e8a <memcpy+0xe>
 8008e96:	bd10      	pop	{r4, pc}

08008e98 <memset>:
 8008e98:	4402      	add	r2, r0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d100      	bne.n	8008ea2 <memset+0xa>
 8008ea0:	4770      	bx	lr
 8008ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ea6:	e7f9      	b.n	8008e9c <memset+0x4>

08008ea8 <_init>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	bf00      	nop
 8008eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eae:	bc08      	pop	{r3}
 8008eb0:	469e      	mov	lr, r3
 8008eb2:	4770      	bx	lr

08008eb4 <_fini>:
 8008eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb6:	bf00      	nop
 8008eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eba:	bc08      	pop	{r3}
 8008ebc:	469e      	mov	lr, r3
 8008ebe:	4770      	bx	lr
