
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a11c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b068  0800b068  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b068  0800b068  0001b068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b070  0800b070  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b074  0800b074  0001b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          000020bc  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200022ac  200022ac  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f862  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dd2  00000000  00000000  0003fa82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00043858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00044868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000062dc  00000000  00000000  00045718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160f0  00000000  00000000  0004b9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8e56  00000000  00000000  00061ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012a93a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045a8  00000000  00000000  0012a990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f0 	.word	0x200001f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a28c 	.word	0x0800a28c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f4 	.word	0x200001f4
 80001c4:	0800a28c 	.word	0x0800a28c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <float_temp_to_char_temp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#if defined(MLX90614) || defined(MLX90632)
	void float_temp_to_char_temp(double digit, char* arr)
	{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e92:	6078      	str	r0, [r7, #4]
		int l_digit = digit * 100.0;
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	4b3f      	ldr	r3, [pc, #252]	; (8000f98 <float_temp_to_char_temp+0x110>)
 8000e9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e9e:	f7ff fb4f 	bl	8000540 <__aeabi_dmul>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fdf9 	bl	8000aa0 <__aeabi_d2iz>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	617b      	str	r3, [r7, #20]
		arr[7] = '\0';
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3307      	adds	r3, #7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
		arr[6] = '\0';
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3306      	adds	r3, #6
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
		arr[5] = '\0';
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3305      	adds	r3, #5
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
		arr[4] = l_digit % 10 + '0';
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000ece:	fb83 1302 	smull	r1, r3, r3, r2
 8000ed2:	1099      	asrs	r1, r3, #2
 8000ed4:	17d3      	asrs	r3, r2, #31
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	440b      	add	r3, r1
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	1ad1      	subs	r1, r2, r3
 8000ee2:	b2ca      	uxtb	r2, r1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	3230      	adds	r2, #48	; 0x30
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
		l_digit /= 10;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef6:	1092      	asrs	r2, r2, #2
 8000ef8:	17db      	asrs	r3, r3, #31
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
		arr[3] = l_digit % 10 + '0';
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f02:	fb83 1302 	smull	r1, r3, r3, r2
 8000f06:	1099      	asrs	r1, r3, #2
 8000f08:	17d3      	asrs	r3, r2, #31
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	1ad1      	subs	r1, r2, r3
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3303      	adds	r3, #3
 8000f1c:	3230      	adds	r2, #48	; 0x30
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	701a      	strb	r2, [r3, #0]
		l_digit /= 10;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f26:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2a:	1092      	asrs	r2, r2, #2
 8000f2c:	17db      	asrs	r3, r3, #31
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
		arr[2] = ',';
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3302      	adds	r3, #2
 8000f36:	222c      	movs	r2, #44	; 0x2c
 8000f38:	701a      	strb	r2, [r3, #0]
		arr[1] = l_digit % 10 + '0';
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f3e:	fb83 1302 	smull	r1, r3, r3, r2
 8000f42:	1099      	asrs	r1, r3, #2
 8000f44:	17d3      	asrs	r3, r2, #31
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	460b      	mov	r3, r1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	1ad1      	subs	r1, r2, r3
 8000f52:	b2ca      	uxtb	r2, r1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	3230      	adds	r2, #48	; 0x30
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	701a      	strb	r2, [r3, #0]
		l_digit /= 10;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f62:	fb82 1203 	smull	r1, r2, r2, r3
 8000f66:	1092      	asrs	r2, r2, #2
 8000f68:	17db      	asrs	r3, r3, #31
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
		arr[0] = l_digit % 10 + '0';
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f72:	fb83 1302 	smull	r1, r3, r3, r2
 8000f76:	1099      	asrs	r1, r3, #2
 8000f78:	17d3      	asrs	r3, r2, #31
 8000f7a:	1ac9      	subs	r1, r1, r3
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	1ad1      	subs	r1, r2, r3
 8000f86:	b2cb      	uxtb	r3, r1
 8000f88:	3330      	adds	r3, #48	; 0x30
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	701a      	strb	r2, [r3, #0]
	}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40590000 	.word	0x40590000
 8000f9c:	66666667 	.word	0x66666667

08000fa0 <mlx90632_read_eeprom>:
#endif

#if defined(MLX90632)
static int mlx90632_read_eeprom(int32_t *PR, int32_t *PG, int32_t *PO, int32_t *PT, int32_t *Ea, int32_t *Eb, int32_t *Fa, int32_t *Fb, int32_t *Ga, int16_t *Gb, int16_t *Ha, int16_t *Hb, int16_t *Ka, I2C_HandleTypeDef hi2c)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09a      	sub	sp, #104	; 0x68
 8000fa4:	af14      	add	r7, sp, #80	; 0x50
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
    int32_t ret;
    ret = mlx90632_i2c_read32(MLX90632_EE_P_R, (uint32_t *) PR, hi2c);
 8000fae:	4668      	mov	r0, sp
 8000fb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb4:	224c      	movs	r2, #76	; 0x4c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f009 f86a 	bl	800a090 <memcpy>
 8000fbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fc0:	cb0c      	ldmia	r3, {r2, r3}
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f242 400c 	movw	r0, #9228	; 0x240c
 8000fc8:	f001 f9a3 	bl	8002312 <mlx90632_i2c_read32>
 8000fcc:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	da01      	bge.n	8000fd8 <mlx90632_read_eeprom+0x38>
        return ret;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	e0fc      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_G, (uint32_t *) PG, hi2c);
 8000fd8:	4668      	mov	r0, sp
 8000fda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fde:	224c      	movs	r2, #76	; 0x4c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f009 f855 	bl	800a090 <memcpy>
 8000fe6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fea:	cb0c      	ldmia	r3, {r2, r3}
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	f242 400e 	movw	r0, #9230	; 0x240e
 8000ff2:	f001 f98e 	bl	8002312 <mlx90632_i2c_read32>
 8000ff6:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da01      	bge.n	8001002 <mlx90632_read_eeprom+0x62>
        return ret;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	e0e7      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_O, (uint32_t *) PO, hi2c);
 8001002:	4668      	mov	r0, sp
 8001004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001008:	224c      	movs	r2, #76	; 0x4c
 800100a:	4619      	mov	r1, r3
 800100c:	f009 f840 	bl	800a090 <memcpy>
 8001010:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001014:	cb0c      	ldmia	r3, {r2, r3}
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f242 4012 	movw	r0, #9234	; 0x2412
 800101c:	f001 f979 	bl	8002312 <mlx90632_i2c_read32>
 8001020:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	da01      	bge.n	800102c <mlx90632_read_eeprom+0x8c>
        return ret;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	e0d2      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_T, (uint32_t *) PT, hi2c);
 800102c:	4668      	mov	r0, sp
 800102e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001032:	224c      	movs	r2, #76	; 0x4c
 8001034:	4619      	mov	r1, r3
 8001036:	f009 f82b 	bl	800a090 <memcpy>
 800103a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800103e:	cb0c      	ldmia	r3, {r2, r3}
 8001040:	6839      	ldr	r1, [r7, #0]
 8001042:	f242 4010 	movw	r0, #9232	; 0x2410
 8001046:	f001 f964 	bl	8002312 <mlx90632_i2c_read32>
 800104a:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	da01      	bge.n	8001056 <mlx90632_read_eeprom+0xb6>
        return ret;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	e0bd      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ea, (uint32_t *) Ea, hi2c);
 8001056:	4668      	mov	r0, sp
 8001058:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800105c:	224c      	movs	r2, #76	; 0x4c
 800105e:	4619      	mov	r1, r3
 8001060:	f009 f816 	bl	800a090 <memcpy>
 8001064:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001068:	cb0c      	ldmia	r3, {r2, r3}
 800106a:	6a39      	ldr	r1, [r7, #32]
 800106c:	f242 4024 	movw	r0, #9252	; 0x2424
 8001070:	f001 f94f 	bl	8002312 <mlx90632_i2c_read32>
 8001074:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	da01      	bge.n	8001080 <mlx90632_read_eeprom+0xe0>
        return ret;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	e0a8      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Eb, (uint32_t *) Eb, hi2c);
 8001080:	4668      	mov	r0, sp
 8001082:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001086:	224c      	movs	r2, #76	; 0x4c
 8001088:	4619      	mov	r1, r3
 800108a:	f009 f801 	bl	800a090 <memcpy>
 800108e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001092:	cb0c      	ldmia	r3, {r2, r3}
 8001094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001096:	f242 4026 	movw	r0, #9254	; 0x2426
 800109a:	f001 f93a 	bl	8002312 <mlx90632_i2c_read32>
 800109e:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	da01      	bge.n	80010aa <mlx90632_read_eeprom+0x10a>
        return ret;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	e093      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fa, (uint32_t *) Fa, hi2c);
 80010aa:	4668      	mov	r0, sp
 80010ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b0:	224c      	movs	r2, #76	; 0x4c
 80010b2:	4619      	mov	r1, r3
 80010b4:	f008 ffec 	bl	800a090 <memcpy>
 80010b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010bc:	cb0c      	ldmia	r3, {r2, r3}
 80010be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010c0:	f242 4028 	movw	r0, #9256	; 0x2428
 80010c4:	f001 f925 	bl	8002312 <mlx90632_i2c_read32>
 80010c8:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	da01      	bge.n	80010d4 <mlx90632_read_eeprom+0x134>
        return ret;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	e07e      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fb, (uint32_t *) Fb, hi2c);
 80010d4:	4668      	mov	r0, sp
 80010d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010da:	224c      	movs	r2, #76	; 0x4c
 80010dc:	4619      	mov	r1, r3
 80010de:	f008 ffd7 	bl	800a090 <memcpy>
 80010e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010e6:	cb0c      	ldmia	r3, {r2, r3}
 80010e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010ea:	f242 402a 	movw	r0, #9258	; 0x242a
 80010ee:	f001 f910 	bl	8002312 <mlx90632_i2c_read32>
 80010f2:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da01      	bge.n	80010fe <mlx90632_read_eeprom+0x15e>
        return ret;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	e069      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ga, (uint32_t *) Ga, hi2c);
 80010fe:	4668      	mov	r0, sp
 8001100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001104:	224c      	movs	r2, #76	; 0x4c
 8001106:	4619      	mov	r1, r3
 8001108:	f008 ffc2 	bl	800a090 <memcpy>
 800110c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001110:	cb0c      	ldmia	r3, {r2, r3}
 8001112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001114:	f242 402c 	movw	r0, #9260	; 0x242c
 8001118:	f001 f8fb 	bl	8002312 <mlx90632_i2c_read32>
 800111c:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2b00      	cmp	r3, #0
 8001122:	da01      	bge.n	8001128 <mlx90632_read_eeprom+0x188>
        return ret;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	e054      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Gb, (uint16_t *) Gb, hi2c);
 8001128:	4668      	mov	r0, sp
 800112a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800112e:	224c      	movs	r2, #76	; 0x4c
 8001130:	4619      	mov	r1, r3
 8001132:	f008 ffad 	bl	800a090 <memcpy>
 8001136:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800113a:	cb0c      	ldmia	r3, {r2, r3}
 800113c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800113e:	f242 402e 	movw	r0, #9262	; 0x242e
 8001142:	f001 f8b9 	bl	80022b8 <mlx90632_i2c_read>
 8001146:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b00      	cmp	r3, #0
 800114c:	da01      	bge.n	8001152 <mlx90632_read_eeprom+0x1b2>
        return ret;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	e03f      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Ha, (uint16_t *) Ha, hi2c);
 8001152:	4668      	mov	r0, sp
 8001154:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001158:	224c      	movs	r2, #76	; 0x4c
 800115a:	4619      	mov	r1, r3
 800115c:	f008 ff98 	bl	800a090 <memcpy>
 8001160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001164:	cb0c      	ldmia	r3, {r2, r3}
 8001166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001168:	f242 4081 	movw	r0, #9345	; 0x2481
 800116c:	f001 f8a4 	bl	80022b8 <mlx90632_i2c_read>
 8001170:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	da01      	bge.n	800117c <mlx90632_read_eeprom+0x1dc>
        return ret;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	e02a      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Hb, (uint16_t *) Hb, hi2c);
 800117c:	4668      	mov	r0, sp
 800117e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001182:	224c      	movs	r2, #76	; 0x4c
 8001184:	4619      	mov	r1, r3
 8001186:	f008 ff83 	bl	800a090 <memcpy>
 800118a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800118e:	cb0c      	ldmia	r3, {r2, r3}
 8001190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001192:	f242 4082 	movw	r0, #9346	; 0x2482
 8001196:	f001 f88f 	bl	80022b8 <mlx90632_i2c_read>
 800119a:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	da01      	bge.n	80011a6 <mlx90632_read_eeprom+0x206>
        return ret;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	e015      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Ka, (uint16_t *) Ka, hi2c);
 80011a6:	4668      	mov	r0, sp
 80011a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ac:	224c      	movs	r2, #76	; 0x4c
 80011ae:	4619      	mov	r1, r3
 80011b0:	f008 ff6e 	bl	800a090 <memcpy>
 80011b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011b8:	cb0c      	ldmia	r3, {r2, r3}
 80011ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80011bc:	f242 402f 	movw	r0, #9263	; 0x242f
 80011c0:	f001 f87a 	bl	80022b8 <mlx90632_i2c_read>
 80011c4:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da01      	bge.n	80011d0 <mlx90632_read_eeprom+0x230>
        return ret;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	e000      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	0000      	movs	r0, r0
 80011dc:	0000      	movs	r0, r0
	...

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e4:	b0b8      	sub	sp, #224	; 0xe0
 80011e6:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e8:	f001 fe90 	bl	8002f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ec:	f000 f9c8 	bl	8001580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f0:	f000 fab8 	bl	8001764 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011f4:	f000 fa2c 	bl	8001650 <MX_I2C1_Init>
  MX_I2C2_Init();
 80011f8:	f000 fa58 	bl	80016ac <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 80011fc:	f008 fa14 	bl	8009628 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 8001200:	f000 fa82 	bl	8001708 <MX_I2C3_Init>
#endif

  // Initialize Display
#ifdef SSD1306_DISPLAY
  {
	  if (SSD1306_Init(hi2c3) != 1)
 8001204:	4cd0      	ldr	r4, [pc, #832]	; (8001548 <main+0x368>)
 8001206:	4668      	mov	r0, sp
 8001208:	f104 0310 	add.w	r3, r4, #16
 800120c:	2244      	movs	r2, #68	; 0x44
 800120e:	4619      	mov	r1, r3
 8001210:	f008 ff3e 	bl	800a090 <memcpy>
 8001214:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001218:	f001 f8e8 	bl	80023ec <SSD1306_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d00d      	beq.n	800123e <main+0x5e>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001222:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001226:	48c9      	ldr	r0, [pc, #804]	; (800154c <main+0x36c>)
 8001228:	f002 f9e5 	bl	80035f6 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 800122c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001230:	f001 fede 	bl	8002ff0 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001234:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001238:	48c4      	ldr	r0, [pc, #784]	; (800154c <main+0x36c>)
 800123a:	f002 f9dc 	bl	80035f6 <HAL_GPIO_TogglePin>
	  }

	  SSD1306_GotoXY (0,0);
 800123e:	2100      	movs	r1, #0
 8001240:	2000      	movs	r0, #0
 8001242:	f001 fbb1 	bl	80029a8 <SSD1306_GotoXY>
	  SSD1306_Puts ("initialize", &Font_11x18, 1);
 8001246:	2201      	movs	r2, #1
 8001248:	49c1      	ldr	r1, [pc, #772]	; (8001550 <main+0x370>)
 800124a:	48c2      	ldr	r0, [pc, #776]	; (8001554 <main+0x374>)
 800124c:	f001 fc42 	bl	8002ad4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001250:	f001 fae2 	bl	8002818 <SSD1306_UpdateScreen>
  }
#endif

  HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, 0x3a << 1, 1, 100);
 8001254:	2364      	movs	r3, #100	; 0x64
 8001256:	2201      	movs	r2, #1
 8001258:	2174      	movs	r1, #116	; 0x74
 800125a:	48bf      	ldr	r0, [pc, #764]	; (8001558 <main+0x378>)
 800125c:	f002 ff48 	bl	80040f0 <HAL_I2C_IsDeviceReady>
 8001260:	4603      	mov	r3, r0
 8001262:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

  if (result == HAL_OK) {
 8001266:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800126a:	2b00      	cmp	r3, #0
 800126c:	d120      	bne.n	80012b0 <main+0xd0>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800126e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001272:	48b6      	ldr	r0, [pc, #728]	; (800154c <main+0x36c>)
 8001274:	f002 f9bf 	bl	80035f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800127c:	f001 feb8 	bl	8002ff0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001284:	48b1      	ldr	r0, [pc, #708]	; (800154c <main+0x36c>)
 8001286:	f002 f9b6 	bl	80035f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800128a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128e:	f001 feaf 	bl	8002ff0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001296:	48ad      	ldr	r0, [pc, #692]	; (800154c <main+0x36c>)
 8001298:	f002 f9ad 	bl	80035f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800129c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a0:	f001 fea6 	bl	8002ff0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80012a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a8:	48a8      	ldr	r0, [pc, #672]	; (800154c <main+0x36c>)
 80012aa:	f002 f9a4 	bl	80035f6 <HAL_GPIO_TogglePin>
 80012ae:	e01f      	b.n	80012f0 <main+0x110>
  } else {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80012b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b4:	48a5      	ldr	r0, [pc, #660]	; (800154c <main+0x36c>)
 80012b6:	f002 f99e 	bl	80035f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80012ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012be:	f001 fe97 	bl	8002ff0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80012c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012c6:	48a1      	ldr	r0, [pc, #644]	; (800154c <main+0x36c>)
 80012c8:	f002 f995 	bl	80035f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80012cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d0:	f001 fe8e 	bl	8002ff0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80012d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d8:	489c      	ldr	r0, [pc, #624]	; (800154c <main+0x36c>)
 80012da:	f002 f98c 	bl	80035f6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80012de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e2:	f001 fe85 	bl	8002ff0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80012e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ea:	4898      	ldr	r0, [pc, #608]	; (800154c <main+0x36c>)
 80012ec:	f002 f983 	bl	80035f6 <HAL_GPIO_TogglePin>
//  SSD1306_Puts (ch, &Font_11x18, 1);
//  SSD1306_UpdateScreen();
//
//  return 0;

    uint16_t mlx_addr_1 = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    uint16_t mlx_addr_2 = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    float float_temp_1 = 0.0;
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	65fb      	str	r3, [r7, #92]	; 0x5c
    float float_temp_2 = 0.0;
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	65bb      	str	r3, [r7, #88]	; 0x58

#if defined(MLX90614)
    mlx_addr_1 = device_scanner(hi2c1);
    mlx_addr_2 = device_scanner(hi2c2);
#elif defined(MLX90632)
    mlx_addr_1 = 0x3a << 1;
 8001308:	2374      	movs	r3, #116	; 0x74
 800130a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    mlx_addr_2 = 0x3a << 1;
 800130e:	2374      	movs	r3, #116	; 0x74
 8001310:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    float pre_ambient, pre_object, ambient, object;

    int32_t
            PR = 0x00587f5b, PG = 0x04a10289, PT = 0xfff966f8, PO = 0x00001e0f,
 8001314:	4b91      	ldr	r3, [pc, #580]	; (800155c <main+0x37c>)
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
 8001318:	4b91      	ldr	r3, [pc, #580]	; (8001560 <main+0x380>)
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
 800131c:	4b91      	ldr	r3, [pc, #580]	; (8001564 <main+0x384>)
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001320:	f641 630f 	movw	r3, #7695	; 0x1e0f
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
            Ea = 4859535, Eb = 5686508, Fa = 53855361, Fb = 42874149,
 8001326:	4b90      	ldr	r3, [pc, #576]	; (8001568 <main+0x388>)
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
 800132a:	4b90      	ldr	r3, [pc, #576]	; (800156c <main+0x38c>)
 800132c:	623b      	str	r3, [r7, #32]
 800132e:	4b90      	ldr	r3, [pc, #576]	; (8001570 <main+0x390>)
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	4b90      	ldr	r3, [pc, #576]	; (8001574 <main+0x394>)
 8001334:	61bb      	str	r3, [r7, #24]
            Ga = -14556410;
 8001336:	4b90      	ldr	r3, [pc, #576]	; (8001578 <main+0x398>)
 8001338:	617b      	str	r3, [r7, #20]
    int16_t
            Gb = 9728, Ha = 16384, Hb = 0, Ka = 10752,
 800133a:	f44f 5318 	mov.w	r3, #9728	; 0x2600
 800133e:	827b      	strh	r3, [r7, #18]
 8001340:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001344:	823b      	strh	r3, [r7, #16]
 8001346:	2300      	movs	r3, #0
 8001348:	81fb      	strh	r3, [r7, #14]
 800134a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800134e:	81bb      	strh	r3, [r7, #12]
            ambient_new_raw, ambient_old_raw, object_new_raw, object_old_raw;

    mlx90632_read_eeprom(&PR, &PG, &PO, &PT, &Ea, &Eb, &Fa, &Fb, &Ga, &Gb, &Ha, &Hb, &Ka, hi2c1);
 8001350:	f107 082c 	add.w	r8, r7, #44	; 0x2c
 8001354:	f107 0628 	add.w	r6, r7, #40	; 0x28
 8001358:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800135c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001360:	4a7d      	ldr	r2, [pc, #500]	; (8001558 <main+0x378>)
 8001362:	ab09      	add	r3, sp, #36	; 0x24
 8001364:	4611      	mov	r1, r2
 8001366:	2254      	movs	r2, #84	; 0x54
 8001368:	4618      	mov	r0, r3
 800136a:	f008 fe91 	bl	800a090 <memcpy>
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	9308      	str	r3, [sp, #32]
 8001374:	f107 030e 	add.w	r3, r7, #14
 8001378:	9307      	str	r3, [sp, #28]
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	9306      	str	r3, [sp, #24]
 8001380:	f107 0312 	add.w	r3, r7, #18
 8001384:	9305      	str	r3, [sp, #20]
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	9304      	str	r3, [sp, #16]
 800138c:	f107 0318 	add.w	r3, r7, #24
 8001390:	9303      	str	r3, [sp, #12]
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	f107 0320 	add.w	r3, r7, #32
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4643      	mov	r3, r8
 80013a6:	4632      	mov	r2, r6
 80013a8:	4629      	mov	r1, r5
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff fdf8 	bl	8000fa0 <mlx90632_read_eeprom>
#endif

#ifdef SSD1306_DISPLAY
    SSD1306_Clear();
 80013b0:	f001 fbb5 	bl	8002b1e <SSD1306_Clear>
	float_temp_2 = MLX90614_ReadTemp(mlx_addr_2, MLX90614_TOBJ1, hi2c2);

	float_temp_to_char_temp(float_temp_1, char_temp_1);
	float_temp_to_char_temp(float_temp_2, char_temp_2);
#elif defined(MLX90632)
	mlx90632_read_temp_raw(&ambient_new_raw, &ambient_old_raw, &object_new_raw, &object_old_raw, hi2c1);
 80013b4:	f107 0804 	add.w	r8, r7, #4
 80013b8:	1dbe      	adds	r6, r7, #6
 80013ba:	f107 0508 	add.w	r5, r7, #8
 80013be:	f107 040a 	add.w	r4, r7, #10
 80013c2:	4a65      	ldr	r2, [pc, #404]	; (8001558 <main+0x378>)
 80013c4:	466b      	mov	r3, sp
 80013c6:	4611      	mov	r1, r2
 80013c8:	2254      	movs	r2, #84	; 0x54
 80013ca:	4618      	mov	r0, r3
 80013cc:	f008 fe60 	bl	800a090 <memcpy>
 80013d0:	4643      	mov	r3, r8
 80013d2:	4632      	mov	r2, r6
 80013d4:	4629      	mov	r1, r5
 80013d6:	4620      	mov	r0, r4
 80013d8:	f000 fbdc 	bl	8001b94 <mlx90632_read_temp_raw>

	pre_ambient = mlx90632_preprocess_temp_ambient(ambient_new_raw, ambient_old_raw, Gb);
 80013dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013e0:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80013e4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fc13 	bl	8001c14 <mlx90632_preprocess_temp_ambient>
 80013ee:	ec53 2b10 	vmov	r2, r3, d0
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fb7b 	bl	8000af0 <__aeabi_d2f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	657b      	str	r3, [r7, #84]	; 0x54
	pre_object = mlx90632_preprocess_temp_object(object_new_raw, object_old_raw, ambient_new_raw, ambient_old_raw, Ka);
 80013fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001402:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001406:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800140a:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 800140e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	4623      	mov	r3, r4
 8001416:	f000 fc63 	bl	8001ce0 <mlx90632_preprocess_temp_object>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fb65 	bl	8000af0 <__aeabi_d2f>
 8001426:	4603      	mov	r3, r0
 8001428:	653b      	str	r3, [r7, #80]	; 0x50

	mlx90632_set_emissivity(0.95);
 800142a:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001540 <main+0x360>
 800142e:	f000 fe99 	bl	8002164 <mlx90632_set_emissivity>

	ambient = mlx90632_calc_temp_ambient(ambient_new_raw, ambient_old_raw, PT, PR, PG, PO, Gb);
 8001432:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8001436:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 800143a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800143c:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001442:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001446:	9102      	str	r1, [sp, #8]
 8001448:	9201      	str	r2, [sp, #4]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	4633      	mov	r3, r6
 800144e:	462a      	mov	r2, r5
 8001450:	4621      	mov	r1, r4
 8001452:	f000 fcb7 	bl	8001dc4 <mlx90632_calc_temp_ambient>
 8001456:	ec53 2b10 	vmov	r2, r3, d0
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fb47 	bl	8000af0 <__aeabi_d2f>
 8001462:	4603      	mov	r3, r0
 8001464:	64fb      	str	r3, [r7, #76]	; 0x4c
	object = mlx90632_calc_temp_object(pre_object, pre_ambient, Ea, Eb, Ga, Fa, Fb, Ha, Hb);
 8001466:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800146a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800146e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001476:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8001478:	6a3e      	ldr	r6, [r7, #32]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	69b9      	ldr	r1, [r7, #24]
 8001480:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
 8001484:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8001488:	9404      	str	r4, [sp, #16]
 800148a:	9003      	str	r0, [sp, #12]
 800148c:	9102      	str	r1, [sp, #8]
 800148e:	9201      	str	r2, [sp, #4]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4633      	mov	r3, r6
 8001494:	462a      	mov	r2, r5
 8001496:	ee17 1a90 	vmov	r1, s15
 800149a:	ee17 0a10 	vmov	r0, s14
 800149e:	f000 fe93 	bl	80021c8 <mlx90632_calc_temp_object>
 80014a2:	ec53 2b10 	vmov	r2, r3, d0
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff fb21 	bl	8000af0 <__aeabi_d2f>
 80014ae:	4603      	mov	r3, r0
 80014b0:	64bb      	str	r3, [r7, #72]	; 0x48

	float_temp_1 = object;
 80014b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014b4:	65fb      	str	r3, [r7, #92]	; 0x5c
	float_temp_to_char_temp(float_temp_1, char_temp_1);
 80014b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80014b8:	f7fe ffea 	bl	8000490 <__aeabi_f2d>
 80014bc:	4604      	mov	r4, r0
 80014be:	460d      	mov	r5, r1
 80014c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014c4:	4618      	mov	r0, r3
 80014c6:	ec45 4b10 	vmov	d0, r4, r5
 80014ca:	f7ff fcdd 	bl	8000e88 <float_temp_to_char_temp>
#endif


	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 80014ce:	2101      	movs	r1, #1
 80014d0:	482a      	ldr	r0, [pc, #168]	; (800157c <main+0x39c>)
 80014d2:	f002 f85f 	bl	8003594 <HAL_GPIO_ReadPin>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d115      	bne.n	8001508 <main+0x328>
	{
#	ifdef SSD1306_DISPLAY
		SSD1306_GotoXY(0, 0);
 80014dc:	2100      	movs	r1, #0
 80014de:	2000      	movs	r0, #0
 80014e0:	f001 fa62 	bl	80029a8 <SSD1306_GotoXY>
		SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 80014e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014e8:	2201      	movs	r2, #1
 80014ea:	4919      	ldr	r1, [pc, #100]	; (8001550 <main+0x370>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 faf1 	bl	8002ad4 <SSD1306_Puts>

		SSD1306_GotoXY(70, 0);
 80014f2:	2100      	movs	r1, #0
 80014f4:	2046      	movs	r0, #70	; 0x46
 80014f6:	f001 fa57 	bl	80029a8 <SSD1306_GotoXY>
		SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 80014fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014fe:	2201      	movs	r2, #1
 8001500:	4913      	ldr	r1, [pc, #76]	; (8001550 <main+0x370>)
 8001502:	4618      	mov	r0, r3
 8001504:	f001 fae6 	bl	8002ad4 <SSD1306_Puts>
		}
#		endif
	}

#ifdef SSD1306_DISPLAY
	SSD1306_GotoXY(0, 29);
 8001508:	211d      	movs	r1, #29
 800150a:	2000      	movs	r0, #0
 800150c:	f001 fa4c 	bl	80029a8 <SSD1306_GotoXY>
	SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 8001510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001514:	2201      	movs	r2, #1
 8001516:	490e      	ldr	r1, [pc, #56]	; (8001550 <main+0x370>)
 8001518:	4618      	mov	r0, r3
 800151a:	f001 fadb 	bl	8002ad4 <SSD1306_Puts>

	SSD1306_GotoXY(70, 29);
 800151e:	211d      	movs	r1, #29
 8001520:	2046      	movs	r0, #70	; 0x46
 8001522:	f001 fa41 	bl	80029a8 <SSD1306_GotoXY>
	SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8001526:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800152a:	2201      	movs	r2, #1
 800152c:	4908      	ldr	r1, [pc, #32]	; (8001550 <main+0x370>)
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fad0 	bl	8002ad4 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8001534:	f001 f970 	bl	8002818 <SSD1306_UpdateScreen>
	mlx90632_read_temp_raw(&ambient_new_raw, &ambient_old_raw, &object_new_raw, &object_old_raw, hi2c1);
 8001538:	e73c      	b.n	80013b4 <main+0x1d4>
 800153a:	bf00      	nop
 800153c:	f3af 8000 	nop.w
 8001540:	66666666 	.word	0x66666666
 8001544:	3fee6666 	.word	0x3fee6666
 8001548:	20000840 	.word	0x20000840
 800154c:	40020c00 	.word	0x40020c00
 8001550:	20000000 	.word	0x20000000
 8001554:	0800a2a4 	.word	0x0800a2a4
 8001558:	20000894 	.word	0x20000894
 800155c:	00587f5b 	.word	0x00587f5b
 8001560:	04a10289 	.word	0x04a10289
 8001564:	fff966f8 	.word	0xfff966f8
 8001568:	004a268f 	.word	0x004a268f
 800156c:	0056c4ec 	.word	0x0056c4ec
 8001570:	0335c481 	.word	0x0335c481
 8001574:	028e3525 	.word	0x028e3525
 8001578:	ff21e306 	.word	0xff21e306
 800157c:	40020000 	.word	0x40020000

08001580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b094      	sub	sp, #80	; 0x50
 8001584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	2230      	movs	r2, #48	; 0x30
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f008 fd8c 	bl	800a0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <SystemClock_Config+0xc8>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a26      	ldr	r2, [pc, #152]	; (8001648 <SystemClock_Config+0xc8>)
 80015ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <SystemClock_Config+0xc8>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <SystemClock_Config+0xcc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a20      	ldr	r2, [pc, #128]	; (800164c <SystemClock_Config+0xcc>)
 80015ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <SystemClock_Config+0xcc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015dc:	2302      	movs	r3, #2
 80015de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e4:	2310      	movs	r3, #16
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e8:	2302      	movs	r3, #2
 80015ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015f0:	2310      	movs	r3, #16
 80015f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80015f4:	23c0      	movs	r3, #192	; 0xc0
 80015f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f8:	2302      	movs	r3, #2
 80015fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015fc:	2304      	movs	r3, #4
 80015fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4618      	mov	r0, r3
 8001606:	f004 fc01 	bl	8005e0c <HAL_RCC_OscConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001610:	f000 f924 	bl	800185c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001614:	230f      	movs	r3, #15
 8001616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f004 fe64 	bl	80062fc <HAL_RCC_ClockConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800163a:	f000 f90f 	bl	800185c <Error_Handler>
  }
}
 800163e:	bf00      	nop
 8001640:	3750      	adds	r7, #80	; 0x50
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40007000 	.word	0x40007000

08001650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001656:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <MX_I2C1_Init+0x54>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_I2C1_Init+0x50>)
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <MX_I2C1_Init+0x58>)
 800165e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_I2C1_Init+0x50>)
 800166e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_I2C1_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_I2C1_Init+0x50>)
 800168e:	f001 ffcd 	bl	800362c <HAL_I2C_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001698:	f000 f8e0 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000894 	.word	0x20000894
 80016a4:	40005400 	.word	0x40005400
 80016a8:	000186a0 	.word	0x000186a0

080016ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_I2C2_Init+0x50>)
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <MX_I2C2_Init+0x54>)
 80016b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_I2C2_Init+0x50>)
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_I2C2_Init+0x58>)
 80016ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_I2C2_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_I2C2_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_I2C2_Init+0x50>)
 80016ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <MX_I2C2_Init+0x50>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_I2C2_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <MX_I2C2_Init+0x50>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_I2C2_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <MX_I2C2_Init+0x50>)
 80016ea:	f001 ff9f 	bl	800362c <HAL_I2C_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016f4:	f000 f8b2 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200008e8 	.word	0x200008e8
 8001700:	40005800 	.word	0x40005800
 8001704:	000186a0 	.word	0x000186a0

08001708 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_I2C3_Init+0x50>)
 800170e:	4a13      	ldr	r2, [pc, #76]	; (800175c <MX_I2C3_Init+0x54>)
 8001710:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_I2C3_Init+0x50>)
 8001714:	4a12      	ldr	r2, [pc, #72]	; (8001760 <MX_I2C3_Init+0x58>)
 8001716:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_I2C3_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_I2C3_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_I2C3_Init+0x50>)
 8001726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <MX_I2C3_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_I2C3_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <MX_I2C3_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_I2C3_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <MX_I2C3_Init+0x50>)
 8001746:	f001 ff71 	bl	800362c <HAL_I2C_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001750:	f000 f884 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000840 	.word	0x20000840
 800175c:	40005c00 	.word	0x40005c00
 8001760:	00061a80 	.word	0x00061a80

08001764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <MX_GPIO_Init+0xec>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a33      	ldr	r2, [pc, #204]	; (8001850 <MX_GPIO_Init+0xec>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <MX_GPIO_Init+0xec>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <MX_GPIO_Init+0xec>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <MX_GPIO_Init+0xec>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <MX_GPIO_Init+0xec>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <MX_GPIO_Init+0xec>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a25      	ldr	r2, [pc, #148]	; (8001850 <MX_GPIO_Init+0xec>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <MX_GPIO_Init+0xec>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_GPIO_Init+0xec>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <MX_GPIO_Init+0xec>)
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <MX_GPIO_Init+0xec>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_GPIO_Init+0xec>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <MX_GPIO_Init+0xec>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_GPIO_Init+0xec>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <MX_GPIO_Init+0xf0>)
 800180e:	f001 fed9 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001812:	2301      	movs	r3, #1
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <MX_GPIO_Init+0xf4>)
 8001826:	f001 fd19 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800182a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4804      	ldr	r0, [pc, #16]	; (8001854 <MX_GPIO_Init+0xf0>)
 8001844:	f001 fd0a 	bl	800325c <HAL_GPIO_Init>

}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	40020c00 	.word	0x40020c00
 8001858:	40020000 	.word	0x40020000

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	e7fe      	b.n	8001864 <Error_Handler+0x8>

08001866 <mlx90632_start_measurement>:
#ifndef STATIC
#define STATIC static
#endif

int mlx90632_start_measurement(I2C_HandleTypeDef hi2c)
{
 8001866:	b084      	sub	sp, #16
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b099      	sub	sp, #100	; 0x64
 800186c:	af14      	add	r7, sp, #80	; 0x50
 800186e:	f107 0420 	add.w	r4, r7, #32
 8001872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int ret, tries = MLX90632_MAX_NUMBER_MESUREMENT_READ_TRIES;
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	60fb      	str	r3, [r7, #12]
    uint16_t reg_status;

    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status, hi2c);
 800187a:	1dbc      	adds	r4, r7, #6
 800187c:	4668      	mov	r0, sp
 800187e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001882:	224c      	movs	r2, #76	; 0x4c
 8001884:	4619      	mov	r1, r3
 8001886:	f008 fc03 	bl	800a090 <memcpy>
 800188a:	f107 0320 	add.w	r3, r7, #32
 800188e:	cb0c      	ldmia	r3, {r2, r3}
 8001890:	4621      	mov	r1, r4
 8001892:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001896:	f000 fd0f 	bl	80022b8 <mlx90632_i2c_read>
 800189a:	60b8      	str	r0, [r7, #8]
    if (ret < 0) {
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da01      	bge.n	80018a6 <mlx90632_start_measurement+0x40>
    	  return ret;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	e047      	b.n	8001936 <mlx90632_start_measurement+0xd0>
    }


    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_status & (~MLX90632_STAT_DATA_RDY), hi2c);
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	b29c      	uxth	r4, r3
 80018ae:	4668      	mov	r0, sp
 80018b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b4:	224c      	movs	r2, #76	; 0x4c
 80018b6:	4619      	mov	r1, r3
 80018b8:	f008 fbea 	bl	800a090 <memcpy>
 80018bc:	f107 0320 	add.w	r3, r7, #32
 80018c0:	cb0c      	ldmia	r3, {r2, r3}
 80018c2:	4621      	mov	r1, r4
 80018c4:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80018c8:	f000 fd53 	bl	8002372 <mlx90632_i2c_write>
 80018cc:	60b8      	str	r0, [r7, #8]
    if (ret < 0){
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da22      	bge.n	800191a <mlx90632_start_measurement+0xb4>
  	  return ret;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	e02e      	b.n	8001936 <mlx90632_start_measurement+0xd0>
  }

    while (tries-- > 0)
    {
        ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status, hi2c);
 80018d8:	1dbc      	adds	r4, r7, #6
 80018da:	4668      	mov	r0, sp
 80018dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e0:	224c      	movs	r2, #76	; 0x4c
 80018e2:	4619      	mov	r1, r3
 80018e4:	f008 fbd4 	bl	800a090 <memcpy>
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	cb0c      	ldmia	r3, {r2, r3}
 80018ee:	4621      	mov	r1, r4
 80018f0:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80018f4:	f000 fce0 	bl	80022b8 <mlx90632_i2c_read>
 80018f8:	60b8      	str	r0, [r7, #8]
        if (ret < 0)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da01      	bge.n	8001904 <mlx90632_start_measurement+0x9e>
            return ret;
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	e018      	b.n	8001936 <mlx90632_start_measurement+0xd0>
        if (reg_status & MLX90632_STAT_DATA_RDY)
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10b      	bne.n	8001926 <mlx90632_start_measurement+0xc0>
            break;
        /* minimum wait time to complete measurement
         * should be calculated according to refresh rate
         * atm 10ms - 11ms
         */
        usleep(10000, 11000);
 800190e:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8001912:	f242 7010 	movw	r0, #10000	; 0x2710
 8001916:	f000 fd56 	bl	80023c6 <usleep>
    while (tries-- > 0)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	60fa      	str	r2, [r7, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	dcd9      	bgt.n	80018d8 <mlx90632_start_measurement+0x72>
 8001924:	e000      	b.n	8001928 <mlx90632_start_measurement+0xc2>
            break;
 8001926:	bf00      	nop
    }

    if (tries < 0)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	da02      	bge.n	8001934 <mlx90632_start_measurement+0xce>
    {
        // data not ready
        return -ETIMEDOUT;
 800192e:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8001932:	e000      	b.n	8001936 <mlx90632_start_measurement+0xd0>
    }

    return (reg_status & MLX90632_STAT_CYCLE_POS) >> 2;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001940:	b004      	add	sp, #16
 8001942:	4770      	bx	lr

08001944 <mlx90632_channel_new_select>:
 *
 * @retval 0 When both memory locations are updated as per ret
 * @retval -EINVAL channel_new and channel_old were not updated
 */
STATIC int32_t mlx90632_channel_new_select(int32_t ret, uint8_t *channel_new, uint8_t *channel_old)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
    switch (ret)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d003      	beq.n	800195e <mlx90632_channel_new_select+0x1a>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d007      	beq.n	800196c <mlx90632_channel_new_select+0x28>
 800195c:	e00d      	b.n	800197a <mlx90632_channel_new_select+0x36>
    {
        case 1:
            *channel_new = 1;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
            *channel_old = 2;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	701a      	strb	r2, [r3, #0]
            break;
 800196a:	e009      	b.n	8001980 <mlx90632_channel_new_select+0x3c>

        case 2:
            *channel_new = 2;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2202      	movs	r2, #2
 8001970:	701a      	strb	r2, [r3, #0]
            *channel_old = 1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
            break;
 8001978:	e002      	b.n	8001980 <mlx90632_channel_new_select+0x3c>

        default:
            return -EINVAL;
 800197a:	f06f 0315 	mvn.w	r3, #21
 800197e:	e000      	b.n	8001982 <mlx90632_channel_new_select+0x3e>
    }
    return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <mlx90632_read_temp_ambient_raw>:
 *
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_ambient_raw(int16_t *ambient_new_raw, int16_t *ambient_old_raw, I2C_HandleTypeDef hi2c)
{
 800198e:	b082      	sub	sp, #8
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b099      	sub	sp, #100	; 0x64
 8001994:	af14      	add	r7, sp, #80	; 0x50
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	f107 0120 	add.w	r1, r7, #32
 800199e:	e881 000c 	stmia.w	r1, {r2, r3}
    int32_t ret;
    uint16_t read_tmp;

    ret = mlx90632_i2c_read(MLX90632_RAM_3(1), &read_tmp, hi2c);
 80019a2:	f107 040a 	add.w	r4, r7, #10
 80019a6:	4668      	mov	r0, sp
 80019a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ac:	224c      	movs	r2, #76	; 0x4c
 80019ae:	4619      	mov	r1, r3
 80019b0:	f008 fb6e 	bl	800a090 <memcpy>
 80019b4:	f107 0320 	add.w	r3, r7, #32
 80019b8:	cb0c      	ldmia	r3, {r2, r3}
 80019ba:	4621      	mov	r1, r4
 80019bc:	f244 0005 	movw	r0, #16389	; 0x4005
 80019c0:	f000 fc7a 	bl	80022b8 <mlx90632_i2c_read>
 80019c4:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da01      	bge.n	80019d0 <mlx90632_read_temp_ambient_raw+0x42>
        return ret;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	e01f      	b.n	8001a10 <mlx90632_read_temp_ambient_raw+0x82>
    *ambient_new_raw = (int16_t)read_tmp;
 80019d0:	897b      	ldrh	r3, [r7, #10]
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_3(2), &read_tmp, hi2c);
 80019d8:	f107 040a 	add.w	r4, r7, #10
 80019dc:	4668      	mov	r0, sp
 80019de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e2:	224c      	movs	r2, #76	; 0x4c
 80019e4:	4619      	mov	r1, r3
 80019e6:	f008 fb53 	bl	800a090 <memcpy>
 80019ea:	f107 0320 	add.w	r3, r7, #32
 80019ee:	cb0c      	ldmia	r3, {r2, r3}
 80019f0:	4621      	mov	r1, r4
 80019f2:	f244 0008 	movw	r0, #16392	; 0x4008
 80019f6:	f000 fc5f 	bl	80022b8 <mlx90632_i2c_read>
 80019fa:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	da01      	bge.n	8001a06 <mlx90632_read_temp_ambient_raw+0x78>
        return ret;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	e004      	b.n	8001a10 <mlx90632_read_temp_ambient_raw+0x82>
    *ambient_old_raw = (int16_t)read_tmp;
 8001a06:	897b      	ldrh	r3, [r7, #10]
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	801a      	strh	r2, [r3, #0]

    return ret;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a1a:	b002      	add	sp, #8
 8001a1c:	4770      	bx	lr

08001a1e <mlx90632_read_temp_object_raw>:
 * @retval 0 Successfully read both values
 * @retval <0 Something went wrong. Check errno.h for more details.
 */
STATIC int32_t mlx90632_read_temp_object_raw(int32_t start_measurement_ret,
                                             int16_t *object_new_raw, int16_t *object_old_raw, I2C_HandleTypeDef hi2c)
{
 8001a1e:	b082      	sub	sp, #8
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b09c      	sub	sp, #112	; 0x70
 8001a24:	af14      	add	r7, sp, #80	; 0x50
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t ret;
    uint16_t read_tmp;
    int16_t read;
    uint8_t channel, channel_old;

    ret = mlx90632_channel_new_select(start_measurement_ret, &channel, &channel_old);
 8001a2e:	f107 0216 	add.w	r2, r7, #22
 8001a32:	f107 0317 	add.w	r3, r7, #23
 8001a36:	4619      	mov	r1, r3
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff ff83 	bl	8001944 <mlx90632_channel_new_select>
 8001a3e:	61f8      	str	r0, [r7, #28]
    if (ret != 0)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <mlx90632_read_temp_object_raw+0x2e>
        return -EINVAL;
 8001a46:	f06f 0315 	mvn.w	r3, #21
 8001a4a:	e09c      	b.n	8001b86 <mlx90632_read_temp_object_raw+0x168>

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel), &read_tmp, hi2c);
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	0052      	lsls	r2, r2, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b21c      	sxth	r4, r3
 8001a62:	f107 0518 	add.w	r5, r7, #24
 8001a66:	4668      	mov	r0, sp
 8001a68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a6c:	224c      	movs	r2, #76	; 0x4c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f008 fb0e 	bl	800a090 <memcpy>
 8001a74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a78:	cb0c      	ldmia	r3, {r2, r3}
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f000 fc1b 	bl	80022b8 <mlx90632_i2c_read>
 8001a82:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da01      	bge.n	8001a8e <mlx90632_read_temp_object_raw+0x70>
        return ret;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	e07b      	b.n	8001b86 <mlx90632_read_temp_object_raw+0x168>

    read = (int16_t)read_tmp;
 8001a8e:	8b3b      	ldrh	r3, [r7, #24]
 8001a90:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel), &read_tmp, hi2c);
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	0052      	lsls	r2, r2, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	b21c      	sxth	r4, r3
 8001aa6:	f107 0518 	add.w	r5, r7, #24
 8001aaa:	4668      	mov	r0, sp
 8001aac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ab0:	224c      	movs	r2, #76	; 0x4c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f008 faec 	bl	800a090 <memcpy>
 8001ab8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001abc:	cb0c      	ldmia	r3, {r2, r3}
 8001abe:	4629      	mov	r1, r5
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f000 fbf9 	bl	80022b8 <mlx90632_i2c_read>
 8001ac6:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da01      	bge.n	8001ad2 <mlx90632_read_temp_object_raw+0xb4>
        return ret;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	e059      	b.n	8001b86 <mlx90632_read_temp_object_raw+0x168>
    *object_new_raw = (read + (int16_t)read_tmp) / 2;
 8001ad2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ad6:	8b3a      	ldrh	r2, [r7, #24]
 8001ad8:	b212      	sxth	r2, r2
 8001ada:	4413      	add	r3, r2
 8001adc:	0fda      	lsrs	r2, r3, #31
 8001ade:	4413      	add	r3, r2
 8001ae0:	105b      	asrs	r3, r3, #1
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(channel_old), &read_tmp, hi2c);
 8001ae8:	7dbb      	ldrb	r3, [r7, #22]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	0052      	lsls	r2, r2, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001af8:	3301      	adds	r3, #1
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	b21c      	sxth	r4, r3
 8001afe:	f107 0518 	add.w	r5, r7, #24
 8001b02:	4668      	mov	r0, sp
 8001b04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b08:	224c      	movs	r2, #76	; 0x4c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f008 fac0 	bl	800a090 <memcpy>
 8001b10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b14:	cb0c      	ldmia	r3, {r2, r3}
 8001b16:	4629      	mov	r1, r5
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f000 fbcd 	bl	80022b8 <mlx90632_i2c_read>
 8001b1e:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	da01      	bge.n	8001b2a <mlx90632_read_temp_object_raw+0x10c>
        return ret;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	e02d      	b.n	8001b86 <mlx90632_read_temp_object_raw+0x168>
    read = (int16_t)read_tmp;
 8001b2a:	8b3b      	ldrh	r3, [r7, #24]
 8001b2c:	837b      	strh	r3, [r7, #26]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(channel_old), &read_tmp, hi2c);
 8001b2e:	7dbb      	ldrb	r3, [r7, #22]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	0052      	lsls	r2, r2, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b21c      	sxth	r4, r3
 8001b42:	f107 0518 	add.w	r5, r7, #24
 8001b46:	4668      	mov	r0, sp
 8001b48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b4c:	224c      	movs	r2, #76	; 0x4c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f008 fa9e 	bl	800a090 <memcpy>
 8001b54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b58:	cb0c      	ldmia	r3, {r2, r3}
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f000 fbab 	bl	80022b8 <mlx90632_i2c_read>
 8001b62:	61f8      	str	r0, [r7, #28]
    if (ret < 0)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da01      	bge.n	8001b6e <mlx90632_read_temp_object_raw+0x150>
        return ret;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	e00b      	b.n	8001b86 <mlx90632_read_temp_object_raw+0x168>
    *object_old_raw = (read + (int16_t)read_tmp) / 2;
 8001b6e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b72:	8b3a      	ldrh	r2, [r7, #24]
 8001b74:	b212      	sxth	r2, r2
 8001b76:	4413      	add	r3, r2
 8001b78:	0fda      	lsrs	r2, r3, #31
 8001b7a:	4413      	add	r3, r2
 8001b7c:	105b      	asrs	r3, r3, #1
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	801a      	strh	r2, [r3, #0]

    return ret;
 8001b84:	69fb      	ldr	r3, [r7, #28]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001b90:	b002      	add	sp, #8
 8001b92:	4770      	bx	lr

08001b94 <mlx90632_read_temp_raw>:

int32_t mlx90632_read_temp_raw(int16_t *ambient_new_raw, int16_t *ambient_old_raw,
                               int16_t *object_new_raw, int16_t *object_old_raw, I2C_HandleTypeDef hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b09a      	sub	sp, #104	; 0x68
 8001b98:	af14      	add	r7, sp, #80	; 0x50
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
    int32_t ret, start_measurement_ret;

    // trigger and wait for measurement to complete
    start_measurement_ret = mlx90632_start_measurement(hi2c);
 8001ba2:	4668      	mov	r0, sp
 8001ba4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ba8:	2244      	movs	r2, #68	; 0x44
 8001baa:	4619      	mov	r1, r3
 8001bac:	f008 fa70 	bl	800a090 <memcpy>
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb6:	f7ff fe56 	bl	8001866 <mlx90632_start_measurement>
 8001bba:	6178      	str	r0, [r7, #20]
    if (start_measurement_ret < 0)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	da01      	bge.n	8001bc6 <mlx90632_read_temp_raw+0x32>
        return start_measurement_ret;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	e022      	b.n	8001c0c <mlx90632_read_temp_raw+0x78>

    /** Read new and old **ambient** values from sensor */
    ret = mlx90632_read_temp_ambient_raw(ambient_new_raw, ambient_old_raw, hi2c);
 8001bc6:	4668      	mov	r0, sp
 8001bc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bcc:	224c      	movs	r2, #76	; 0x4c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f008 fa5e 	bl	800a090 <memcpy>
 8001bd4:	f107 0320 	add.w	r3, r7, #32
 8001bd8:	cb0c      	ldmia	r3, {r2, r3}
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f7ff fed6 	bl	800198e <mlx90632_read_temp_ambient_raw>
 8001be2:	6138      	str	r0, [r7, #16]
    if (ret < 0)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da01      	bge.n	8001bee <mlx90632_read_temp_raw+0x5a>
        return ret;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	e00e      	b.n	8001c0c <mlx90632_read_temp_raw+0x78>

    /** Read new and old **object** values from sensor */
    ret = mlx90632_read_temp_object_raw(start_measurement_ret, object_new_raw, object_old_raw, hi2c);
 8001bee:	4668      	mov	r0, sp
 8001bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf4:	2250      	movs	r2, #80	; 0x50
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f008 fa4a 	bl	800a090 <memcpy>
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff0b 	bl	8001a1e <mlx90632_read_temp_object_raw>
 8001c08:	6138      	str	r0, [r7, #16]

    return ret;
 8001c0a:	693b      	ldr	r3, [r7, #16]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <mlx90632_preprocess_temp_ambient>:
}


/* DSPv5 */
double mlx90632_preprocess_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int16_t Gb)
{
 8001c14:	b5b0      	push	{r4, r5, r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80fb      	strh	r3, [r7, #6]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	80bb      	strh	r3, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	807b      	strh	r3, [r7, #2]
    double VR_Ta, kGb;

    kGb = ((double)Gb) / 1024.0;
 8001c26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc1e 	bl	800046c <__aeabi_i2d>
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <mlx90632_preprocess_temp_ambient+0xc0>)
 8001c36:	f7fe fdad 	bl	8000794 <__aeabi_ddiv>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_Ta = ambient_old_raw + kGb * (ambient_new_raw / (MLX90632_REF_3));
 8001c42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc10 	bl	800046c <__aeabi_i2d>
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	460d      	mov	r5, r1
 8001c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc09 	bl	800046c <__aeabi_i2d>
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <mlx90632_preprocess_temp_ambient+0xc4>)
 8001c60:	f7fe fd98 	bl	8000794 <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c70:	f7fe fc66 	bl	8000540 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4620      	mov	r0, r4
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	f7fe faaa 	bl	80001d4 <__adddf3>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((ambient_new_raw / (MLX90632_REF_3)) / VR_Ta) * 524288.0;
 8001c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fbed 	bl	800046c <__aeabi_i2d>
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <mlx90632_preprocess_temp_ambient+0xc4>)
 8001c98:	f7fe fd7c 	bl	8000794 <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ca8:	f7fe fd74 	bl	8000794 <__aeabi_ddiv>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <mlx90632_preprocess_temp_ambient+0xc8>)
 8001cba:	f7fe fc41 	bl	8000540 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cca:	eef0 0a67 	vmov.f32	s1, s15
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd4:	40900000 	.word	0x40900000
 8001cd8:	40280000 	.word	0x40280000
 8001cdc:	41200000 	.word	0x41200000

08001ce0 <mlx90632_preprocess_temp_object>:

double mlx90632_preprocess_temp_object(int16_t object_new_raw, int16_t object_old_raw,
                                       int16_t ambient_new_raw, int16_t ambient_old_raw,
                                       int16_t Ka)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	4608      	mov	r0, r1
 8001cea:	4611      	mov	r1, r2
 8001cec:	461a      	mov	r2, r3
 8001cee:	4623      	mov	r3, r4
 8001cf0:	80fb      	strh	r3, [r7, #6]
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80bb      	strh	r3, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	807b      	strh	r3, [r7, #2]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	803b      	strh	r3, [r7, #0]
    double VR_IR, kKa;

    kKa = ((double)Ka) / 1024.0;
 8001cfe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fbb2 	bl	800046c <__aeabi_i2d>
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <mlx90632_preprocess_temp_object+0xd8>)
 8001d0e:	f7fe fd41 	bl	8000794 <__aeabi_ddiv>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_IR = ambient_old_raw + kKa * (ambient_new_raw / (MLX90632_REF_3));
 8001d1a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fba4 	bl	800046c <__aeabi_i2d>
 8001d24:	4604      	mov	r4, r0
 8001d26:	460d      	mov	r5, r1
 8001d28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fb9d 	bl	800046c <__aeabi_i2d>
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <mlx90632_preprocess_temp_object+0xdc>)
 8001d38:	f7fe fd2c 	bl	8000794 <__aeabi_ddiv>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d48:	f7fe fbfa 	bl	8000540 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4620      	mov	r0, r4
 8001d52:	4629      	mov	r1, r5
 8001d54:	f7fe fa3e 	bl	80001d4 <__adddf3>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((((object_new_raw + object_old_raw) / 2) / (MLX90632_REF_12)) / VR_IR) * 524288.0;
 8001d60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	0fda      	lsrs	r2, r3, #31
 8001d6c:	4413      	add	r3, r2
 8001d6e:	105b      	asrs	r3, r3, #1
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fb7b 	bl	800046c <__aeabi_i2d>
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <mlx90632_preprocess_temp_object+0xdc>)
 8001d7c:	f7fe fd0a 	bl	8000794 <__aeabi_ddiv>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d8c:	f7fe fd02 	bl	8000794 <__aeabi_ddiv>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <mlx90632_preprocess_temp_object+0xe0>)
 8001d9e:	f7fe fbcf 	bl	8000540 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001daa:	eeb0 0a47 	vmov.f32	s0, s14
 8001dae:	eef0 0a67 	vmov.f32	s1, s15
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bdb0      	pop	{r4, r5, r7, pc}
 8001db8:	40900000 	.word	0x40900000
 8001dbc:	40280000 	.word	0x40280000
 8001dc0:	41200000 	.word	0x41200000

08001dc4 <mlx90632_calc_temp_ambient>:

double mlx90632_calc_temp_ambient(int16_t ambient_new_raw, int16_t ambient_old_raw, int32_t P_T,
                                  int32_t P_R, int32_t P_G, int32_t P_O, int16_t Gb)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b090      	sub	sp, #64	; 0x40
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60ba      	str	r2, [r7, #8]
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4603      	mov	r3, r0
 8001dd0:	81fb      	strh	r3, [r7, #14]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	81bb      	strh	r3, [r7, #12]
    double Asub, Bsub, Ablock, Bblock, Cblock, AMB;

    AMB = mlx90632_preprocess_temp_ambient(ambient_new_raw, ambient_old_raw, Gb);
 8001dd6:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 8001dda:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001dde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff16 	bl	8001c14 <mlx90632_preprocess_temp_ambient>
 8001de8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

    Asub = ((double)P_T) / (double)17592186044416.0;
 8001dec:	68b8      	ldr	r0, [r7, #8]
 8001dee:	f7fe fb3d 	bl	800046c <__aeabi_i2d>
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <mlx90632_calc_temp_ambient+0xfc>)
 8001df8:	f7fe fccc 	bl	8000794 <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Bsub = (double)AMB - ((double)P_R / (double)256.0);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7fe fb31 	bl	800046c <__aeabi_i2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <mlx90632_calc_temp_ambient+0x100>)
 8001e10:	f7fe fcc0 	bl	8000794 <__aeabi_ddiv>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e1c:	f7fe f9d8 	bl	80001d0 <__aeabi_dsub>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    Ablock = Asub * (Bsub * Bsub);
 8001e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e30:	f7fe fb86 	bl	8000540 <__aeabi_dmul>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e3c:	f7fe fb80 	bl	8000540 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Bblock = (Bsub / (double)P_G) * (double)1048576.0;
 8001e48:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e4a:	f7fe fb0f 	bl	800046c <__aeabi_i2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e56:	f7fe fc9d 	bl	8000794 <__aeabi_ddiv>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <mlx90632_calc_temp_ambient+0x104>)
 8001e68:	f7fe fb6a 	bl	8000540 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    Cblock = (double)P_O / (double)256.0;
 8001e74:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e76:	f7fe faf9 	bl	800046c <__aeabi_i2d>
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <mlx90632_calc_temp_ambient+0x100>)
 8001e80:	f7fe fc88 	bl	8000794 <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return Bblock + Ablock + Cblock;
 8001e8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e94:	f7fe f99e 	bl	80001d4 <__adddf3>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ea4:	f7fe f996 	bl	80001d4 <__adddf3>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	ec43 2b17 	vmov	d7, r2, r3
}
 8001eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb4:	eef0 0a67 	vmov.f32	s1, s15
 8001eb8:	3740      	adds	r7, #64	; 0x40
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	42b00000 	.word	0x42b00000
 8001ec4:	40700000 	.word	0x40700000
 8001ec8:	41300000 	.word	0x41300000
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <mlx90632_calc_temp_object_iteration>:
 * @return Calculated object temperature for current iteration in milliCelsius
 */
STATIC double mlx90632_calc_temp_object_iteration(double prev_object_temp, int32_t object, double TAdut,
                                                  int32_t Ga, int32_t Fa, int32_t Fb, int16_t Ha, int16_t Hb,
                                                  double emissivity)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b09c      	sub	sp, #112	; 0x70
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	ed87 0b08 	vstr	d0, [r7, #32]
 8001eda:	61f8      	str	r0, [r7, #28]
 8001edc:	ed87 1b04 	vstr	d1, [r7, #16]
 8001ee0:	61b9      	str	r1, [r7, #24]
 8001ee2:	60fa      	str	r2, [r7, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	ed87 2b00 	vstr	d2, [r7]
    // temp variables
    double KsTAtmp, Alpha_corr;
    double Ha_customer, Hb_customer;


    Ha_customer = Ha / ((double)16384.0);
 8001eea:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fabc 	bl	800046c <__aeabi_i2d>
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b93      	ldr	r3, [pc, #588]	; (8002148 <mlx90632_calc_temp_object_iteration+0x278>)
 8001efa:	f7fe fc4b 	bl	8000794 <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    Hb_customer = Hb / ((double)1024.0);
 8001f06:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe faae 	bl	800046c <__aeabi_i2d>
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	4b8d      	ldr	r3, [pc, #564]	; (800214c <mlx90632_calc_temp_object_iteration+0x27c>)
 8001f16:	f7fe fc3d 	bl	8000794 <__aeabi_ddiv>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    calcedGa = ((double)Ga * (prev_object_temp - 25)) / ((double)68719476736.0);
 8001f22:	69b8      	ldr	r0, [r7, #24]
 8001f24:	f7fe faa2 	bl	800046c <__aeabi_i2d>
 8001f28:	4604      	mov	r4, r0
 8001f2a:	460d      	mov	r5, r1
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b87      	ldr	r3, [pc, #540]	; (8002150 <mlx90632_calc_temp_object_iteration+0x280>)
 8001f32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f36:	f7fe f94b 	bl	80001d0 <__aeabi_dsub>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4620      	mov	r0, r4
 8001f40:	4629      	mov	r1, r5
 8001f42:	f7fe fafd 	bl	8000540 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b80      	ldr	r3, [pc, #512]	; (8002154 <mlx90632_calc_temp_object_iteration+0x284>)
 8001f54:	f7fe fc1e 	bl	8000794 <__aeabi_ddiv>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    KsTAtmp = (double)Fb * (TAdut - 25);
 8001f60:	68b8      	ldr	r0, [r7, #8]
 8001f62:	f7fe fa83 	bl	800046c <__aeabi_i2d>
 8001f66:	4604      	mov	r4, r0
 8001f68:	460d      	mov	r5, r1
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	4b78      	ldr	r3, [pc, #480]	; (8002150 <mlx90632_calc_temp_object_iteration+0x280>)
 8001f70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f74:	f7fe f92c 	bl	80001d0 <__aeabi_dsub>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	4629      	mov	r1, r5
 8001f80:	f7fe fade 	bl	8000540 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    calcedGb = KsTAtmp / ((double)68719476736.0);
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	4b70      	ldr	r3, [pc, #448]	; (8002154 <mlx90632_calc_temp_object_iteration+0x284>)
 8001f92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001f96:	f7fe fbfd 	bl	8000794 <__aeabi_ddiv>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    Alpha_corr = (((double)(Fa * POW10)) * Ha_customer * (double)(1 + calcedGa + calcedGb)) /
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001faa:	496b      	ldr	r1, [pc, #428]	; (8002158 <mlx90632_calc_temp_object_iteration+0x288>)
 8001fac:	fb01 f003 	mul.w	r0, r1, r3
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	fb01 f102 	mul.w	r1, r1, r2
 8001fb6:	4401      	add	r1, r0
 8001fb8:	4867      	ldr	r0, [pc, #412]	; (8002158 <mlx90632_calc_temp_object_iteration+0x288>)
 8001fba:	fba2 2300 	umull	r2, r3, r2, r0
 8001fbe:	4419      	add	r1, r3
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f7fe fa8d 	bl	80004e4 <__aeabi_l2d>
 8001fca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001fce:	f7fe fab7 	bl	8000540 <__aeabi_dmul>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4614      	mov	r4, r2
 8001fd8:	461d      	mov	r5, r3
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	4b5f      	ldr	r3, [pc, #380]	; (800215c <mlx90632_calc_temp_object_iteration+0x28c>)
 8001fe0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fe4:	f7fe f8f6 	bl	80001d4 <__adddf3>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ff4:	f7fe f8ee 	bl	80001d4 <__adddf3>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	f7fe fa9e 	bl	8000540 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <mlx90632_calc_temp_object_iteration+0x290>)
 8002012:	f7fe fbbf 	bl	8000794 <__aeabi_ddiv>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                 ((double)70368744177664.0);
    calcedFa = object / (emissivity * (Alpha_corr / POW10));
 800201e:	69f8      	ldr	r0, [r7, #28]
 8002020:	f7fe fa24 	bl	800046c <__aeabi_i2d>
 8002024:	4604      	mov	r4, r0
 8002026:	460d      	mov	r5, r1
 8002028:	a343      	add	r3, pc, #268	; (adr r3, 8002138 <mlx90632_calc_temp_object_iteration+0x268>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002032:	f7fe fbaf 	bl	8000794 <__aeabi_ddiv>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002042:	f7fe fa7d 	bl	8000540 <__aeabi_dmul>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4620      	mov	r0, r4
 800204c:	4629      	mov	r1, r5
 800204e:	f7fe fba1 	bl	8000794 <__aeabi_ddiv>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    TAdut4 = (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15) * (TAdut + 273.15);
 800205a:	a339      	add	r3, pc, #228	; (adr r3, 8002140 <mlx90632_calc_temp_object_iteration+0x270>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002064:	f7fe f8b6 	bl	80001d4 <__adddf3>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4614      	mov	r4, r2
 800206e:	461d      	mov	r5, r3
 8002070:	a333      	add	r3, pc, #204	; (adr r3, 8002140 <mlx90632_calc_temp_object_iteration+0x270>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800207a:	f7fe f8ab 	bl	80001d4 <__adddf3>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4620      	mov	r0, r4
 8002084:	4629      	mov	r1, r5
 8002086:	f7fe fa5b 	bl	8000540 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4614      	mov	r4, r2
 8002090:	461d      	mov	r5, r3
 8002092:	a32b      	add	r3, pc, #172	; (adr r3, 8002140 <mlx90632_calc_temp_object_iteration+0x270>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800209c:	f7fe f89a 	bl	80001d4 <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f7fe fa4a 	bl	8000540 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4614      	mov	r4, r2
 80020b2:	461d      	mov	r5, r3
 80020b4:	a322      	add	r3, pc, #136	; (adr r3, 8002140 <mlx90632_calc_temp_object_iteration+0x270>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020be:	f7fe f889 	bl	80001d4 <__adddf3>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4620      	mov	r0, r4
 80020c8:	4629      	mov	r1, r5
 80020ca:	f7fe fa39 	bl	8000540 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    first_sqrt = sqrt(calcedFa + TAdut4);
 80020d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020de:	f7fe f879 	bl	80001d4 <__adddf3>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	ec43 2b17 	vmov	d7, r2, r3
 80020ea:	eeb0 0a47 	vmov.f32	s0, s14
 80020ee:	eef0 0a67 	vmov.f32	s1, s15
 80020f2:	f007 ffe3 	bl	800a0bc <sqrt>
 80020f6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

    return sqrt(first_sqrt) - 273.15 - Hb_customer;
 80020fa:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80020fe:	f007 ffdd 	bl	800a0bc <sqrt>
 8002102:	ec51 0b10 	vmov	r0, r1, d0
 8002106:	a30e      	add	r3, pc, #56	; (adr r3, 8002140 <mlx90632_calc_temp_object_iteration+0x270>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f7fe f860 	bl	80001d0 <__aeabi_dsub>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800211c:	f7fe f858 	bl	80001d0 <__aeabi_dsub>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	ec43 2b17 	vmov	d7, r2, r3
}
 8002128:	eeb0 0a47 	vmov.f32	s0, s14
 800212c:	eef0 0a67 	vmov.f32	s1, s15
 8002130:	3770      	adds	r7, #112	; 0x70
 8002132:	46bd      	mov	sp, r7
 8002134:	bdb0      	pop	{r4, r5, r7, pc}
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000
 800213c:	4202a05f 	.word	0x4202a05f
 8002140:	66666666 	.word	0x66666666
 8002144:	40711266 	.word	0x40711266
 8002148:	40d00000 	.word	0x40d00000
 800214c:	40900000 	.word	0x40900000
 8002150:	40390000 	.word	0x40390000
 8002154:	42300000 	.word	0x42300000
 8002158:	540be400 	.word	0x540be400
 800215c:	3ff00000 	.word	0x3ff00000
 8002160:	42d00000 	.word	0x42d00000

08002164 <mlx90632_set_emissivity>:
    return sqrt(first_sqrt) - 273.15 - Hb_customer;
}

static double emissivity = 0.0;
void mlx90632_set_emissivity(double value)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	ed87 0b00 	vstr	d0, [r7]
    emissivity = value;
 800216e:	4905      	ldr	r1, [pc, #20]	; (8002184 <mlx90632_set_emissivity+0x20>)
 8002170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002174:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	20000210 	.word	0x20000210

08002188 <mlx90632_get_emissivity>:

double mlx90632_get_emissivity(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
    if (emissivity == 0.0)
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <mlx90632_get_emissivity+0x38>)
 800218e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	f7fe fc39 	bl	8000a10 <__aeabi_dcmpeq>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <mlx90632_get_emissivity+0x24>
    {
        return 1.0;
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <mlx90632_get_emissivity+0x3c>)
 80021aa:	e002      	b.n	80021b2 <mlx90632_get_emissivity+0x2a>
    }
    else
    {
        return emissivity;
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <mlx90632_get_emissivity+0x38>)
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	ec43 2b17 	vmov	d7, r2, r3
    }
}
 80021b6:	eeb0 0a47 	vmov.f32	s0, s14
 80021ba:	eef0 0a67 	vmov.f32	s1, s15
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000210 	.word	0x20000210
 80021c4:	3ff00000 	.word	0x3ff00000

080021c8 <mlx90632_calc_temp_object>:

double mlx90632_calc_temp_object(int32_t object, int32_t ambient,
                                 int32_t Ea, int32_t Eb, int32_t Ga, int32_t Fa, int32_t Fb,
                                 int16_t Ha, int16_t Hb)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b092      	sub	sp, #72	; 0x48
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
    double kEa, kEb, TAdut;
    double temp = 25.0;
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	4b34      	ldr	r3, [pc, #208]	; (80022ac <mlx90632_calc_temp_object+0xe4>)
 80021dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double tmp_emi = mlx90632_get_emissivity();
 80021e0:	f7ff ffd2 	bl	8002188 <mlx90632_get_emissivity>
 80021e4:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    int8_t i;

    kEa = ((double)Ea) / ((double)65536.0);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7fe f93f 	bl	800046c <__aeabi_i2d>
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <mlx90632_calc_temp_object+0xe8>)
 80021f4:	f7fe face 	bl	8000794 <__aeabi_ddiv>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    kEb = ((double)Eb) / ((double)256.0);
 8002200:	6838      	ldr	r0, [r7, #0]
 8002202:	f7fe f933 	bl	800046c <__aeabi_i2d>
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <mlx90632_calc_temp_object+0xec>)
 800220c:	f7fe fac2 	bl	8000794 <__aeabi_ddiv>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TAdut = (((double)ambient) - kEb) / kEa + 25;
 8002218:	68b8      	ldr	r0, [r7, #8]
 800221a:	f7fe f927 	bl	800046c <__aeabi_i2d>
 800221e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002222:	f7fd ffd5 	bl	80001d0 <__aeabi_dsub>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002232:	f7fe faaf 	bl	8000794 <__aeabi_ddiv>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <mlx90632_calc_temp_object+0xe4>)
 8002244:	f7fd ffc6 	bl	80001d4 <__adddf3>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    //iterate through calculations
    for (i = 0; i < 5; ++i)
 8002250:	2300      	movs	r3, #0
 8002252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002256:	e019      	b.n	800228c <mlx90632_calc_temp_object+0xc4>
    {
        temp = mlx90632_calc_temp_object_iteration(temp, object, TAdut, Ga, Fa, Fb, Ha, Hb, tmp_emi);
 8002258:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800226a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800226c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800226e:	ed97 1b04 	vldr	d1, [r7, #16]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002278:	f7ff fe2a 	bl	8001ed0 <mlx90632_calc_temp_object_iteration>
 800227c:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
    for (i = 0; i < 5; ++i)
 8002280:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002284:	3301      	adds	r3, #1
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800228c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002290:	2b04      	cmp	r3, #4
 8002292:	dde1      	ble.n	8002258 <mlx90632_calc_temp_object+0x90>
    }
    return temp;
 8002294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002298:	ec43 2b17 	vmov	d7, r2, r3
}
 800229c:	eeb0 0a47 	vmov.f32	s0, s14
 80022a0:	eef0 0a67 	vmov.f32	s1, s15
 80022a4:	3740      	adds	r7, #64	; 0x40
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40390000 	.word	0x40390000
 80022b0:	40f00000 	.word	0x40f00000
 80022b4:	40700000 	.word	0x40700000

080022b8 <mlx90632_i2c_read>:
/* Definition of I2C address of MLX90632 */
#define CHIP_ADDRESS 0x3a << 1
/* HAL_I2C_Mem_Read()/Write() are used instead of Master_Transmit()/Receive() because repeated start condition is needed */
/* Implementation of I2C read for 16-bit values */
int32_t mlx90632_i2c_read(int16_t register_address, uint16_t *value, I2C_HandleTypeDef hi2c)
{
 80022b8:	b082      	sub	sp, #8
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b088      	sub	sp, #32
 80022be:	af04      	add	r7, sp, #16
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	f107 0118 	add.w	r1, r7, #24
 80022c6:	e881 000c 	stmia.w	r1, {r2, r3}
 80022ca:	4603      	mov	r3, r0
 80022cc:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	2364      	movs	r3, #100	; 0x64
 80022d2:	9302      	str	r3, [sp, #8]
 80022d4:	2302      	movs	r3, #2
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2302      	movs	r3, #2
 80022e0:	2174      	movs	r1, #116	; 0x74
 80022e2:	f107 0018 	add.w	r0, r7, #24
 80022e6:	f001 fcdd 	bl	8003ca4 <HAL_I2C_Mem_Read>
 80022ea:	4603      	mov	r3, r0
 80022ec:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[1]|(data[0]<<8);
 80022ee:	7a7b      	ldrb	r3, [r7, #9]
 80022f0:	b21a      	sxth	r2, r3
 80022f2:	7a3b      	ldrb	r3, [r7, #8]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	801a      	strh	r2, [r3, #0]
	return ret;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800230e:	b002      	add	sp, #8
 8002310:	4770      	bx	lr

08002312 <mlx90632_i2c_read32>:

/* Implementation of I2C read for 32-bit values */
int32_t mlx90632_i2c_read32(int16_t register_address, uint32_t *value, I2C_HandleTypeDef hi2c)
{
 8002312:	b082      	sub	sp, #8
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af04      	add	r7, sp, #16
 800231a:	6039      	str	r1, [r7, #0]
 800231c:	f107 0118 	add.w	r1, r7, #24
 8002320:	e881 000c 	stmia.w	r1, {r2, r3}
 8002324:	4603      	mov	r3, r0
 8002326:	80fb      	strh	r3, [r7, #6]
	uint8_t data[4];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 8002328:	88fa      	ldrh	r2, [r7, #6]
 800232a:	2364      	movs	r3, #100	; 0x64
 800232c:	9302      	str	r3, [sp, #8]
 800232e:	2304      	movs	r3, #4
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2302      	movs	r3, #2
 800233a:	2174      	movs	r1, #116	; 0x74
 800233c:	f107 0018 	add.w	r0, r7, #24
 8002340:	f001 fcb0 	bl	8003ca4 <HAL_I2C_Mem_Read>
 8002344:	4603      	mov	r3, r0
 8002346:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[2]<<24|data[3]<<16|data[0]<<8|data[1];
 8002348:	7abb      	ldrb	r3, [r7, #10]
 800234a:	061a      	lsls	r2, r3, #24
 800234c:	7afb      	ldrb	r3, [r7, #11]
 800234e:	041b      	lsls	r3, r3, #16
 8002350:	431a      	orrs	r2, r3
 8002352:	7a3b      	ldrb	r3, [r7, #8]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	4313      	orrs	r3, r2
 8002358:	7a7a      	ldrb	r2, [r7, #9]
 800235a:	4313      	orrs	r3, r2
 800235c:	461a      	mov	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	601a      	str	r2, [r3, #0]
	return ret;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800236e:	b002      	add	sp, #8
 8002370:	4770      	bx	lr

08002372 <mlx90632_i2c_write>:

/* Implementation of I2C write for 16-bit values */
int32_t mlx90632_i2c_write(int16_t register_address, uint16_t value, I2C_HandleTypeDef hi2c) {
 8002372:	b082      	sub	sp, #8
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af04      	add	r7, sp, #16
 800237a:	f107 0c18 	add.w	ip, r7, #24
 800237e:	e88c 000c 	stmia.w	ip, {r2, r3}
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
 8002386:	460b      	mov	r3, r1
 8002388:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2];
	data[0] = value >> 8;
 800238a:	88bb      	ldrh	r3, [r7, #4]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b29b      	uxth	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8002394:	88bb      	ldrh	r3, [r7, #4]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(&hi2c, CHIP_ADDRESS, register_address, 2, data, 2, 100);
 800239a:	88fa      	ldrh	r2, [r7, #6]
 800239c:	2364      	movs	r3, #100	; 0x64
 800239e:	9302      	str	r3, [sp, #8]
 80023a0:	2302      	movs	r3, #2
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2302      	movs	r3, #2
 80023ac:	2174      	movs	r1, #116	; 0x74
 80023ae:	f107 0018 	add.w	r0, r7, #24
 80023b2:	f001 fb7d 	bl	8003ab0 <HAL_I2C_Mem_Write>
 80023b6:	4603      	mov	r3, r0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023c2:	b002      	add	sp, #8
 80023c4:	4770      	bx	lr

080023c6 <usleep>:
//	if(ret < 0)
//		return ret;
//	return 0;
//}

void usleep(int min_range, int max_range) {
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
	while(--min_range);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f9      	bne.n	80023d0 <usleep+0xa>
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 80023ec:	b084      	sub	sp, #16
 80023ee:	b590      	push	{r4, r7, lr}
 80023f0:	b097      	sub	sp, #92	; 0x5c
 80023f2:	af14      	add	r7, sp, #80	; 0x50
 80023f4:	f107 0418 	add.w	r4, r7, #24
 80023f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 80023fc:	f000 fb98 	bl	8002b30 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <SSD1306_Init+0x44>)
 8002402:	4618      	mov	r0, r3
 8002404:	f107 0318 	add.w	r3, r7, #24
 8002408:	2254      	movs	r2, #84	; 0x54
 800240a:	4619      	mov	r1, r3
 800240c:	f007 fe40 	bl	800a090 <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002410:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002414:	2201      	movs	r2, #1
 8002416:	2178      	movs	r1, #120	; 0x78
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <SSD1306_Init+0x44>)
 800241a:	f001 fe69 	bl	80040f0 <HAL_I2C_IsDeviceReady>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 8002424:	2300      	movs	r3, #0
 8002426:	e1ee      	b.n	8002806 <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002428:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800242c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800242e:	e004      	b.n	800243a <SSD1306_Init+0x4e>
 8002430:	2000097c 	.word	0x2000097c
		p--;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	607b      	str	r3, [r7, #4]
	while(p>0)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f9      	bne.n	8002434 <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002440:	4ce1      	ldr	r4, [pc, #900]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002442:	23ae      	movs	r3, #174	; 0xae
 8002444:	9313      	str	r3, [sp, #76]	; 0x4c
 8002446:	4668      	mov	r0, sp
 8002448:	f104 0308 	add.w	r3, r4, #8
 800244c:	224c      	movs	r2, #76	; 0x4c
 800244e:	4619      	mov	r1, r3
 8002450:	f007 fe1e 	bl	800a090 <memcpy>
 8002454:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002458:	2100      	movs	r1, #0
 800245a:	2078      	movs	r0, #120	; 0x78
 800245c:	f000 fbc6 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002460:	4cd9      	ldr	r4, [pc, #868]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002462:	2320      	movs	r3, #32
 8002464:	9313      	str	r3, [sp, #76]	; 0x4c
 8002466:	4668      	mov	r0, sp
 8002468:	f104 0308 	add.w	r3, r4, #8
 800246c:	224c      	movs	r2, #76	; 0x4c
 800246e:	4619      	mov	r1, r3
 8002470:	f007 fe0e 	bl	800a090 <memcpy>
 8002474:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002478:	2100      	movs	r1, #0
 800247a:	2078      	movs	r0, #120	; 0x78
 800247c:	f000 fbb6 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002480:	4cd1      	ldr	r4, [pc, #836]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002482:	2310      	movs	r3, #16
 8002484:	9313      	str	r3, [sp, #76]	; 0x4c
 8002486:	4668      	mov	r0, sp
 8002488:	f104 0308 	add.w	r3, r4, #8
 800248c:	224c      	movs	r2, #76	; 0x4c
 800248e:	4619      	mov	r1, r3
 8002490:	f007 fdfe 	bl	800a090 <memcpy>
 8002494:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002498:	2100      	movs	r1, #0
 800249a:	2078      	movs	r0, #120	; 0x78
 800249c:	f000 fba6 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80024a0:	4cc9      	ldr	r4, [pc, #804]	; (80027c8 <SSD1306_Init+0x3dc>)
 80024a2:	23b0      	movs	r3, #176	; 0xb0
 80024a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80024a6:	4668      	mov	r0, sp
 80024a8:	f104 0308 	add.w	r3, r4, #8
 80024ac:	224c      	movs	r2, #76	; 0x4c
 80024ae:	4619      	mov	r1, r3
 80024b0:	f007 fdee 	bl	800a090 <memcpy>
 80024b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024b8:	2100      	movs	r1, #0
 80024ba:	2078      	movs	r0, #120	; 0x78
 80024bc:	f000 fb96 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80024c0:	4cc1      	ldr	r4, [pc, #772]	; (80027c8 <SSD1306_Init+0x3dc>)
 80024c2:	23c8      	movs	r3, #200	; 0xc8
 80024c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80024c6:	4668      	mov	r0, sp
 80024c8:	f104 0308 	add.w	r3, r4, #8
 80024cc:	224c      	movs	r2, #76	; 0x4c
 80024ce:	4619      	mov	r1, r3
 80024d0:	f007 fdde 	bl	800a090 <memcpy>
 80024d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024d8:	2100      	movs	r1, #0
 80024da:	2078      	movs	r0, #120	; 0x78
 80024dc:	f000 fb86 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80024e0:	4cb9      	ldr	r4, [pc, #740]	; (80027c8 <SSD1306_Init+0x3dc>)
 80024e2:	2300      	movs	r3, #0
 80024e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80024e6:	4668      	mov	r0, sp
 80024e8:	f104 0308 	add.w	r3, r4, #8
 80024ec:	224c      	movs	r2, #76	; 0x4c
 80024ee:	4619      	mov	r1, r3
 80024f0:	f007 fdce 	bl	800a090 <memcpy>
 80024f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024f8:	2100      	movs	r1, #0
 80024fa:	2078      	movs	r0, #120	; 0x78
 80024fc:	f000 fb76 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002500:	4cb1      	ldr	r4, [pc, #708]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002502:	2310      	movs	r3, #16
 8002504:	9313      	str	r3, [sp, #76]	; 0x4c
 8002506:	4668      	mov	r0, sp
 8002508:	f104 0308 	add.w	r3, r4, #8
 800250c:	224c      	movs	r2, #76	; 0x4c
 800250e:	4619      	mov	r1, r3
 8002510:	f007 fdbe 	bl	800a090 <memcpy>
 8002514:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002518:	2100      	movs	r1, #0
 800251a:	2078      	movs	r0, #120	; 0x78
 800251c:	f000 fb66 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002520:	4ca9      	ldr	r4, [pc, #676]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002522:	2340      	movs	r3, #64	; 0x40
 8002524:	9313      	str	r3, [sp, #76]	; 0x4c
 8002526:	4668      	mov	r0, sp
 8002528:	f104 0308 	add.w	r3, r4, #8
 800252c:	224c      	movs	r2, #76	; 0x4c
 800252e:	4619      	mov	r1, r3
 8002530:	f007 fdae 	bl	800a090 <memcpy>
 8002534:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002538:	2100      	movs	r1, #0
 800253a:	2078      	movs	r0, #120	; 0x78
 800253c:	f000 fb56 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002540:	4ca1      	ldr	r4, [pc, #644]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002542:	2381      	movs	r3, #129	; 0x81
 8002544:	9313      	str	r3, [sp, #76]	; 0x4c
 8002546:	4668      	mov	r0, sp
 8002548:	f104 0308 	add.w	r3, r4, #8
 800254c:	224c      	movs	r2, #76	; 0x4c
 800254e:	4619      	mov	r1, r3
 8002550:	f007 fd9e 	bl	800a090 <memcpy>
 8002554:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002558:	2100      	movs	r1, #0
 800255a:	2078      	movs	r0, #120	; 0x78
 800255c:	f000 fb46 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002560:	4c99      	ldr	r4, [pc, #612]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002562:	23ff      	movs	r3, #255	; 0xff
 8002564:	9313      	str	r3, [sp, #76]	; 0x4c
 8002566:	4668      	mov	r0, sp
 8002568:	f104 0308 	add.w	r3, r4, #8
 800256c:	224c      	movs	r2, #76	; 0x4c
 800256e:	4619      	mov	r1, r3
 8002570:	f007 fd8e 	bl	800a090 <memcpy>
 8002574:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002578:	2100      	movs	r1, #0
 800257a:	2078      	movs	r0, #120	; 0x78
 800257c:	f000 fb36 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002580:	4c91      	ldr	r4, [pc, #580]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002582:	23a1      	movs	r3, #161	; 0xa1
 8002584:	9313      	str	r3, [sp, #76]	; 0x4c
 8002586:	4668      	mov	r0, sp
 8002588:	f104 0308 	add.w	r3, r4, #8
 800258c:	224c      	movs	r2, #76	; 0x4c
 800258e:	4619      	mov	r1, r3
 8002590:	f007 fd7e 	bl	800a090 <memcpy>
 8002594:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002598:	2100      	movs	r1, #0
 800259a:	2078      	movs	r0, #120	; 0x78
 800259c:	f000 fb26 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80025a0:	4c89      	ldr	r4, [pc, #548]	; (80027c8 <SSD1306_Init+0x3dc>)
 80025a2:	23a6      	movs	r3, #166	; 0xa6
 80025a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80025a6:	4668      	mov	r0, sp
 80025a8:	f104 0308 	add.w	r3, r4, #8
 80025ac:	224c      	movs	r2, #76	; 0x4c
 80025ae:	4619      	mov	r1, r3
 80025b0:	f007 fd6e 	bl	800a090 <memcpy>
 80025b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80025b8:	2100      	movs	r1, #0
 80025ba:	2078      	movs	r0, #120	; 0x78
 80025bc:	f000 fb16 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80025c0:	4c81      	ldr	r4, [pc, #516]	; (80027c8 <SSD1306_Init+0x3dc>)
 80025c2:	23a8      	movs	r3, #168	; 0xa8
 80025c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80025c6:	4668      	mov	r0, sp
 80025c8:	f104 0308 	add.w	r3, r4, #8
 80025cc:	224c      	movs	r2, #76	; 0x4c
 80025ce:	4619      	mov	r1, r3
 80025d0:	f007 fd5e 	bl	800a090 <memcpy>
 80025d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80025d8:	2100      	movs	r1, #0
 80025da:	2078      	movs	r0, #120	; 0x78
 80025dc:	f000 fb06 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80025e0:	4c79      	ldr	r4, [pc, #484]	; (80027c8 <SSD1306_Init+0x3dc>)
 80025e2:	233f      	movs	r3, #63	; 0x3f
 80025e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80025e6:	4668      	mov	r0, sp
 80025e8:	f104 0308 	add.w	r3, r4, #8
 80025ec:	224c      	movs	r2, #76	; 0x4c
 80025ee:	4619      	mov	r1, r3
 80025f0:	f007 fd4e 	bl	800a090 <memcpy>
 80025f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80025f8:	2100      	movs	r1, #0
 80025fa:	2078      	movs	r0, #120	; 0x78
 80025fc:	f000 faf6 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002600:	4c71      	ldr	r4, [pc, #452]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002602:	23a4      	movs	r3, #164	; 0xa4
 8002604:	9313      	str	r3, [sp, #76]	; 0x4c
 8002606:	4668      	mov	r0, sp
 8002608:	f104 0308 	add.w	r3, r4, #8
 800260c:	224c      	movs	r2, #76	; 0x4c
 800260e:	4619      	mov	r1, r3
 8002610:	f007 fd3e 	bl	800a090 <memcpy>
 8002614:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002618:	2100      	movs	r1, #0
 800261a:	2078      	movs	r0, #120	; 0x78
 800261c:	f000 fae6 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002620:	4c69      	ldr	r4, [pc, #420]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002622:	23d3      	movs	r3, #211	; 0xd3
 8002624:	9313      	str	r3, [sp, #76]	; 0x4c
 8002626:	4668      	mov	r0, sp
 8002628:	f104 0308 	add.w	r3, r4, #8
 800262c:	224c      	movs	r2, #76	; 0x4c
 800262e:	4619      	mov	r1, r3
 8002630:	f007 fd2e 	bl	800a090 <memcpy>
 8002634:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002638:	2100      	movs	r1, #0
 800263a:	2078      	movs	r0, #120	; 0x78
 800263c:	f000 fad6 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002640:	4c61      	ldr	r4, [pc, #388]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002642:	2300      	movs	r3, #0
 8002644:	9313      	str	r3, [sp, #76]	; 0x4c
 8002646:	4668      	mov	r0, sp
 8002648:	f104 0308 	add.w	r3, r4, #8
 800264c:	224c      	movs	r2, #76	; 0x4c
 800264e:	4619      	mov	r1, r3
 8002650:	f007 fd1e 	bl	800a090 <memcpy>
 8002654:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002658:	2100      	movs	r1, #0
 800265a:	2078      	movs	r0, #120	; 0x78
 800265c:	f000 fac6 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002660:	4c59      	ldr	r4, [pc, #356]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002662:	23d5      	movs	r3, #213	; 0xd5
 8002664:	9313      	str	r3, [sp, #76]	; 0x4c
 8002666:	4668      	mov	r0, sp
 8002668:	f104 0308 	add.w	r3, r4, #8
 800266c:	224c      	movs	r2, #76	; 0x4c
 800266e:	4619      	mov	r1, r3
 8002670:	f007 fd0e 	bl	800a090 <memcpy>
 8002674:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002678:	2100      	movs	r1, #0
 800267a:	2078      	movs	r0, #120	; 0x78
 800267c:	f000 fab6 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002680:	4c51      	ldr	r4, [pc, #324]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002682:	23f0      	movs	r3, #240	; 0xf0
 8002684:	9313      	str	r3, [sp, #76]	; 0x4c
 8002686:	4668      	mov	r0, sp
 8002688:	f104 0308 	add.w	r3, r4, #8
 800268c:	224c      	movs	r2, #76	; 0x4c
 800268e:	4619      	mov	r1, r3
 8002690:	f007 fcfe 	bl	800a090 <memcpy>
 8002694:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002698:	2100      	movs	r1, #0
 800269a:	2078      	movs	r0, #120	; 0x78
 800269c:	f000 faa6 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80026a0:	4c49      	ldr	r4, [pc, #292]	; (80027c8 <SSD1306_Init+0x3dc>)
 80026a2:	23d9      	movs	r3, #217	; 0xd9
 80026a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80026a6:	4668      	mov	r0, sp
 80026a8:	f104 0308 	add.w	r3, r4, #8
 80026ac:	224c      	movs	r2, #76	; 0x4c
 80026ae:	4619      	mov	r1, r3
 80026b0:	f007 fcee 	bl	800a090 <memcpy>
 80026b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80026b8:	2100      	movs	r1, #0
 80026ba:	2078      	movs	r0, #120	; 0x78
 80026bc:	f000 fa96 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80026c0:	4c41      	ldr	r4, [pc, #260]	; (80027c8 <SSD1306_Init+0x3dc>)
 80026c2:	2322      	movs	r3, #34	; 0x22
 80026c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80026c6:	4668      	mov	r0, sp
 80026c8:	f104 0308 	add.w	r3, r4, #8
 80026cc:	224c      	movs	r2, #76	; 0x4c
 80026ce:	4619      	mov	r1, r3
 80026d0:	f007 fcde 	bl	800a090 <memcpy>
 80026d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80026d8:	2100      	movs	r1, #0
 80026da:	2078      	movs	r0, #120	; 0x78
 80026dc:	f000 fa86 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80026e0:	4c39      	ldr	r4, [pc, #228]	; (80027c8 <SSD1306_Init+0x3dc>)
 80026e2:	23da      	movs	r3, #218	; 0xda
 80026e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80026e6:	4668      	mov	r0, sp
 80026e8:	f104 0308 	add.w	r3, r4, #8
 80026ec:	224c      	movs	r2, #76	; 0x4c
 80026ee:	4619      	mov	r1, r3
 80026f0:	f007 fcce 	bl	800a090 <memcpy>
 80026f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80026f8:	2100      	movs	r1, #0
 80026fa:	2078      	movs	r0, #120	; 0x78
 80026fc:	f000 fa76 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002700:	4c31      	ldr	r4, [pc, #196]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002702:	2312      	movs	r3, #18
 8002704:	9313      	str	r3, [sp, #76]	; 0x4c
 8002706:	4668      	mov	r0, sp
 8002708:	f104 0308 	add.w	r3, r4, #8
 800270c:	224c      	movs	r2, #76	; 0x4c
 800270e:	4619      	mov	r1, r3
 8002710:	f007 fcbe 	bl	800a090 <memcpy>
 8002714:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002718:	2100      	movs	r1, #0
 800271a:	2078      	movs	r0, #120	; 0x78
 800271c:	f000 fa66 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002720:	4c29      	ldr	r4, [pc, #164]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002722:	23db      	movs	r3, #219	; 0xdb
 8002724:	9313      	str	r3, [sp, #76]	; 0x4c
 8002726:	4668      	mov	r0, sp
 8002728:	f104 0308 	add.w	r3, r4, #8
 800272c:	224c      	movs	r2, #76	; 0x4c
 800272e:	4619      	mov	r1, r3
 8002730:	f007 fcae 	bl	800a090 <memcpy>
 8002734:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002738:	2100      	movs	r1, #0
 800273a:	2078      	movs	r0, #120	; 0x78
 800273c:	f000 fa56 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002740:	4c21      	ldr	r4, [pc, #132]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002742:	2320      	movs	r3, #32
 8002744:	9313      	str	r3, [sp, #76]	; 0x4c
 8002746:	4668      	mov	r0, sp
 8002748:	f104 0308 	add.w	r3, r4, #8
 800274c:	224c      	movs	r2, #76	; 0x4c
 800274e:	4619      	mov	r1, r3
 8002750:	f007 fc9e 	bl	800a090 <memcpy>
 8002754:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002758:	2100      	movs	r1, #0
 800275a:	2078      	movs	r0, #120	; 0x78
 800275c:	f000 fa46 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002760:	4c19      	ldr	r4, [pc, #100]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002762:	238d      	movs	r3, #141	; 0x8d
 8002764:	9313      	str	r3, [sp, #76]	; 0x4c
 8002766:	4668      	mov	r0, sp
 8002768:	f104 0308 	add.w	r3, r4, #8
 800276c:	224c      	movs	r2, #76	; 0x4c
 800276e:	4619      	mov	r1, r3
 8002770:	f007 fc8e 	bl	800a090 <memcpy>
 8002774:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002778:	2100      	movs	r1, #0
 800277a:	2078      	movs	r0, #120	; 0x78
 800277c:	f000 fa36 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002780:	4c11      	ldr	r4, [pc, #68]	; (80027c8 <SSD1306_Init+0x3dc>)
 8002782:	2314      	movs	r3, #20
 8002784:	9313      	str	r3, [sp, #76]	; 0x4c
 8002786:	4668      	mov	r0, sp
 8002788:	f104 0308 	add.w	r3, r4, #8
 800278c:	224c      	movs	r2, #76	; 0x4c
 800278e:	4619      	mov	r1, r3
 8002790:	f007 fc7e 	bl	800a090 <memcpy>
 8002794:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002798:	2100      	movs	r1, #0
 800279a:	2078      	movs	r0, #120	; 0x78
 800279c:	f000 fa26 	bl	8002bec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80027a0:	4c09      	ldr	r4, [pc, #36]	; (80027c8 <SSD1306_Init+0x3dc>)
 80027a2:	23af      	movs	r3, #175	; 0xaf
 80027a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80027a6:	4668      	mov	r0, sp
 80027a8:	f104 0308 	add.w	r3, r4, #8
 80027ac:	224c      	movs	r2, #76	; 0x4c
 80027ae:	4619      	mov	r1, r3
 80027b0:	f007 fc6e 	bl	800a090 <memcpy>
 80027b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027b8:	2100      	movs	r1, #0
 80027ba:	2078      	movs	r0, #120	; 0x78
 80027bc:	f000 fa16 	bl	8002bec <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80027c0:	4c01      	ldr	r4, [pc, #4]	; (80027c8 <SSD1306_Init+0x3dc>)
 80027c2:	232e      	movs	r3, #46	; 0x2e
 80027c4:	e002      	b.n	80027cc <SSD1306_Init+0x3e0>
 80027c6:	bf00      	nop
 80027c8:	2000097c 	.word	0x2000097c
 80027cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80027ce:	4668      	mov	r0, sp
 80027d0:	f104 0308 	add.w	r3, r4, #8
 80027d4:	224c      	movs	r2, #76	; 0x4c
 80027d6:	4619      	mov	r1, r3
 80027d8:	f007 fc5a 	bl	800a090 <memcpy>
 80027dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027e0:	2100      	movs	r1, #0
 80027e2:	2078      	movs	r0, #120	; 0x78
 80027e4:	f000 fa02 	bl	8002bec <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f000 f865 	bl	80028b8 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80027ee:	f000 f813 	bl	8002818 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <SSD1306_Init+0x428>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <SSD1306_Init+0x428>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SSD1306_Init+0x428>)
 8002800:	2201      	movs	r2, #1
 8002802:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002804:	2301      	movs	r3, #1
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002810:	b004      	add	sp, #16
 8002812:	4770      	bx	lr
 8002814:	20000618 	.word	0x20000618

08002818 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b097      	sub	sp, #92	; 0x5c
 800281c:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800281e:	2300      	movs	r3, #0
 8002820:	71fb      	strb	r3, [r7, #7]
 8002822:	e03d      	b.n	80028a0 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	3b50      	subs	r3, #80	; 0x50
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4c21      	ldr	r4, [pc, #132]	; (80028b0 <SSD1306_UpdateScreen+0x98>)
 800282c:	9313      	str	r3, [sp, #76]	; 0x4c
 800282e:	4668      	mov	r0, sp
 8002830:	f104 0308 	add.w	r3, r4, #8
 8002834:	224c      	movs	r2, #76	; 0x4c
 8002836:	4619      	mov	r1, r3
 8002838:	f007 fc2a 	bl	800a090 <memcpy>
 800283c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002840:	2100      	movs	r1, #0
 8002842:	2078      	movs	r0, #120	; 0x78
 8002844:	f000 f9d2 	bl	8002bec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002848:	4c19      	ldr	r4, [pc, #100]	; (80028b0 <SSD1306_UpdateScreen+0x98>)
 800284a:	2300      	movs	r3, #0
 800284c:	9313      	str	r3, [sp, #76]	; 0x4c
 800284e:	4668      	mov	r0, sp
 8002850:	f104 0308 	add.w	r3, r4, #8
 8002854:	224c      	movs	r2, #76	; 0x4c
 8002856:	4619      	mov	r1, r3
 8002858:	f007 fc1a 	bl	800a090 <memcpy>
 800285c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002860:	2100      	movs	r1, #0
 8002862:	2078      	movs	r0, #120	; 0x78
 8002864:	f000 f9c2 	bl	8002bec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002868:	4c11      	ldr	r4, [pc, #68]	; (80028b0 <SSD1306_UpdateScreen+0x98>)
 800286a:	2310      	movs	r3, #16
 800286c:	9313      	str	r3, [sp, #76]	; 0x4c
 800286e:	4668      	mov	r0, sp
 8002870:	f104 0308 	add.w	r3, r4, #8
 8002874:	224c      	movs	r2, #76	; 0x4c
 8002876:	4619      	mov	r1, r3
 8002878:	f007 fc0a 	bl	800a090 <memcpy>
 800287c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002880:	2100      	movs	r1, #0
 8002882:	2078      	movs	r0, #120	; 0x78
 8002884:	f000 f9b2 	bl	8002bec <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	01db      	lsls	r3, r3, #7
 800288c:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <SSD1306_UpdateScreen+0x9c>)
 800288e:	441a      	add	r2, r3
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	2140      	movs	r1, #64	; 0x40
 8002894:	2078      	movs	r0, #120	; 0x78
 8002896:	f000 f961 	bl	8002b5c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	3301      	adds	r3, #1
 800289e:	71fb      	strb	r3, [r7, #7]
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2b07      	cmp	r3, #7
 80028a4:	d9be      	bls.n	8002824 <SSD1306_UpdateScreen+0xc>
	}
}
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd90      	pop	{r4, r7, pc}
 80028b0:	2000097c 	.word	0x2000097c
 80028b4:	20000218 	.word	0x20000218

080028b8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <SSD1306_Fill+0x14>
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <SSD1306_Fill+0x16>
 80028cc:	23ff      	movs	r3, #255	; 0xff
 80028ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d2:	4619      	mov	r1, r3
 80028d4:	4803      	ldr	r0, [pc, #12]	; (80028e4 <SSD1306_Fill+0x2c>)
 80028d6:	f007 fbe9 	bl	800a0ac <memset>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000218 	.word	0x20000218

080028e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
 80028f2:	460b      	mov	r3, r1
 80028f4:	80bb      	strh	r3, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	70fb      	strb	r3, [r7, #3]
	if (
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	2b7f      	cmp	r3, #127	; 0x7f
 80028fe:	d848      	bhi.n	8002992 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002900:	88bb      	ldrh	r3, [r7, #4]
 8002902:	2b3f      	cmp	r3, #63	; 0x3f
 8002904:	d845      	bhi.n	8002992 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002906:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <SSD1306_DrawPixel+0xb8>)
 8002908:	791b      	ldrb	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d11a      	bne.n	8002958 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002922:	88fa      	ldrh	r2, [r7, #6]
 8002924:	88bb      	ldrh	r3, [r7, #4]
 8002926:	08db      	lsrs	r3, r3, #3
 8002928:	b298      	uxth	r0, r3
 800292a:	4603      	mov	r3, r0
 800292c:	01db      	lsls	r3, r3, #7
 800292e:	4413      	add	r3, r2
 8002930:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <SSD1306_DrawPixel+0xbc>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	b25a      	sxtb	r2, r3
 8002936:	88bb      	ldrh	r3, [r7, #4]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	b25b      	sxtb	r3, r3
 8002944:	4313      	orrs	r3, r2
 8002946:	b259      	sxtb	r1, r3
 8002948:	88fa      	ldrh	r2, [r7, #6]
 800294a:	4603      	mov	r3, r0
 800294c:	01db      	lsls	r3, r3, #7
 800294e:	4413      	add	r3, r2
 8002950:	b2c9      	uxtb	r1, r1
 8002952:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <SSD1306_DrawPixel+0xbc>)
 8002954:	54d1      	strb	r1, [r2, r3]
 8002956:	e01d      	b.n	8002994 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	88bb      	ldrh	r3, [r7, #4]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	b298      	uxth	r0, r3
 8002960:	4603      	mov	r3, r0
 8002962:	01db      	lsls	r3, r3, #7
 8002964:	4413      	add	r3, r2
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <SSD1306_DrawPixel+0xbc>)
 8002968:	5cd3      	ldrb	r3, [r2, r3]
 800296a:	b25a      	sxtb	r2, r3
 800296c:	88bb      	ldrh	r3, [r7, #4]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	b25b      	sxtb	r3, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	b25b      	sxtb	r3, r3
 800297e:	4013      	ands	r3, r2
 8002980:	b259      	sxtb	r1, r3
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	4603      	mov	r3, r0
 8002986:	01db      	lsls	r3, r3, #7
 8002988:	4413      	add	r3, r2
 800298a:	b2c9      	uxtb	r1, r1
 800298c:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <SSD1306_DrawPixel+0xbc>)
 800298e:	54d1      	strb	r1, [r2, r3]
 8002990:	e000      	b.n	8002994 <SSD1306_DrawPixel+0xac>
		return;
 8002992:	bf00      	nop
	}
}
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000618 	.word	0x20000618
 80029a4:	20000218 	.word	0x20000218

080029a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	460a      	mov	r2, r1
 80029b2:	80fb      	strh	r3, [r7, #6]
 80029b4:	4613      	mov	r3, r2
 80029b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80029b8:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <SSD1306_GotoXY+0x28>)
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <SSD1306_GotoXY+0x28>)
 80029c0:	88bb      	ldrh	r3, [r7, #4]
 80029c2:	8053      	strh	r3, [r2, #2]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	20000618 	.word	0x20000618

080029d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
 80029e0:	4613      	mov	r3, r2
 80029e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80029e4:	4b3a      	ldr	r3, [pc, #232]	; (8002ad0 <SSD1306_Putc+0xfc>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	4413      	add	r3, r2
	if (
 80029f0:	2b7f      	cmp	r3, #127	; 0x7f
 80029f2:	dc07      	bgt.n	8002a04 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80029f4:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <SSD1306_Putc+0xfc>)
 80029f6:	885b      	ldrh	r3, [r3, #2]
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	785b      	ldrb	r3, [r3, #1]
 80029fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002a00:	2b3f      	cmp	r3, #63	; 0x3f
 8002a02:	dd01      	ble.n	8002a08 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e05e      	b.n	8002ac6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e04b      	b.n	8002aa6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	3b20      	subs	r3, #32
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	7849      	ldrb	r1, [r1, #1]
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4619      	mov	r1, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	440b      	add	r3, r1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	e030      	b.n	8002a94 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d010      	beq.n	8002a64 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <SSD1306_Putc+0xfc>)
 8002a44:	881a      	ldrh	r2, [r3, #0]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	b298      	uxth	r0, r3
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <SSD1306_Putc+0xfc>)
 8002a50:	885a      	ldrh	r2, [r3, #2]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	79ba      	ldrb	r2, [r7, #6]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f7ff ff43 	bl	80028e8 <SSD1306_DrawPixel>
 8002a62:	e014      	b.n	8002a8e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <SSD1306_Putc+0xfc>)
 8002a66:	881a      	ldrh	r2, [r3, #0]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	b298      	uxth	r0, r3
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <SSD1306_Putc+0xfc>)
 8002a72:	885a      	ldrh	r2, [r3, #2]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	b299      	uxth	r1, r3
 8002a7c:	79bb      	ldrb	r3, [r7, #6]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf0c      	ite	eq
 8002a82:	2301      	moveq	r3, #1
 8002a84:	2300      	movne	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f7ff ff2d 	bl	80028e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	3301      	adds	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d3c8      	bcc.n	8002a32 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	785b      	ldrb	r3, [r3, #1]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d3ad      	bcc.n	8002a0e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <SSD1306_Putc+0xfc>)
 8002ab4:	881a      	ldrh	r2, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <SSD1306_Putc+0xfc>)
 8002ac2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000618 	.word	0x20000618

08002ad4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002ae2:	e012      	b.n	8002b0a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	79fa      	ldrb	r2, [r7, #7]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff71 	bl	80029d4 <SSD1306_Putc>
 8002af2:	4603      	mov	r3, r0
 8002af4:	461a      	mov	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d002      	beq.n	8002b04 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	e008      	b.n	8002b16 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3301      	adds	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e8      	bne.n	8002ae4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	781b      	ldrb	r3, [r3, #0]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f7ff fec8 	bl	80028b8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002b28:	f7ff fe76 	bl	8002818 <SSD1306_UpdateScreen>
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <ssd1306_I2C_Init+0x28>)
 8002b38:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002b3a:	e002      	b.n	8002b42 <ssd1306_I2C_Init+0x12>
		p--;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f9      	bne.n	8002b3c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	0003d090 	.word	0x0003d090

08002b5c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b0c7      	sub	sp, #284	; 0x11c
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	4604      	mov	r4, r0
 8002b64:	4608      	mov	r0, r1
 8002b66:	4639      	mov	r1, r7
 8002b68:	600a      	str	r2, [r1, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	1dfb      	adds	r3, r7, #7
 8002b6e:	4622      	mov	r2, r4
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	1dbb      	adds	r3, r7, #6
 8002b74:	4602      	mov	r2, r0
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	460a      	mov	r2, r1
 8002b7c:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	1dba      	adds	r2, r7, #6
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002b8e:	e010      	b.n	8002bb2 <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8002b90:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002b94:	463a      	mov	r2, r7
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	441a      	add	r2, r3
 8002b9a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	7811      	ldrb	r1, [r2, #0]
 8002ba2:	f107 020c 	add.w	r2, r7, #12
 8002ba6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8002ba8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002bac:	3301      	adds	r3, #1
 8002bae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002bb2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	1d3a      	adds	r2, r7, #4
 8002bba:	8812      	ldrh	r2, [r2, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8e7      	bhi.n	8002b90 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	b299      	uxth	r1, r3
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f107 020c 	add.w	r2, r7, #12
 8002bd2:	200a      	movs	r0, #10
 8002bd4:	9000      	str	r0, [sp, #0]
 8002bd6:	4804      	ldr	r0, [pc, #16]	; (8002be8 <ssd1306_I2C_WriteMulti+0x8c>)
 8002bd8:	f000 fe6c 	bl	80038b4 <HAL_I2C_Master_Transmit>
}
 8002bdc:	bf00      	nop
 8002bde:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd90      	pop	{r4, r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2000097c 	.word	0x2000097c

08002bec <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 8002bec:	b082      	sub	sp, #8
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	f107 0c18 	add.w	ip, r7, #24
 8002bf8:	e88c 000c 	stmia.w	ip, {r2, r3}
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	71fb      	strb	r3, [r7, #7]
 8002c00:	460b      	mov	r3, r1
 8002c02:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 8002c04:	79bb      	ldrb	r3, [r7, #6]
 8002c06:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002c08:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002c0c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	b299      	uxth	r1, r3
 8002c12:	f107 020c 	add.w	r2, r7, #12
 8002c16:	230a      	movs	r3, #10
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	f107 0018 	add.w	r0, r7, #24
 8002c20:	f000 fe48 	bl	80038b4 <HAL_I2C_Master_Transmit>
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c2e:	b002      	add	sp, #8
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c48:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	4a08      	ldr	r2, [pc, #32]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_MspInit+0x4c>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800

08002c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08e      	sub	sp, #56	; 0x38
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5b      	ldr	r2, [pc, #364]	; (8002e10 <HAL_I2C_MspInit+0x18c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d12c      	bne.n	8002d00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
 8002caa:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a59      	ldr	r2, [pc, #356]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b57      	ldr	r3, [pc, #348]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	623b      	str	r3, [r7, #32]
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cc2:	23c0      	movs	r3, #192	; 0xc0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc6:	2312      	movs	r3, #18
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cda:	4619      	mov	r1, r3
 8002cdc:	484e      	ldr	r0, [pc, #312]	; (8002e18 <HAL_I2C_MspInit+0x194>)
 8002cde:	f000 fabd 	bl	800325c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	4b4b      	ldr	r3, [pc, #300]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a4a      	ldr	r2, [pc, #296]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b48      	ldr	r3, [pc, #288]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cfe:	e083      	b.n	8002e08 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a45      	ldr	r2, [pc, #276]	; (8002e1c <HAL_I2C_MspInit+0x198>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d12d      	bne.n	8002d66 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	4b41      	ldr	r3, [pc, #260]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a40      	ldr	r2, [pc, #256]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b3e      	ldr	r3, [pc, #248]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d2c:	2312      	movs	r3, #18
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d38:	2304      	movs	r3, #4
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d40:	4619      	mov	r1, r3
 8002d42:	4835      	ldr	r0, [pc, #212]	; (8002e18 <HAL_I2C_MspInit+0x194>)
 8002d44:	f000 fa8a 	bl	800325c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	4a30      	ldr	r2, [pc, #192]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d56:	6413      	str	r3, [r2, #64]	; 0x40
 8002d58:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	697b      	ldr	r3, [r7, #20]
}
 8002d64:	e050      	b.n	8002e08 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2d      	ldr	r2, [pc, #180]	; (8002e20 <HAL_I2C_MspInit+0x19c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d14b      	bne.n	8002e08 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	4a26      	ldr	r2, [pc, #152]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d7a:	f043 0304 	orr.w	r3, r3, #4
 8002d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d80:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	4a1f      	ldr	r2, [pc, #124]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dae:	2312      	movs	r3, #18
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db6:	2303      	movs	r3, #3
 8002db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dba:	2304      	movs	r3, #4
 8002dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4817      	ldr	r0, [pc, #92]	; (8002e24 <HAL_I2C_MspInit+0x1a0>)
 8002dc6:	f000 fa49 	bl	800325c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd0:	2312      	movs	r3, #18
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ddc:	2304      	movs	r3, #4
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de4:	4619      	mov	r1, r3
 8002de6:	4810      	ldr	r0, [pc, #64]	; (8002e28 <HAL_I2C_MspInit+0x1a4>)
 8002de8:	f000 fa38 	bl	800325c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dec:	2300      	movs	r3, #0
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002df6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_I2C_MspInit+0x190>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
}
 8002e08:	bf00      	nop
 8002e0a:	3738      	adds	r7, #56	; 0x38
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40005400 	.word	0x40005400
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	40005800 	.word	0x40005800
 8002e20:	40005c00 	.word	0x40005c00
 8002e24:	40020800 	.word	0x40020800
 8002e28:	40020000 	.word	0x40020000

08002e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <NMI_Handler+0x4>

08002e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e36:	e7fe      	b.n	8002e36 <HardFault_Handler+0x4>

08002e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e3c:	e7fe      	b.n	8002e3c <MemManage_Handler+0x4>

08002e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e42:	e7fe      	b.n	8002e42 <BusFault_Handler+0x4>

08002e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e48:	e7fe      	b.n	8002e48 <UsageFault_Handler+0x4>

08002e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e78:	f000 f89a 	bl	8002fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <OTG_FS_IRQHandler+0x10>)
 8002e86:	f001 ff8e 	bl	8004da6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20001ea4 	.word	0x20001ea4

08002e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <SystemInit+0x20>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <SystemInit+0x20>)
 8002ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ebc:	480d      	ldr	r0, [pc, #52]	; (8002ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ebe:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ec0:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec4:	e002      	b.n	8002ecc <LoopCopyDataInit>

08002ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eca:	3304      	adds	r3, #4

08002ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed0:	d3f9      	bcc.n	8002ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ed4:	4c0b      	ldr	r4, [pc, #44]	; (8002f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed8:	e001      	b.n	8002ede <LoopFillZerobss>

08002eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002edc:	3204      	adds	r2, #4

08002ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee0:	d3fb      	bcc.n	8002eda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ee2:	f7ff ffd7 	bl	8002e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ee6:	f007 f8af 	bl	800a048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eea:	f7fe f979 	bl	80011e0 <main>
  bx  lr    
 8002eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002efc:	0800b078 	.word	0x0800b078
  ldr r2, =_sbss
 8002f00:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002f04:	200022ac 	.word	0x200022ac

08002f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f08:	e7fe      	b.n	8002f08 <ADC_IRQHandler>
	...

08002f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_Init+0x40>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0d      	ldr	r2, [pc, #52]	; (8002f4c <HAL_Init+0x40>)
 8002f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_Init+0x40>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <HAL_Init+0x40>)
 8002f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <HAL_Init+0x40>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <HAL_Init+0x40>)
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f34:	2003      	movs	r0, #3
 8002f36:	f000 f94f 	bl	80031d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f3a:	200f      	movs	r0, #15
 8002f3c:	f000 f808 	bl	8002f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f40:	f7ff fe78 	bl	8002c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023c00 	.word	0x40023c00

08002f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_InitTick+0x54>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_InitTick+0x58>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	4619      	mov	r1, r3
 8002f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f967 	bl	8003242 <HAL_SYSTICK_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e00e      	b.n	8002f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b0f      	cmp	r3, #15
 8002f82:	d80a      	bhi.n	8002f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f84:	2200      	movs	r2, #0
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f8c:	f000 f92f 	bl	80031ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f90:	4a06      	ldr	r2, [pc, #24]	; (8002fac <HAL_InitTick+0x5c>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000008 	.word	0x20000008
 8002fa8:	20000010 	.word	0x20000010
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_IncTick+0x20>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_IncTick+0x24>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <HAL_IncTick+0x24>)
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	20000010 	.word	0x20000010
 8002fd4:	200009d0 	.word	0x200009d0

08002fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return uwTick;
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_GetTick+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	200009d0 	.word	0x200009d0

08002ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff8:	f7ff ffee 	bl	8002fd8 <HAL_GetTick>
 8002ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003008:	d005      	beq.n	8003016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_Delay+0x44>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4413      	add	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003016:	bf00      	nop
 8003018:	f7ff ffde 	bl	8002fd8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	429a      	cmp	r2, r3
 8003026:	d8f7      	bhi.n	8003018 <HAL_Delay+0x28>
  {
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000010 	.word	0x20000010

08003038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003054:	4013      	ands	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306a:	4a04      	ldr	r2, [pc, #16]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	60d3      	str	r3, [r2, #12]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <__NVIC_GetPriorityGrouping+0x18>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 0307 	and.w	r3, r3, #7
}
 800308e:	4618      	mov	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	db0b      	blt.n	80030c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	4907      	ldr	r1, [pc, #28]	; (80030d4 <__NVIC_EnableIRQ+0x38>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2001      	movs	r0, #1
 80030be:	fa00 f202 	lsl.w	r2, r0, r2
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	db0a      	blt.n	8003102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <__NVIC_SetPriority+0x4c>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003100:	e00a      	b.n	8003118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <__NVIC_SetPriority+0x50>)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	3b04      	subs	r3, #4
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	440b      	add	r3, r1
 8003116:	761a      	strb	r2, [r3, #24]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000e100 	.word	0xe000e100
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f1c3 0307 	rsb	r3, r3, #7
 8003146:	2b04      	cmp	r3, #4
 8003148:	bf28      	it	cs
 800314a:	2304      	movcs	r3, #4
 800314c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3304      	adds	r3, #4
 8003152:	2b06      	cmp	r3, #6
 8003154:	d902      	bls.n	800315c <NVIC_EncodePriority+0x30>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3b03      	subs	r3, #3
 800315a:	e000      	b.n	800315e <NVIC_EncodePriority+0x32>
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003174:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43d9      	mvns	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	4313      	orrs	r3, r2
         );
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a4:	d301      	bcc.n	80031aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00f      	b.n	80031ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <SysTick_Config+0x40>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b2:	210f      	movs	r1, #15
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031b8:	f7ff ff8e 	bl	80030d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <SysTick_Config+0x40>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c2:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <SysTick_Config+0x40>)
 80031c4:	2207      	movs	r2, #7
 80031c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	e000e010 	.word	0xe000e010

080031d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff29 	bl	8003038 <__NVIC_SetPriorityGrouping>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003200:	f7ff ff3e 	bl	8003080 <__NVIC_GetPriorityGrouping>
 8003204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	6978      	ldr	r0, [r7, #20]
 800320c:	f7ff ff8e 	bl	800312c <NVIC_EncodePriority>
 8003210:	4602      	mov	r2, r0
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff5d 	bl	80030d8 <__NVIC_SetPriority>
}
 800321e:	bf00      	nop
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff31 	bl	800309c <__NVIC_EnableIRQ>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffa2 	bl	8003194 <SysTick_Config>
 8003250:	4603      	mov	r3, r0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	; 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	e16b      	b.n	8003550 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003278:	2201      	movs	r2, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	f040 815a 	bne.w	800354a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d005      	beq.n	80032ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d130      	bne.n	8003310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	2203      	movs	r2, #3
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032e4:	2201      	movs	r2, #1
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f003 0201 	and.w	r2, r3, #1
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b03      	cmp	r3, #3
 800331a:	d017      	beq.n	800334c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d123      	bne.n	80033a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	08da      	lsrs	r2, r3, #3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3208      	adds	r2, #8
 8003360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	220f      	movs	r2, #15
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	08da      	lsrs	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3208      	adds	r2, #8
 800339a:	69b9      	ldr	r1, [r7, #24]
 800339c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2203      	movs	r2, #3
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0203 	and.w	r2, r3, #3
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80b4 	beq.w	800354a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	4b60      	ldr	r3, [pc, #384]	; (8003568 <HAL_GPIO_Init+0x30c>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a5f      	ldr	r2, [pc, #380]	; (8003568 <HAL_GPIO_Init+0x30c>)
 80033ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b5d      	ldr	r3, [pc, #372]	; (8003568 <HAL_GPIO_Init+0x30c>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033fe:	4a5b      	ldr	r2, [pc, #364]	; (800356c <HAL_GPIO_Init+0x310>)
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	3302      	adds	r3, #2
 8003406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	220f      	movs	r2, #15
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a52      	ldr	r2, [pc, #328]	; (8003570 <HAL_GPIO_Init+0x314>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02b      	beq.n	8003482 <HAL_GPIO_Init+0x226>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a51      	ldr	r2, [pc, #324]	; (8003574 <HAL_GPIO_Init+0x318>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d025      	beq.n	800347e <HAL_GPIO_Init+0x222>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a50      	ldr	r2, [pc, #320]	; (8003578 <HAL_GPIO_Init+0x31c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01f      	beq.n	800347a <HAL_GPIO_Init+0x21e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4f      	ldr	r2, [pc, #316]	; (800357c <HAL_GPIO_Init+0x320>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d019      	beq.n	8003476 <HAL_GPIO_Init+0x21a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4e      	ldr	r2, [pc, #312]	; (8003580 <HAL_GPIO_Init+0x324>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_GPIO_Init+0x216>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4d      	ldr	r2, [pc, #308]	; (8003584 <HAL_GPIO_Init+0x328>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00d      	beq.n	800346e <HAL_GPIO_Init+0x212>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a4c      	ldr	r2, [pc, #304]	; (8003588 <HAL_GPIO_Init+0x32c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <HAL_GPIO_Init+0x20e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a4b      	ldr	r2, [pc, #300]	; (800358c <HAL_GPIO_Init+0x330>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_GPIO_Init+0x20a>
 8003462:	2307      	movs	r3, #7
 8003464:	e00e      	b.n	8003484 <HAL_GPIO_Init+0x228>
 8003466:	2308      	movs	r3, #8
 8003468:	e00c      	b.n	8003484 <HAL_GPIO_Init+0x228>
 800346a:	2306      	movs	r3, #6
 800346c:	e00a      	b.n	8003484 <HAL_GPIO_Init+0x228>
 800346e:	2305      	movs	r3, #5
 8003470:	e008      	b.n	8003484 <HAL_GPIO_Init+0x228>
 8003472:	2304      	movs	r3, #4
 8003474:	e006      	b.n	8003484 <HAL_GPIO_Init+0x228>
 8003476:	2303      	movs	r3, #3
 8003478:	e004      	b.n	8003484 <HAL_GPIO_Init+0x228>
 800347a:	2302      	movs	r3, #2
 800347c:	e002      	b.n	8003484 <HAL_GPIO_Init+0x228>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_GPIO_Init+0x228>
 8003482:	2300      	movs	r3, #0
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	f002 0203 	and.w	r2, r2, #3
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	4093      	lsls	r3, r2
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003494:	4935      	ldr	r1, [pc, #212]	; (800356c <HAL_GPIO_Init+0x310>)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	3302      	adds	r3, #2
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034a2:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_GPIO_Init+0x334>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034c6:	4a32      	ldr	r2, [pc, #200]	; (8003590 <HAL_GPIO_Init+0x334>)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034cc:	4b30      	ldr	r3, [pc, #192]	; (8003590 <HAL_GPIO_Init+0x334>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034f0:	4a27      	ldr	r2, [pc, #156]	; (8003590 <HAL_GPIO_Init+0x334>)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_GPIO_Init+0x334>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800351a:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <HAL_GPIO_Init+0x334>)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_GPIO_Init+0x334>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003544:	4a12      	ldr	r2, [pc, #72]	; (8003590 <HAL_GPIO_Init+0x334>)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3301      	adds	r3, #1
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b0f      	cmp	r3, #15
 8003554:	f67f ae90 	bls.w	8003278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	3724      	adds	r7, #36	; 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	40013800 	.word	0x40013800
 8003570:	40020000 	.word	0x40020000
 8003574:	40020400 	.word	0x40020400
 8003578:	40020800 	.word	0x40020800
 800357c:	40020c00 	.word	0x40020c00
 8003580:	40021000 	.word	0x40021000
 8003584:	40021400 	.word	0x40021400
 8003588:	40021800 	.word	0x40021800
 800358c:	40021c00 	.word	0x40021c00
 8003590:	40013c00 	.word	0x40013c00

08003594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e001      	b.n	80035b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d4:	787b      	ldrb	r3, [r7, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e0:	e003      	b.n	80035ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	619a      	str	r2, [r3, #24]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003608:	887a      	ldrh	r2, [r7, #2]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	041a      	lsls	r2, r3, #16
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	43d9      	mvns	r1, r3
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	400b      	ands	r3, r1
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
}
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e12b      	b.n	8003896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fb16 	bl	8002c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800367e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800368e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003690:	f002 ffdc 	bl	800664c <HAL_RCC_GetPCLK1Freq>
 8003694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4a81      	ldr	r2, [pc, #516]	; (80038a0 <HAL_I2C_Init+0x274>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d807      	bhi.n	80036b0 <HAL_I2C_Init+0x84>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a80      	ldr	r2, [pc, #512]	; (80038a4 <HAL_I2C_Init+0x278>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	bf94      	ite	ls
 80036a8:	2301      	movls	r3, #1
 80036aa:	2300      	movhi	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e006      	b.n	80036be <HAL_I2C_Init+0x92>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a7d      	ldr	r2, [pc, #500]	; (80038a8 <HAL_I2C_Init+0x27c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	bf94      	ite	ls
 80036b8:	2301      	movls	r3, #1
 80036ba:	2300      	movhi	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0e7      	b.n	8003896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a78      	ldr	r2, [pc, #480]	; (80038ac <HAL_I2C_Init+0x280>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0c9b      	lsrs	r3, r3, #18
 80036d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a6a      	ldr	r2, [pc, #424]	; (80038a0 <HAL_I2C_Init+0x274>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d802      	bhi.n	8003700 <HAL_I2C_Init+0xd4>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3301      	adds	r3, #1
 80036fe:	e009      	b.n	8003714 <HAL_I2C_Init+0xe8>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	4a69      	ldr	r2, [pc, #420]	; (80038b0 <HAL_I2C_Init+0x284>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	3301      	adds	r3, #1
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	430b      	orrs	r3, r1
 800371a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003726:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	495c      	ldr	r1, [pc, #368]	; (80038a0 <HAL_I2C_Init+0x274>)
 8003730:	428b      	cmp	r3, r1
 8003732:	d819      	bhi.n	8003768 <HAL_I2C_Init+0x13c>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e59      	subs	r1, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003742:	1c59      	adds	r1, r3, #1
 8003744:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003748:	400b      	ands	r3, r1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_I2C_Init+0x138>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1e59      	subs	r1, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	fbb1 f3f3 	udiv	r3, r1, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003762:	e051      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 8003764:	2304      	movs	r3, #4
 8003766:	e04f      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d111      	bne.n	8003794 <HAL_I2C_Init+0x168>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e58      	subs	r0, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	440b      	add	r3, r1
 800377e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003782:	3301      	adds	r3, #1
 8003784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e012      	b.n	80037ba <HAL_I2C_Init+0x18e>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1e58      	subs	r0, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	0099      	lsls	r1, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Init+0x196>
 80037be:	2301      	movs	r3, #1
 80037c0:	e022      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10e      	bne.n	80037e8 <HAL_I2C_Init+0x1bc>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1e58      	subs	r0, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	440b      	add	r3, r1
 80037d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e6:	e00f      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e58      	subs	r0, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	0099      	lsls	r1, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	6809      	ldr	r1, [r1, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003836:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6911      	ldr	r1, [r2, #16]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68d2      	ldr	r2, [r2, #12]
 8003842:	4311      	orrs	r1, r2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	430b      	orrs	r3, r1
 800384a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	000186a0 	.word	0x000186a0
 80038a4:	001e847f 	.word	0x001e847f
 80038a8:	003d08ff 	.word	0x003d08ff
 80038ac:	431bde83 	.word	0x431bde83
 80038b0:	10624dd3 	.word	0x10624dd3

080038b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	461a      	mov	r2, r3
 80038c0:	460b      	mov	r3, r1
 80038c2:	817b      	strh	r3, [r7, #10]
 80038c4:	4613      	mov	r3, r2
 80038c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff fb86 	bl	8002fd8 <HAL_GetTick>
 80038cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	f040 80e0 	bne.w	8003a9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2319      	movs	r3, #25
 80038e2:	2201      	movs	r2, #1
 80038e4:	4970      	ldr	r1, [pc, #448]	; (8003aa8 <HAL_I2C_Master_Transmit+0x1f4>)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 ff30 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
 80038f4:	e0d3      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_I2C_Master_Transmit+0x50>
 8003900:	2302      	movs	r3, #2
 8003902:	e0cc      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d007      	beq.n	800392a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003938:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2221      	movs	r2, #33	; 0x21
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2210      	movs	r2, #16
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	893a      	ldrh	r2, [r7, #8]
 800395a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a50      	ldr	r2, [pc, #320]	; (8003aac <HAL_I2C_Master_Transmit+0x1f8>)
 800396a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800396c:	8979      	ldrh	r1, [r7, #10]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 fcea 	bl	800434c <I2C_MasterRequestWrite>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e08d      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003998:	e066      	b.n	8003a68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	6a39      	ldr	r1, [r7, #32]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 ffaa 	bl	80048f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d107      	bne.n	80039c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e06b      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d11b      	bne.n	8003a3c <HAL_I2C_Master_Transmit+0x188>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d017      	beq.n	8003a3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	6a39      	ldr	r1, [r7, #32]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 ff9a 	bl	800497a <I2C_WaitOnBTFFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00d      	beq.n	8003a68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d107      	bne.n	8003a64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e01a      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d194      	bne.n	800399a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	00100002 	.word	0x00100002
 8003aac:	ffff0000 	.word	0xffff0000

08003ab0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	4608      	mov	r0, r1
 8003aba:	4611      	mov	r1, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	4603      	mov	r3, r0
 8003ac0:	817b      	strh	r3, [r7, #10]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	813b      	strh	r3, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aca:	f7ff fa85 	bl	8002fd8 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	f040 80d9 	bne.w	8003c90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2319      	movs	r3, #25
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	496d      	ldr	r1, [pc, #436]	; (8003c9c <HAL_I2C_Mem_Write+0x1ec>)
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fe2f 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
 8003af6:	e0cc      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_I2C_Mem_Write+0x56>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e0c5      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d007      	beq.n	8003b2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2221      	movs	r2, #33	; 0x21
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2240      	movs	r2, #64	; 0x40
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a3a      	ldr	r2, [r7, #32]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a4d      	ldr	r2, [pc, #308]	; (8003ca0 <HAL_I2C_Mem_Write+0x1f0>)
 8003b6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b6e:	88f8      	ldrh	r0, [r7, #6]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	8979      	ldrh	r1, [r7, #10]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fc66 	bl	8004450 <I2C_RequestMemoryWrite>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d052      	beq.n	8003c30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e081      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 feb0 	bl	80048f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d107      	bne.n	8003bb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e06b      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d11b      	bne.n	8003c30 <HAL_I2C_Mem_Write+0x180>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d017      	beq.n	8003c30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	781a      	ldrb	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1aa      	bne.n	8003b8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fe9c 	bl	800497a <I2C_WaitOnBTFFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00d      	beq.n	8003c64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d107      	bne.n	8003c60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e016      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	00100002 	.word	0x00100002
 8003ca0:	ffff0000 	.word	0xffff0000

08003ca4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08c      	sub	sp, #48	; 0x30
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	817b      	strh	r3, [r7, #10]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	813b      	strh	r3, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cbe:	f7ff f98b 	bl	8002fd8 <HAL_GetTick>
 8003cc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	f040 8208 	bne.w	80040e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2319      	movs	r3, #25
 8003cd8:	2201      	movs	r2, #1
 8003cda:	497b      	ldr	r1, [pc, #492]	; (8003ec8 <HAL_I2C_Mem_Read+0x224>)
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fd35 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e1fb      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_I2C_Mem_Read+0x56>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e1f4      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d007      	beq.n	8003d20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2222      	movs	r2, #34	; 0x22
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2240      	movs	r2, #64	; 0x40
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4a5b      	ldr	r2, [pc, #364]	; (8003ecc <HAL_I2C_Mem_Read+0x228>)
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d62:	88f8      	ldrh	r0, [r7, #6]
 8003d64:	893a      	ldrh	r2, [r7, #8]
 8003d66:	8979      	ldrh	r1, [r7, #10]
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	4603      	mov	r3, r0
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fc02 	bl	800457c <I2C_RequestMemoryRead>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e1b0      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d113      	bne.n	8003db2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	623b      	str	r3, [r7, #32]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	623b      	str	r3, [r7, #32]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e184      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d11b      	bne.n	8003df2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e164      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d11b      	bne.n	8003e32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	e144      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e48:	e138      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	f200 80f1 	bhi.w	8004036 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d123      	bne.n	8003ea4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fdcb 	bl	80049fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e139      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ea2:	e10b      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d14e      	bne.n	8003f4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	4906      	ldr	r1, [pc, #24]	; (8003ed0 <HAL_I2C_Mem_Read+0x22c>)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fc48 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e10e      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
 8003ec6:	bf00      	nop
 8003ec8:	00100002 	.word	0x00100002
 8003ecc:	ffff0000 	.word	0xffff0000
 8003ed0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f48:	e0b8      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	2200      	movs	r2, #0
 8003f52:	4966      	ldr	r1, [pc, #408]	; (80040ec <HAL_I2C_Mem_Read+0x448>)
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fbf9 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0bf      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fac:	2200      	movs	r2, #0
 8003fae:	494f      	ldr	r1, [pc, #316]	; (80040ec <HAL_I2C_Mem_Read+0x448>)
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fbcb 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e091      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004034:	e042      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fcde 	bl	80049fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e04c      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b04      	cmp	r3, #4
 8004088:	d118      	bne.n	80040bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f47f aec2 	bne.w	8003e4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e000      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80040e2:	2302      	movs	r3, #2
  }
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3728      	adds	r7, #40	; 0x28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	00010004 	.word	0x00010004

080040f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	; 0x28
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	460b      	mov	r3, r1
 80040fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004100:	f7fe ff6a 	bl	8002fd8 <HAL_GetTick>
 8004104:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004106:	2301      	movs	r3, #1
 8004108:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b20      	cmp	r3, #32
 8004114:	f040 8111 	bne.w	800433a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2319      	movs	r3, #25
 800411e:	2201      	movs	r2, #1
 8004120:	4988      	ldr	r1, [pc, #544]	; (8004344 <HAL_I2C_IsDeviceReady+0x254>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 fb12 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
 8004130:	e104      	b.n	800433c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_I2C_IsDeviceReady+0x50>
 800413c:	2302      	movs	r3, #2
 800413e:	e0fd      	b.n	800433c <HAL_I2C_IsDeviceReady+0x24c>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d007      	beq.n	8004166 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0201 	orr.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004174:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2224      	movs	r2, #36	; 0x24
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a70      	ldr	r2, [pc, #448]	; (8004348 <HAL_I2C_IsDeviceReady+0x258>)
 8004188:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004198:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fad0 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00d      	beq.n	80041ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c0:	d103      	bne.n	80041ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e0b6      	b.n	800433c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ce:	897b      	ldrh	r3, [r7, #10]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80041de:	f7fe fefb 	bl	8002fd8 <HAL_GetTick>
 80041e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004212:	e025      	b.n	8004260 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004214:	f7fe fee0 	bl	8002fd8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d302      	bcc.n	800422a <HAL_I2C_IsDeviceReady+0x13a>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	22a0      	movs	r2, #160	; 0xa0
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004256:	bf0c      	ite	eq
 8004258:	2301      	moveq	r3, #1
 800425a:	2300      	movne	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2ba0      	cmp	r3, #160	; 0xa0
 800426a:	d005      	beq.n	8004278 <HAL_I2C_IsDeviceReady+0x188>
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <HAL_I2C_IsDeviceReady+0x188>
 8004272:	7dbb      	ldrb	r3, [r7, #22]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0cd      	beq.n	8004214 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b02      	cmp	r3, #2
 800428c:	d129      	bne.n	80042e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	2319      	movs	r3, #25
 80042ba:	2201      	movs	r2, #1
 80042bc:	4921      	ldr	r1, [pc, #132]	; (8004344 <HAL_I2C_IsDeviceReady+0x254>)
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fa44 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e036      	b.n	800433c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e02c      	b.n	800433c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2319      	movs	r3, #25
 8004302:	2201      	movs	r2, #1
 8004304:	490f      	ldr	r1, [pc, #60]	; (8004344 <HAL_I2C_IsDeviceReady+0x254>)
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fa20 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e012      	b.n	800433c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	3301      	adds	r3, #1
 800431a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	429a      	cmp	r2, r3
 8004322:	f4ff af32 	bcc.w	800418a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800433a:	2302      	movs	r3, #2
  }
}
 800433c:	4618      	mov	r0, r3
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	00100002 	.word	0x00100002
 8004348:	ffff0000 	.word	0xffff0000

0800434c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	460b      	mov	r3, r1
 800435a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d006      	beq.n	8004376 <I2C_MasterRequestWrite+0x2a>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d003      	beq.n	8004376 <I2C_MasterRequestWrite+0x2a>
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004374:	d108      	bne.n	8004388 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e00b      	b.n	80043a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	2b12      	cmp	r3, #18
 800438e:	d107      	bne.n	80043a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f9cd 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c6:	d103      	bne.n	80043d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e035      	b.n	8004440 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043dc:	d108      	bne.n	80043f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043de:	897b      	ldrh	r3, [r7, #10]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043ec:	611a      	str	r2, [r3, #16]
 80043ee:	e01b      	b.n	8004428 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043f0:	897b      	ldrh	r3, [r7, #10]
 80043f2:	11db      	asrs	r3, r3, #7
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f003 0306 	and.w	r3, r3, #6
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f063 030f 	orn	r3, r3, #15
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <I2C_MasterRequestWrite+0xfc>)
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f9f3 	bl	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e010      	b.n	8004440 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4907      	ldr	r1, [pc, #28]	; (800444c <I2C_MasterRequestWrite+0x100>)
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f9e3 	bl	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	00010008 	.word	0x00010008
 800444c:	00010002 	.word	0x00010002

08004450 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	4608      	mov	r0, r1
 800445a:	4611      	mov	r1, r2
 800445c:	461a      	mov	r2, r3
 800445e:	4603      	mov	r3, r0
 8004460:	817b      	strh	r3, [r7, #10]
 8004462:	460b      	mov	r3, r1
 8004464:	813b      	strh	r3, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004478:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	2200      	movs	r2, #0
 8004482:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 f960 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00d      	beq.n	80044ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a0:	d103      	bne.n	80044aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e05f      	b.n	800456e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ae:	897b      	ldrh	r3, [r7, #10]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	492d      	ldr	r1, [pc, #180]	; (8004578 <I2C_RequestMemoryWrite+0x128>)
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f998 	bl	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e04c      	b.n	800456e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	6a39      	ldr	r1, [r7, #32]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fa02 	bl	80048f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00d      	beq.n	8004516 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d107      	bne.n	8004512 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004510:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e02b      	b.n	800456e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d105      	bne.n	8004528 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800451c:	893b      	ldrh	r3, [r7, #8]
 800451e:	b2da      	uxtb	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	611a      	str	r2, [r3, #16]
 8004526:	e021      	b.n	800456c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004528:	893b      	ldrh	r3, [r7, #8]
 800452a:	0a1b      	lsrs	r3, r3, #8
 800452c:	b29b      	uxth	r3, r3
 800452e:	b2da      	uxtb	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004538:	6a39      	ldr	r1, [r7, #32]
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f9dc 	bl	80048f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00d      	beq.n	8004562 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	2b04      	cmp	r3, #4
 800454c:	d107      	bne.n	800455e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e005      	b.n	800456e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004562:	893b      	ldrh	r3, [r7, #8]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	00010002 	.word	0x00010002

0800457c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	4608      	mov	r0, r1
 8004586:	4611      	mov	r1, r2
 8004588:	461a      	mov	r2, r3
 800458a:	4603      	mov	r3, r0
 800458c:	817b      	strh	r3, [r7, #10]
 800458e:	460b      	mov	r3, r1
 8004590:	813b      	strh	r3, [r7, #8]
 8004592:	4613      	mov	r3, r2
 8004594:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	2200      	movs	r2, #0
 80045be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f8c2 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045dc:	d103      	bne.n	80045e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e0aa      	b.n	8004740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ea:	897b      	ldrh	r3, [r7, #10]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	6a3a      	ldr	r2, [r7, #32]
 80045fe:	4952      	ldr	r1, [pc, #328]	; (8004748 <I2C_RequestMemoryRead+0x1cc>)
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f8fa 	bl	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e097      	b.n	8004740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	6a39      	ldr	r1, [r7, #32]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f964 	bl	80048f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00d      	beq.n	8004652 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b04      	cmp	r3, #4
 800463c:	d107      	bne.n	800464e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e076      	b.n	8004740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004658:	893b      	ldrh	r3, [r7, #8]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	611a      	str	r2, [r3, #16]
 8004662:	e021      	b.n	80046a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004664:	893b      	ldrh	r3, [r7, #8]
 8004666:	0a1b      	lsrs	r3, r3, #8
 8004668:	b29b      	uxth	r3, r3
 800466a:	b2da      	uxtb	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004674:	6a39      	ldr	r1, [r7, #32]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f93e 	bl	80048f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00d      	beq.n	800469e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	2b04      	cmp	r3, #4
 8004688:	d107      	bne.n	800469a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004698:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e050      	b.n	8004740 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800469e:	893b      	ldrh	r3, [r7, #8]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046aa:	6a39      	ldr	r1, [r7, #32]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f923 	bl	80048f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00d      	beq.n	80046d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d107      	bne.n	80046d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e035      	b.n	8004740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f82b 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00d      	beq.n	8004718 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470a:	d103      	bne.n	8004714 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e013      	b.n	8004740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004718:	897b      	ldrh	r3, [r7, #10]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	b2da      	uxtb	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	6a3a      	ldr	r2, [r7, #32]
 800472c:	4906      	ldr	r1, [pc, #24]	; (8004748 <I2C_RequestMemoryRead+0x1cc>)
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f863 	bl	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	00010002 	.word	0x00010002

0800474c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800475c:	e025      	b.n	80047aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004764:	d021      	beq.n	80047aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004766:	f7fe fc37 	bl	8002fd8 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d302      	bcc.n	800477c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d116      	bne.n	80047aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f043 0220 	orr.w	r2, r3, #32
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e023      	b.n	80047f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d10d      	bne.n	80047d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	43da      	mvns	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4013      	ands	r3, r2
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf0c      	ite	eq
 80047c6:	2301      	moveq	r3, #1
 80047c8:	2300      	movne	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	e00c      	b.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	43da      	mvns	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4013      	ands	r3, r2
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d0b6      	beq.n	800475e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004808:	e051      	b.n	80048ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004818:	d123      	bne.n	8004862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004828:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004832:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f043 0204 	orr.w	r2, r3, #4
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e046      	b.n	80048f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004868:	d021      	beq.n	80048ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fe fbb5 	bl	8002fd8 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d116      	bne.n	80048ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e020      	b.n	80048f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10c      	bne.n	80048d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	43da      	mvns	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf14      	ite	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	2300      	moveq	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	e00b      	b.n	80048ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	43da      	mvns	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4013      	ands	r3, r2
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d18d      	bne.n	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004904:	e02d      	b.n	8004962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f8ce 	bl	8004aa8 <I2C_IsAcknowledgeFailed>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e02d      	b.n	8004972 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800491c:	d021      	beq.n	8004962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491e:	f7fe fb5b 	bl	8002fd8 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	d302      	bcc.n	8004934 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d116      	bne.n	8004962 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e007      	b.n	8004972 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496c:	2b80      	cmp	r3, #128	; 0x80
 800496e:	d1ca      	bne.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004986:	e02d      	b.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f88d 	bl	8004aa8 <I2C_IsAcknowledgeFailed>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e02d      	b.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800499e:	d021      	beq.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a0:	f7fe fb1a 	bl	8002fd8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d302      	bcc.n	80049b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d116      	bne.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f043 0220 	orr.w	r2, r3, #32
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e007      	b.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d1ca      	bne.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a08:	e042      	b.n	8004a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d119      	bne.n	8004a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0210 	mvn.w	r2, #16
 8004a20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e029      	b.n	8004aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4c:	f7fe fac4 	bl	8002fd8 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d302      	bcc.n	8004a62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d116      	bne.n	8004a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	f043 0220 	orr.w	r2, r3, #32
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e007      	b.n	8004aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d1b5      	bne.n	8004a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abe:	d11b      	bne.n	8004af8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ac8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f043 0204 	orr.w	r2, r3, #4
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b08:	b08f      	sub	sp, #60	; 0x3c
 8004b0a:	af0a      	add	r7, sp, #40	; 0x28
 8004b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e10f      	b.n	8004d38 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f004 ff6e 	bl	8009a14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 fea1 	bl	800689e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	603b      	str	r3, [r7, #0]
 8004b62:	687e      	ldr	r6, [r7, #4]
 8004b64:	466d      	mov	r5, sp
 8004b66:	f106 0410 	add.w	r4, r6, #16
 8004b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b76:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b7a:	1d33      	adds	r3, r6, #4
 8004b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b7e:	6838      	ldr	r0, [r7, #0]
 8004b80:	f001 fd78 	bl	8006674 <USB_CoreInit>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e0d0      	b.n	8004d38 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 fe8f 	bl	80068c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
 8004ba6:	e04a      	b.n	8004c3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ba8:	7bfa      	ldrb	r2, [r7, #15]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	333d      	adds	r3, #61	; 0x3d
 8004bb8:	2201      	movs	r2, #1
 8004bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bbc:	7bfa      	ldrb	r2, [r7, #15]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	333c      	adds	r3, #60	; 0x3c
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bd0:	7bfa      	ldrb	r2, [r7, #15]
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	b298      	uxth	r0, r3
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	3342      	adds	r3, #66	; 0x42
 8004be4:	4602      	mov	r2, r0
 8004be6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004be8:	7bfa      	ldrb	r2, [r7, #15]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	333f      	adds	r3, #63	; 0x3f
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004bfc:	7bfa      	ldrb	r2, [r7, #15]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	3344      	adds	r3, #68	; 0x44
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c10:	7bfa      	ldrb	r2, [r7, #15]
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	3348      	adds	r3, #72	; 0x48
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c24:	7bfa      	ldrb	r2, [r7, #15]
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	3350      	adds	r3, #80	; 0x50
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d3af      	bcc.n	8004ba8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	73fb      	strb	r3, [r7, #15]
 8004c4c:	e044      	b.n	8004cd8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c4e:	7bfa      	ldrb	r2, [r7, #15]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c64:	7bfa      	ldrb	r2, [r7, #15]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004c76:	7bfa      	ldrb	r2, [r7, #15]
 8004c78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c90:	7bfa      	ldrb	r2, [r7, #15]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ca6:	7bfa      	ldrb	r2, [r7, #15]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cbc:	7bfa      	ldrb	r2, [r7, #15]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	7bfa      	ldrb	r2, [r7, #15]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d3b5      	bcc.n	8004c4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	687e      	ldr	r6, [r7, #4]
 8004cea:	466d      	mov	r5, sp
 8004cec:	f106 0410 	add.w	r4, r6, #16
 8004cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d00:	1d33      	adds	r3, r6, #4
 8004d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d04:	6838      	ldr	r0, [r7, #0]
 8004d06:	f001 fe27 	bl	8006958 <USB_DevInit>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e00d      	b.n	8004d38 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f002 fea3 	bl	8007a7c <USB_DevDisconnect>

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_PCD_Start+0x1c>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e020      	b.n	8004d9e <HAL_PCD_Start+0x5e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d109      	bne.n	8004d80 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d005      	beq.n	8004d80 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 fd79 	bl	800687c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f002 fe53 	bl	8007a3a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004da6:	b590      	push	{r4, r7, lr}
 8004da8:	b08d      	sub	sp, #52	; 0x34
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f002 ff11 	bl	8007be4 <USB_GetMode>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 839d 	bne.w	8005504 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f002 fe75 	bl	8007abe <USB_ReadInterrupts>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8393 	beq.w	8005502 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f002 fe6c 	bl	8007abe <USB_ReadInterrupts>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d107      	bne.n	8004e00 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f002 0202 	and.w	r2, r2, #2
 8004dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f002 fe5a 	bl	8007abe <USB_ReadInterrupts>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d161      	bne.n	8004ed8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0210 	bic.w	r2, r2, #16
 8004e22:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f003 020f 	and.w	r2, r3, #15
 8004e30:	4613      	mov	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4413      	add	r3, r2
 8004e40:	3304      	adds	r3, #4
 8004e42:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	0c5b      	lsrs	r3, r3, #17
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d124      	bne.n	8004e9a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d035      	beq.n	8004ec8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6a38      	ldr	r0, [r7, #32]
 8004e70:	f002 fc91 	bl	8007796 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	091b      	lsrs	r3, r3, #4
 8004e7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e80:	441a      	add	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e92:	441a      	add	r2, r3
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	619a      	str	r2, [r3, #24]
 8004e98:	e016      	b.n	8004ec8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	0c5b      	lsrs	r3, r3, #17
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d110      	bne.n	8004ec8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004eac:	2208      	movs	r2, #8
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6a38      	ldr	r0, [r7, #32]
 8004eb2:	f002 fc70 	bl	8007796 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ec2:	441a      	add	r2, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0210 	orr.w	r2, r2, #16
 8004ed6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f002 fdee 	bl	8007abe <USB_ReadInterrupts>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004eec:	d16e      	bne.n	8004fcc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f002 fdf4 	bl	8007ae4 <USB_ReadDevAllOutEpInterrupt>
 8004efc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004efe:	e062      	b.n	8004fc6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d057      	beq.n	8004fba <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f002 fe19 	bl	8007b4c <USB_ReadDevOutEPInterrupt>
 8004f1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00c      	beq.n	8004f40 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	461a      	mov	r2, r3
 8004f34:	2301      	movs	r3, #1
 8004f36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fdb0 	bl	8005aa0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f56:	461a      	mov	r2, r3
 8004f58:	2308      	movs	r3, #8
 8004f5a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 feaa 	bl	8005cb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d008      	beq.n	8004f9c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	461a      	mov	r2, r3
 8004f98:	2320      	movs	r3, #32
 8004f9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fb8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d199      	bne.n	8004f00 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f002 fd74 	bl	8007abe <USB_ReadInterrupts>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fe0:	f040 80c0 	bne.w	8005164 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f002 fd95 	bl	8007b18 <USB_ReadDevAllInEpInterrupt>
 8004fee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ff4:	e0b2      	b.n	800515c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80a7 	beq.w	8005150 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	4611      	mov	r1, r2
 800500c:	4618      	mov	r0, r3
 800500e:	f002 fdbb 	bl	8007b88 <USB_ReadDevInEPInterrupt>
 8005012:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d057      	beq.n	80050ce <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	2201      	movs	r2, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	43db      	mvns	r3, r3
 8005038:	69f9      	ldr	r1, [r7, #28]
 800503a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800503e:	4013      	ands	r3, r2
 8005040:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	461a      	mov	r2, r3
 8005050:	2301      	movs	r3, #1
 8005052:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d132      	bne.n	80050c2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	3348      	adds	r3, #72	; 0x48
 800506c:	6819      	ldr	r1, [r3, #0]
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005072:	4613      	mov	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4403      	add	r3, r0
 800507c:	3344      	adds	r3, #68	; 0x44
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4419      	add	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005086:	4613      	mov	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4403      	add	r3, r0
 8005090:	3348      	adds	r3, #72	; 0x48
 8005092:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	2b00      	cmp	r3, #0
 8005098:	d113      	bne.n	80050c2 <HAL_PCD_IRQHandler+0x31c>
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509e:	4613      	mov	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	3350      	adds	r3, #80	; 0x50
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d108      	bne.n	80050c2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050ba:	461a      	mov	r2, r3
 80050bc:	2101      	movs	r1, #1
 80050be:	f002 fdc3 	bl	8007c48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f004 fd24 	bl	8009b16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	461a      	mov	r2, r3
 80050e6:	2308      	movs	r3, #8
 80050e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	461a      	mov	r2, r3
 8005102:	2310      	movs	r3, #16
 8005104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	461a      	mov	r2, r3
 800511e:	2340      	movs	r3, #64	; 0x40
 8005120:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	461a      	mov	r2, r3
 800513a:	2302      	movs	r3, #2
 800513c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fc1b 	bl	8005986 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	3301      	adds	r3, #1
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	2b00      	cmp	r3, #0
 8005160:	f47f af49 	bne.w	8004ff6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f002 fca8 	bl	8007abe <USB_ReadInterrupts>
 800516e:	4603      	mov	r3, r0
 8005170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005178:	d122      	bne.n	80051c0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005194:	2b01      	cmp	r3, #1
 8005196:	d108      	bne.n	80051aa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051a0:	2100      	movs	r1, #0
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fe26 	bl	8005df4 <HAL_PCDEx_LPM_Callback>
 80051a8:	e002      	b.n	80051b0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f004 fd2a 	bl	8009c04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80051be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f002 fc7a 	bl	8007abe <USB_ReadInterrupts>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d4:	d112      	bne.n	80051fc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d102      	bne.n	80051ec <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f004 fce6 	bl	8009bb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80051fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f002 fc5c 	bl	8007abe <USB_ReadInterrupts>
 8005206:	4603      	mov	r3, r0
 8005208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005210:	f040 80c7 	bne.w	80053a2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2110      	movs	r1, #16
 800522e:	4618      	mov	r0, r3
 8005230:	f001 fcf6 	bl	8006c20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005238:	e056      	b.n	80052e8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	461a      	mov	r2, r3
 8005248:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800524c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005268:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800526c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005288:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800528c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	461a      	mov	r2, r3
 800529c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	3301      	adds	r3, #1
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d3a3      	bcc.n	800523a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005300:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005304:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	2b00      	cmp	r3, #0
 800530c:	d016      	beq.n	800533c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800531e:	f043 030b 	orr.w	r3, r3, #11
 8005322:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005334:	f043 030b 	orr.w	r3, r3, #11
 8005338:	6453      	str	r3, [r2, #68]	; 0x44
 800533a:	e015      	b.n	8005368 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800534e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005352:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005362:	f043 030b 	orr.w	r3, r3, #11
 8005366:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005376:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800537a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800538c:	461a      	mov	r2, r3
 800538e:	f002 fc5b 	bl	8007c48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695a      	ldr	r2, [r3, #20]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f002 fb89 	bl	8007abe <USB_ReadInterrupts>
 80053ac:	4603      	mov	r3, r0
 80053ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b6:	d124      	bne.n	8005402 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f002 fc1f 	bl	8007c00 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 fc87 	bl	8006cda <USB_GetDevSpeed>
 80053cc:	4603      	mov	r3, r0
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681c      	ldr	r4, [r3, #0]
 80053d8:	f001 f92c 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 80053dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	4620      	mov	r0, r4
 80053e8:	f001 f9a6 	bl	8006738 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f004 fbba 	bl	8009b66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005400:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f002 fb59 	bl	8007abe <USB_ReadInterrupts>
 800540c:	4603      	mov	r3, r0
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b08      	cmp	r3, #8
 8005414:	d10a      	bne.n	800542c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f004 fb97 	bl	8009b4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f002 0208 	and.w	r2, r2, #8
 800542a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f002 fb44 	bl	8007abe <USB_ReadInterrupts>
 8005436:	4603      	mov	r3, r0
 8005438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800543c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005440:	d10f      	bne.n	8005462 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	b2db      	uxtb	r3, r3
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f004 fbf9 	bl	8009c44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005460:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f002 fb29 	bl	8007abe <USB_ReadInterrupts>
 800546c:	4603      	mov	r3, r0
 800546e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005476:	d10f      	bne.n	8005498 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	b2db      	uxtb	r3, r3
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f004 fbcc 	bl	8009c20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005496:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f002 fb0e 	bl	8007abe <USB_ReadInterrupts>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ac:	d10a      	bne.n	80054c4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f004 fbda 	bl	8009c68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f002 faf8 	bl	8007abe <USB_ReadInterrupts>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d115      	bne.n	8005504 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f004 fbca 	bl	8009c84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6859      	ldr	r1, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	605a      	str	r2, [r3, #4]
 8005500:	e000      	b.n	8005504 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005502:	bf00      	nop
    }
  }
}
 8005504:	3734      	adds	r7, #52	; 0x34
 8005506:	46bd      	mov	sp, r7
 8005508:	bd90      	pop	{r4, r7, pc}

0800550a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_PCD_SetAddress+0x1a>
 8005520:	2302      	movs	r3, #2
 8005522:	e013      	b.n	800554c <HAL_PCD_SetAddress+0x42>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	78fa      	ldrb	r2, [r7, #3]
 8005530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	4611      	mov	r1, r2
 800553c:	4618      	mov	r0, r3
 800553e:	f002 fa56 	bl	80079ee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	4608      	mov	r0, r1
 800555e:	4611      	mov	r1, r2
 8005560:	461a      	mov	r2, r3
 8005562:	4603      	mov	r3, r0
 8005564:	70fb      	strb	r3, [r7, #3]
 8005566:	460b      	mov	r3, r1
 8005568:	803b      	strh	r3, [r7, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005572:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005576:	2b00      	cmp	r3, #0
 8005578:	da0f      	bge.n	800559a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	f003 020f 	and.w	r2, r3, #15
 8005580:	4613      	mov	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	3338      	adds	r3, #56	; 0x38
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	4413      	add	r3, r2
 800558e:	3304      	adds	r3, #4
 8005590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	705a      	strb	r2, [r3, #1]
 8005598:	e00f      	b.n	80055ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	f003 020f 	and.w	r2, r3, #15
 80055a0:	4613      	mov	r3, r2
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	4413      	add	r3, r2
 80055b0:	3304      	adds	r3, #4
 80055b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055c6:	883a      	ldrh	r2, [r7, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	78ba      	ldrb	r2, [r7, #2]
 80055d0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	785b      	ldrb	r3, [r3, #1]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d004      	beq.n	80055e4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055e4:	78bb      	ldrb	r3, [r7, #2]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d102      	bne.n	80055f0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_PCD_EP_Open+0xaa>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e00e      	b.n	800561c <HAL_PCD_EP_Open+0xc8>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	4618      	mov	r0, r3
 800560e:	f001 fb89 	bl	8006d24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800561a:	7afb      	ldrb	r3, [r7, #11]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005634:	2b00      	cmp	r3, #0
 8005636:	da0f      	bge.n	8005658 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	f003 020f 	and.w	r2, r3, #15
 800563e:	4613      	mov	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	3338      	adds	r3, #56	; 0x38
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4413      	add	r3, r2
 800564c:	3304      	adds	r3, #4
 800564e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	705a      	strb	r2, [r3, #1]
 8005656:	e00f      	b.n	8005678 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	f003 020f 	and.w	r2, r3, #15
 800565e:	4613      	mov	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	3304      	adds	r3, #4
 8005670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	b2da      	uxtb	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_PCD_EP_Close+0x6e>
 800568e:	2302      	movs	r3, #2
 8005690:	e00e      	b.n	80056b0 <HAL_PCD_EP_Close+0x8c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f001 fbc7 	bl	8006e34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	460b      	mov	r3, r1
 80056c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056c8:	7afb      	ldrb	r3, [r7, #11]
 80056ca:	f003 020f 	and.w	r2, r3, #15
 80056ce:	4613      	mov	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	3304      	adds	r3, #4
 80056e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2200      	movs	r2, #0
 80056f2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2200      	movs	r2, #0
 80056f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056fa:	7afb      	ldrb	r3, [r7, #11]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	b2da      	uxtb	r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d102      	bne.n	8005714 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005714:	7afb      	ldrb	r3, [r7, #11]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	2b00      	cmp	r3, #0
 800571c:	d109      	bne.n	8005732 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	6979      	ldr	r1, [r7, #20]
 800572c:	f001 fea2 	bl	8007474 <USB_EP0StartXfer>
 8005730:	e008      	b.n	8005744 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	6979      	ldr	r1, [r7, #20]
 8005740:	f001 fc54 	bl	8006fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	460b      	mov	r3, r1
 8005758:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800575a:	78fb      	ldrb	r3, [r7, #3]
 800575c:	f003 020f 	and.w	r2, r3, #15
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005770:	681b      	ldr	r3, [r3, #0]
}
 8005772:	4618      	mov	r0, r3
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b086      	sub	sp, #24
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	460b      	mov	r3, r1
 800578c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800578e:	7afb      	ldrb	r3, [r7, #11]
 8005790:	f003 020f 	and.w	r2, r3, #15
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	3338      	adds	r3, #56	; 0x38
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	3304      	adds	r3, #4
 80057a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2201      	movs	r2, #1
 80057bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057be:	7afb      	ldrb	r3, [r7, #11]
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d102      	bne.n	80057d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057d8:	7afb      	ldrb	r3, [r7, #11]
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	6979      	ldr	r1, [r7, #20]
 80057f0:	f001 fe40 	bl	8007474 <USB_EP0StartXfer>
 80057f4:	e008      	b.n	8005808 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	461a      	mov	r2, r3
 8005802:	6979      	ldr	r1, [r7, #20]
 8005804:	f001 fbf2 	bl	8006fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	f003 020f 	and.w	r2, r3, #15
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d901      	bls.n	8005830 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e050      	b.n	80058d2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005834:	2b00      	cmp	r3, #0
 8005836:	da0f      	bge.n	8005858 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	f003 020f 	and.w	r2, r3, #15
 800583e:	4613      	mov	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	3338      	adds	r3, #56	; 0x38
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	4413      	add	r3, r2
 800584c:	3304      	adds	r3, #4
 800584e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2201      	movs	r2, #1
 8005854:	705a      	strb	r2, [r3, #1]
 8005856:	e00d      	b.n	8005874 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005858:	78fa      	ldrb	r2, [r7, #3]
 800585a:	4613      	mov	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	3304      	adds	r3, #4
 800586c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_PCD_EP_SetStall+0x82>
 8005890:	2302      	movs	r3, #2
 8005892:	e01e      	b.n	80058d2 <HAL_PCD_EP_SetStall+0xc0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 ffcf 	bl	8007846 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	b2d9      	uxtb	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058c2:	461a      	mov	r2, r3
 80058c4:	f002 f9c0 	bl	8007c48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	f003 020f 	and.w	r2, r3, #15
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d901      	bls.n	80058f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e042      	b.n	800597e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	da0f      	bge.n	8005920 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	f003 020f 	and.w	r2, r3, #15
 8005906:	4613      	mov	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	3338      	adds	r3, #56	; 0x38
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	4413      	add	r3, r2
 8005914:	3304      	adds	r3, #4
 8005916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2201      	movs	r2, #1
 800591c:	705a      	strb	r2, [r3, #1]
 800591e:	e00f      	b.n	8005940 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	f003 020f 	and.w	r2, r3, #15
 8005926:	4613      	mov	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4413      	add	r3, r2
 8005936:	3304      	adds	r3, #4
 8005938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	b2da      	uxtb	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_PCD_EP_ClrStall+0x86>
 800595c:	2302      	movs	r3, #2
 800595e:	e00e      	b.n	800597e <HAL_PCD_EP_ClrStall+0xa4>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68f9      	ldr	r1, [r7, #12]
 800596e:	4618      	mov	r0, r3
 8005970:	f001 ffd7 	bl	8007922 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b08a      	sub	sp, #40	; 0x28
 800598a:	af02      	add	r7, sp, #8
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	4613      	mov	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	3338      	adds	r3, #56	; 0x38
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4413      	add	r3, r2
 80059aa:	3304      	adds	r3, #4
 80059ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d901      	bls.n	80059be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e06c      	b.n	8005a98 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d902      	bls.n	80059da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	3303      	adds	r3, #3
 80059de:	089b      	lsrs	r3, r3, #2
 80059e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059e2:	e02b      	b.n	8005a3c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d902      	bls.n	8005a00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	3303      	adds	r3, #3
 8005a04:	089b      	lsrs	r3, r3, #2
 8005a06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68d9      	ldr	r1, [r3, #12]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	6978      	ldr	r0, [r7, #20]
 8005a20:	f001 fe7b 	bl	800771a <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	441a      	add	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	441a      	add	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d809      	bhi.n	8005a66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d203      	bcs.n	8005a66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1be      	bne.n	80059e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	695a      	ldr	r2, [r3, #20]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d811      	bhi.n	8005a96 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	2201      	movs	r2, #1
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	6939      	ldr	r1, [r7, #16]
 8005a8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a92:	4013      	ands	r3, r2
 8005a94:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	333c      	adds	r3, #60	; 0x3c
 8005ab8:	3304      	adds	r3, #4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	f040 80a0 	bne.w	8005c18 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d015      	beq.n	8005b0e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4a72      	ldr	r2, [pc, #456]	; (8005cb0 <PCD_EP_OutXfrComplete_int+0x210>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	f240 80dd 	bls.w	8005ca6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80d7 	beq.w	8005ca6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b04:	461a      	mov	r2, r3
 8005b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0a:	6093      	str	r3, [r2, #8]
 8005b0c:	e0cb      	b.n	8005ca6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d009      	beq.n	8005b2c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	461a      	mov	r2, r3
 8005b26:	2320      	movs	r3, #32
 8005b28:	6093      	str	r3, [r2, #8]
 8005b2a:	e0bc      	b.n	8005ca6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 80b7 	bne.w	8005ca6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a5d      	ldr	r2, [pc, #372]	; (8005cb0 <PCD_EP_OutXfrComplete_int+0x210>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d90f      	bls.n	8005b60 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b56:	461a      	mov	r2, r3
 8005b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5c:	6093      	str	r3, [r2, #8]
 8005b5e:	e0a2      	b.n	8005ca6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	4613      	mov	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	1a9b      	subs	r3, r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b72:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	0159      	lsls	r1, r3, #5
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	440b      	add	r3, r1
 8005b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005b86:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	1a9b      	subs	r3, r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4403      	add	r3, r0
 8005b96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005b9a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	1a9b      	subs	r3, r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bae:	6819      	ldr	r1, [r3, #0]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	1a9b      	subs	r3, r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4403      	add	r3, r0
 8005bbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4419      	add	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4403      	add	r3, r0
 8005bd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bd8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d114      	bne.n	8005c0a <PCD_EP_OutXfrComplete_int+0x16a>
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	1a9b      	subs	r3, r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d108      	bne.n	8005c0a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c02:	461a      	mov	r2, r3
 8005c04:	2101      	movs	r1, #1
 8005c06:	f002 f81f 	bl	8007c48 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f003 ff65 	bl	8009ae0 <HAL_PCD_DataOutStageCallback>
 8005c16:	e046      	b.n	8005ca6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a26      	ldr	r2, [pc, #152]	; (8005cb4 <PCD_EP_OutXfrComplete_int+0x214>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d124      	bne.n	8005c6a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	461a      	mov	r2, r3
 8005c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3c:	6093      	str	r3, [r2, #8]
 8005c3e:	e032      	b.n	8005ca6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d008      	beq.n	8005c5c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c56:	461a      	mov	r2, r3
 8005c58:	2320      	movs	r3, #32
 8005c5a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f003 ff3c 	bl	8009ae0 <HAL_PCD_DataOutStageCallback>
 8005c68:	e01d      	b.n	8005ca6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d114      	bne.n	8005c9a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	4613      	mov	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	1a9b      	subs	r3, r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d108      	bne.n	8005c9a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c92:	461a      	mov	r2, r3
 8005c94:	2100      	movs	r1, #0
 8005c96:	f001 ffd7 	bl	8007c48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f003 ff1d 	bl	8009ae0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	4f54300a 	.word	0x4f54300a
 8005cb4:	4f54310a 	.word	0x4f54310a

08005cb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	333c      	adds	r3, #60	; 0x3c
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d90e      	bls.n	8005d0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d009      	beq.n	8005d0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	461a      	mov	r2, r3
 8005d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f003 fed5 	bl	8009abc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d90c      	bls.n	8005d34 <PCD_EP_OutSetupPacket_int+0x7c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d108      	bne.n	8005d34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	2101      	movs	r1, #1
 8005d30:	f001 ff8a 	bl	8007c48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	4f54300a 	.word	0x4f54300a

08005d44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
 8005d50:	4613      	mov	r3, r2
 8005d52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d107      	bne.n	8005d72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d62:	883b      	ldrh	r3, [r7, #0]
 8005d64:	0419      	lsls	r1, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d70:	e028      	b.n	8005dc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	0c1b      	lsrs	r3, r3, #16
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d80:	2300      	movs	r3, #0
 8005d82:	73fb      	strb	r3, [r7, #15]
 8005d84:	e00d      	b.n	8005da2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	3340      	adds	r3, #64	; 0x40
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	4413      	add	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	7bfa      	ldrb	r2, [r7, #15]
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d3ec      	bcc.n	8005d86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005dac:	883b      	ldrh	r3, [r7, #0]
 8005dae:	0418      	lsls	r0, r3, #16
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	4302      	orrs	r2, r0
 8005dbc:	3340      	adds	r3, #64	; 0x40
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	887a      	ldrh	r2, [r7, #2]
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e264      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d075      	beq.n	8005f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e2a:	4ba3      	ldr	r3, [pc, #652]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d00c      	beq.n	8005e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e36:	4ba0      	ldr	r3, [pc, #640]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d112      	bne.n	8005e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e42:	4b9d      	ldr	r3, [pc, #628]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e4e:	d10b      	bne.n	8005e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e50:	4b99      	ldr	r3, [pc, #612]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05b      	beq.n	8005f14 <HAL_RCC_OscConfig+0x108>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d157      	bne.n	8005f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e23f      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e70:	d106      	bne.n	8005e80 <HAL_RCC_OscConfig+0x74>
 8005e72:	4b91      	ldr	r3, [pc, #580]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a90      	ldr	r2, [pc, #576]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e01d      	b.n	8005ebc <HAL_RCC_OscConfig+0xb0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x98>
 8005e8a:	4b8b      	ldr	r3, [pc, #556]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a8a      	ldr	r2, [pc, #552]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4b88      	ldr	r3, [pc, #544]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a87      	ldr	r2, [pc, #540]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e00b      	b.n	8005ebc <HAL_RCC_OscConfig+0xb0>
 8005ea4:	4b84      	ldr	r3, [pc, #528]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a83      	ldr	r2, [pc, #524]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4b81      	ldr	r3, [pc, #516]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a80      	ldr	r2, [pc, #512]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d013      	beq.n	8005eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fd f888 	bl	8002fd8 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ecc:	f7fd f884 	bl	8002fd8 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b64      	cmp	r3, #100	; 0x64
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e204      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ede:	4b76      	ldr	r3, [pc, #472]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f0      	beq.n	8005ecc <HAL_RCC_OscConfig+0xc0>
 8005eea:	e014      	b.n	8005f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eec:	f7fd f874 	bl	8002fd8 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef4:	f7fd f870 	bl	8002fd8 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b64      	cmp	r3, #100	; 0x64
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e1f0      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f06:	4b6c      	ldr	r3, [pc, #432]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f0      	bne.n	8005ef4 <HAL_RCC_OscConfig+0xe8>
 8005f12:	e000      	b.n	8005f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d063      	beq.n	8005fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f22:	4b65      	ldr	r3, [pc, #404]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f2e:	4b62      	ldr	r3, [pc, #392]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d11c      	bne.n	8005f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f3a:	4b5f      	ldr	r3, [pc, #380]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d116      	bne.n	8005f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f46:	4b5c      	ldr	r3, [pc, #368]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <HAL_RCC_OscConfig+0x152>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d001      	beq.n	8005f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e1c4      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5e:	4b56      	ldr	r3, [pc, #344]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4952      	ldr	r1, [pc, #328]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f72:	e03a      	b.n	8005fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d020      	beq.n	8005fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f7c:	4b4f      	ldr	r3, [pc, #316]	; (80060bc <HAL_RCC_OscConfig+0x2b0>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f82:	f7fd f829 	bl	8002fd8 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f8a:	f7fd f825 	bl	8002fd8 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e1a5      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f9c:	4b46      	ldr	r3, [pc, #280]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa8:	4b43      	ldr	r3, [pc, #268]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4940      	ldr	r1, [pc, #256]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]
 8005fbc:	e015      	b.n	8005fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <HAL_RCC_OscConfig+0x2b0>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc4:	f7fd f808 	bl	8002fd8 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fcc:	f7fd f804 	bl	8002fd8 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e184      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fde:	4b36      	ldr	r3, [pc, #216]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d030      	beq.n	8006058 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d016      	beq.n	800602c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ffe:	4b30      	ldr	r3, [pc, #192]	; (80060c0 <HAL_RCC_OscConfig+0x2b4>)
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006004:	f7fc ffe8 	bl	8002fd8 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800600c:	f7fc ffe4 	bl	8002fd8 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e164      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800601e:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8006020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x200>
 800602a:	e015      	b.n	8006058 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800602c:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <HAL_RCC_OscConfig+0x2b4>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006032:	f7fc ffd1 	bl	8002fd8 <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800603a:	f7fc ffcd 	bl	8002fd8 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e14d      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800604c:	4b1a      	ldr	r3, [pc, #104]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 800604e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1f0      	bne.n	800603a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 80a0 	beq.w	80061a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800606a:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10f      	bne.n	8006096 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006076:	2300      	movs	r3, #0
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	4a0e      	ldr	r2, [pc, #56]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8006080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006084:	6413      	str	r3, [r2, #64]	; 0x40
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <HAL_RCC_OscConfig+0x2ac>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608e:	60bb      	str	r3, [r7, #8]
 8006090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006096:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <HAL_RCC_OscConfig+0x2b8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d121      	bne.n	80060e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060a2:	4b08      	ldr	r3, [pc, #32]	; (80060c4 <HAL_RCC_OscConfig+0x2b8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a07      	ldr	r2, [pc, #28]	; (80060c4 <HAL_RCC_OscConfig+0x2b8>)
 80060a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ae:	f7fc ff93 	bl	8002fd8 <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b4:	e011      	b.n	80060da <HAL_RCC_OscConfig+0x2ce>
 80060b6:	bf00      	nop
 80060b8:	40023800 	.word	0x40023800
 80060bc:	42470000 	.word	0x42470000
 80060c0:	42470e80 	.word	0x42470e80
 80060c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c8:	f7fc ff86 	bl	8002fd8 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e106      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060da:	4b85      	ldr	r3, [pc, #532]	; (80062f0 <HAL_RCC_OscConfig+0x4e4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f0      	beq.n	80060c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d106      	bne.n	80060fc <HAL_RCC_OscConfig+0x2f0>
 80060ee:	4b81      	ldr	r3, [pc, #516]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f2:	4a80      	ldr	r2, [pc, #512]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	6713      	str	r3, [r2, #112]	; 0x70
 80060fa:	e01c      	b.n	8006136 <HAL_RCC_OscConfig+0x32a>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b05      	cmp	r3, #5
 8006102:	d10c      	bne.n	800611e <HAL_RCC_OscConfig+0x312>
 8006104:	4b7b      	ldr	r3, [pc, #492]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 8006106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006108:	4a7a      	ldr	r2, [pc, #488]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 800610a:	f043 0304 	orr.w	r3, r3, #4
 800610e:	6713      	str	r3, [r2, #112]	; 0x70
 8006110:	4b78      	ldr	r3, [pc, #480]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 8006112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006114:	4a77      	ldr	r2, [pc, #476]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 8006116:	f043 0301 	orr.w	r3, r3, #1
 800611a:	6713      	str	r3, [r2, #112]	; 0x70
 800611c:	e00b      	b.n	8006136 <HAL_RCC_OscConfig+0x32a>
 800611e:	4b75      	ldr	r3, [pc, #468]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	4a74      	ldr	r2, [pc, #464]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	6713      	str	r3, [r2, #112]	; 0x70
 800612a:	4b72      	ldr	r3, [pc, #456]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	4a71      	ldr	r2, [pc, #452]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 8006130:	f023 0304 	bic.w	r3, r3, #4
 8006134:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d015      	beq.n	800616a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613e:	f7fc ff4b 	bl	8002fd8 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006144:	e00a      	b.n	800615c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006146:	f7fc ff47 	bl	8002fd8 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f241 3288 	movw	r2, #5000	; 0x1388
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e0c5      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800615c:	4b65      	ldr	r3, [pc, #404]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 800615e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0ee      	beq.n	8006146 <HAL_RCC_OscConfig+0x33a>
 8006168:	e014      	b.n	8006194 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800616a:	f7fc ff35 	bl	8002fd8 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006170:	e00a      	b.n	8006188 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006172:	f7fc ff31 	bl	8002fd8 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006180:	4293      	cmp	r3, r2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e0af      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006188:	4b5a      	ldr	r3, [pc, #360]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 800618a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1ee      	bne.n	8006172 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006194:	7dfb      	ldrb	r3, [r7, #23]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d105      	bne.n	80061a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800619a:	4b56      	ldr	r3, [pc, #344]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	4a55      	ldr	r2, [pc, #340]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 80061a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 809b 	beq.w	80062e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061b0:	4b50      	ldr	r3, [pc, #320]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 030c 	and.w	r3, r3, #12
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d05c      	beq.n	8006276 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d141      	bne.n	8006248 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c4:	4b4c      	ldr	r3, [pc, #304]	; (80062f8 <HAL_RCC_OscConfig+0x4ec>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ca:	f7fc ff05 	bl	8002fd8 <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d2:	f7fc ff01 	bl	8002fd8 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e081      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e4:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1f0      	bne.n	80061d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	019b      	lsls	r3, r3, #6
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	3b01      	subs	r3, #1
 800620a:	041b      	lsls	r3, r3, #16
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	061b      	lsls	r3, r3, #24
 8006214:	4937      	ldr	r1, [pc, #220]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 8006216:	4313      	orrs	r3, r2
 8006218:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800621a:	4b37      	ldr	r3, [pc, #220]	; (80062f8 <HAL_RCC_OscConfig+0x4ec>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006220:	f7fc feda 	bl	8002fd8 <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006228:	f7fc fed6 	bl	8002fd8 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e056      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800623a:	4b2e      	ldr	r3, [pc, #184]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f0      	beq.n	8006228 <HAL_RCC_OscConfig+0x41c>
 8006246:	e04e      	b.n	80062e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006248:	4b2b      	ldr	r3, [pc, #172]	; (80062f8 <HAL_RCC_OscConfig+0x4ec>)
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800624e:	f7fc fec3 	bl	8002fd8 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006256:	f7fc febf 	bl	8002fd8 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e03f      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006268:	4b22      	ldr	r3, [pc, #136]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1f0      	bne.n	8006256 <HAL_RCC_OscConfig+0x44a>
 8006274:	e037      	b.n	80062e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e032      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006282:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <HAL_RCC_OscConfig+0x4e8>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d028      	beq.n	80062e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800629a:	429a      	cmp	r2, r3
 800629c:	d121      	bne.n	80062e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d11a      	bne.n	80062e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062b2:	4013      	ands	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d111      	bne.n	80062e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	3b01      	subs	r3, #1
 80062cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d107      	bne.n	80062e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062de:	429a      	cmp	r2, r3
 80062e0:	d001      	beq.n	80062e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40007000 	.word	0x40007000
 80062f4:	40023800 	.word	0x40023800
 80062f8:	42470060 	.word	0x42470060

080062fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e0cc      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006310:	4b68      	ldr	r3, [pc, #416]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d90c      	bls.n	8006338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631e:	4b65      	ldr	r3, [pc, #404]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006326:	4b63      	ldr	r3, [pc, #396]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0b8      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d020      	beq.n	8006386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006350:	4b59      	ldr	r3, [pc, #356]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	4a58      	ldr	r2, [pc, #352]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800635a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006368:	4b53      	ldr	r3, [pc, #332]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4a52      	ldr	r2, [pc, #328]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006374:	4b50      	ldr	r3, [pc, #320]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	494d      	ldr	r1, [pc, #308]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	4313      	orrs	r3, r2
 8006384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d044      	beq.n	800641c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d107      	bne.n	80063aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639a:	4b47      	ldr	r3, [pc, #284]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d119      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e07f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d003      	beq.n	80063ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d107      	bne.n	80063ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ba:	4b3f      	ldr	r3, [pc, #252]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e06f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ca:	4b3b      	ldr	r3, [pc, #236]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e067      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063da:	4b37      	ldr	r3, [pc, #220]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f023 0203 	bic.w	r2, r3, #3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4934      	ldr	r1, [pc, #208]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063ec:	f7fc fdf4 	bl	8002fd8 <HAL_GetTick>
 80063f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f2:	e00a      	b.n	800640a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f4:	f7fc fdf0 	bl	8002fd8 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e04f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640a:	4b2b      	ldr	r3, [pc, #172]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 020c 	and.w	r2, r3, #12
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	429a      	cmp	r2, r3
 800641a:	d1eb      	bne.n	80063f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800641c:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d20c      	bcs.n	8006444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800642a:	4b22      	ldr	r3, [pc, #136]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006432:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d001      	beq.n	8006444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e032      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d008      	beq.n	8006462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006450:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	4916      	ldr	r1, [pc, #88]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	4313      	orrs	r3, r2
 8006460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800646e:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	490e      	ldr	r1, [pc, #56]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	4313      	orrs	r3, r2
 8006480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006482:	f000 f821 	bl	80064c8 <HAL_RCC_GetSysClockFreq>
 8006486:	4602      	mov	r2, r0
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	490a      	ldr	r1, [pc, #40]	; (80064bc <HAL_RCC_ClockConfig+0x1c0>)
 8006494:	5ccb      	ldrb	r3, [r1, r3]
 8006496:	fa22 f303 	lsr.w	r3, r2, r3
 800649a:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <HAL_RCC_ClockConfig+0x1c4>)
 800649c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800649e:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <HAL_RCC_ClockConfig+0x1c8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fc fd54 	bl	8002f50 <HAL_InitTick>

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40023c00 	.word	0x40023c00
 80064b8:	40023800 	.word	0x40023800
 80064bc:	0800b050 	.word	0x0800b050
 80064c0:	20000008 	.word	0x20000008
 80064c4:	2000000c 	.word	0x2000000c

080064c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c8:	b5b0      	push	{r4, r5, r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064ce:	2100      	movs	r1, #0
 80064d0:	6079      	str	r1, [r7, #4]
 80064d2:	2100      	movs	r1, #0
 80064d4:	60f9      	str	r1, [r7, #12]
 80064d6:	2100      	movs	r1, #0
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064da:	2100      	movs	r1, #0
 80064dc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064de:	4952      	ldr	r1, [pc, #328]	; (8006628 <HAL_RCC_GetSysClockFreq+0x160>)
 80064e0:	6889      	ldr	r1, [r1, #8]
 80064e2:	f001 010c 	and.w	r1, r1, #12
 80064e6:	2908      	cmp	r1, #8
 80064e8:	d00d      	beq.n	8006506 <HAL_RCC_GetSysClockFreq+0x3e>
 80064ea:	2908      	cmp	r1, #8
 80064ec:	f200 8094 	bhi.w	8006618 <HAL_RCC_GetSysClockFreq+0x150>
 80064f0:	2900      	cmp	r1, #0
 80064f2:	d002      	beq.n	80064fa <HAL_RCC_GetSysClockFreq+0x32>
 80064f4:	2904      	cmp	r1, #4
 80064f6:	d003      	beq.n	8006500 <HAL_RCC_GetSysClockFreq+0x38>
 80064f8:	e08e      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064fa:	4b4c      	ldr	r3, [pc, #304]	; (800662c <HAL_RCC_GetSysClockFreq+0x164>)
 80064fc:	60bb      	str	r3, [r7, #8]
       break;
 80064fe:	e08e      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006500:	4b4b      	ldr	r3, [pc, #300]	; (8006630 <HAL_RCC_GetSysClockFreq+0x168>)
 8006502:	60bb      	str	r3, [r7, #8]
      break;
 8006504:	e08b      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006506:	4948      	ldr	r1, [pc, #288]	; (8006628 <HAL_RCC_GetSysClockFreq+0x160>)
 8006508:	6849      	ldr	r1, [r1, #4]
 800650a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800650e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006510:	4945      	ldr	r1, [pc, #276]	; (8006628 <HAL_RCC_GetSysClockFreq+0x160>)
 8006512:	6849      	ldr	r1, [r1, #4]
 8006514:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006518:	2900      	cmp	r1, #0
 800651a:	d024      	beq.n	8006566 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800651c:	4942      	ldr	r1, [pc, #264]	; (8006628 <HAL_RCC_GetSysClockFreq+0x160>)
 800651e:	6849      	ldr	r1, [r1, #4]
 8006520:	0989      	lsrs	r1, r1, #6
 8006522:	4608      	mov	r0, r1
 8006524:	f04f 0100 	mov.w	r1, #0
 8006528:	f240 14ff 	movw	r4, #511	; 0x1ff
 800652c:	f04f 0500 	mov.w	r5, #0
 8006530:	ea00 0204 	and.w	r2, r0, r4
 8006534:	ea01 0305 	and.w	r3, r1, r5
 8006538:	493d      	ldr	r1, [pc, #244]	; (8006630 <HAL_RCC_GetSysClockFreq+0x168>)
 800653a:	fb01 f003 	mul.w	r0, r1, r3
 800653e:	2100      	movs	r1, #0
 8006540:	fb01 f102 	mul.w	r1, r1, r2
 8006544:	1844      	adds	r4, r0, r1
 8006546:	493a      	ldr	r1, [pc, #232]	; (8006630 <HAL_RCC_GetSysClockFreq+0x168>)
 8006548:	fba2 0101 	umull	r0, r1, r2, r1
 800654c:	1863      	adds	r3, r4, r1
 800654e:	4619      	mov	r1, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	461a      	mov	r2, r3
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	f7fa fb1a 	bl	8000b90 <__aeabi_uldivmod>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4613      	mov	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e04a      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006566:	4b30      	ldr	r3, [pc, #192]	; (8006628 <HAL_RCC_GetSysClockFreq+0x160>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	099b      	lsrs	r3, r3, #6
 800656c:	461a      	mov	r2, r3
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006576:	f04f 0100 	mov.w	r1, #0
 800657a:	ea02 0400 	and.w	r4, r2, r0
 800657e:	ea03 0501 	and.w	r5, r3, r1
 8006582:	4620      	mov	r0, r4
 8006584:	4629      	mov	r1, r5
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	014b      	lsls	r3, r1, #5
 8006590:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006594:	0142      	lsls	r2, r0, #5
 8006596:	4610      	mov	r0, r2
 8006598:	4619      	mov	r1, r3
 800659a:	1b00      	subs	r0, r0, r4
 800659c:	eb61 0105 	sbc.w	r1, r1, r5
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	018b      	lsls	r3, r1, #6
 80065aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065ae:	0182      	lsls	r2, r0, #6
 80065b0:	1a12      	subs	r2, r2, r0
 80065b2:	eb63 0301 	sbc.w	r3, r3, r1
 80065b6:	f04f 0000 	mov.w	r0, #0
 80065ba:	f04f 0100 	mov.w	r1, #0
 80065be:	00d9      	lsls	r1, r3, #3
 80065c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065c4:	00d0      	lsls	r0, r2, #3
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	1912      	adds	r2, r2, r4
 80065cc:	eb45 0303 	adc.w	r3, r5, r3
 80065d0:	f04f 0000 	mov.w	r0, #0
 80065d4:	f04f 0100 	mov.w	r1, #0
 80065d8:	0299      	lsls	r1, r3, #10
 80065da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065de:	0290      	lsls	r0, r2, #10
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4610      	mov	r0, r2
 80065e6:	4619      	mov	r1, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	461a      	mov	r2, r3
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	f7fa face 	bl	8000b90 <__aeabi_uldivmod>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4613      	mov	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065fc:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <HAL_RCC_GetSysClockFreq+0x160>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	0c1b      	lsrs	r3, r3, #16
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	3301      	adds	r3, #1
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	60bb      	str	r3, [r7, #8]
      break;
 8006616:	e002      	b.n	800661e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006618:	4b04      	ldr	r3, [pc, #16]	; (800662c <HAL_RCC_GetSysClockFreq+0x164>)
 800661a:	60bb      	str	r3, [r7, #8]
      break;
 800661c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800661e:	68bb      	ldr	r3, [r7, #8]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bdb0      	pop	{r4, r5, r7, pc}
 8006628:	40023800 	.word	0x40023800
 800662c:	00f42400 	.word	0x00f42400
 8006630:	017d7840 	.word	0x017d7840

08006634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006638:	4b03      	ldr	r3, [pc, #12]	; (8006648 <HAL_RCC_GetHCLKFreq+0x14>)
 800663a:	681b      	ldr	r3, [r3, #0]
}
 800663c:	4618      	mov	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	20000008 	.word	0x20000008

0800664c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006650:	f7ff fff0 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 8006654:	4602      	mov	r2, r0
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	0a9b      	lsrs	r3, r3, #10
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	4903      	ldr	r1, [pc, #12]	; (8006670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006662:	5ccb      	ldrb	r3, [r1, r3]
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006668:	4618      	mov	r0, r3
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40023800 	.word	0x40023800
 8006670:	0800b060 	.word	0x0800b060

08006674 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006674:	b084      	sub	sp, #16
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	f107 001c 	add.w	r0, r7, #28
 8006682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	2b01      	cmp	r3, #1
 800668a:	d122      	bne.n	80066d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80066a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d105      	bne.n	80066c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 fb1c 	bl	8007d04 <USB_CoreReset>
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]
 80066d0:	e01a      	b.n	8006708 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 fb10 	bl	8007d04 <USB_CoreReset>
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
 80066fa:	e005      	b.n	8006708 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	2b01      	cmp	r3, #1
 800670c:	d10b      	bne.n	8006726 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f043 0206 	orr.w	r2, r3, #6
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f043 0220 	orr.w	r2, r3, #32
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006726:	7bfb      	ldrb	r3, [r7, #15]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006732:	b004      	add	sp, #16
 8006734:	4770      	bx	lr
	...

08006738 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	4613      	mov	r3, r2
 8006744:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d165      	bne.n	8006818 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4a41      	ldr	r2, [pc, #260]	; (8006854 <USB_SetTurnaroundTime+0x11c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d906      	bls.n	8006762 <USB_SetTurnaroundTime+0x2a>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4a40      	ldr	r2, [pc, #256]	; (8006858 <USB_SetTurnaroundTime+0x120>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d202      	bcs.n	8006762 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800675c:	230f      	movs	r3, #15
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e062      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4a3c      	ldr	r2, [pc, #240]	; (8006858 <USB_SetTurnaroundTime+0x120>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d306      	bcc.n	8006778 <USB_SetTurnaroundTime+0x40>
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4a3b      	ldr	r2, [pc, #236]	; (800685c <USB_SetTurnaroundTime+0x124>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d202      	bcs.n	8006778 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006772:	230e      	movs	r3, #14
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e057      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	4a38      	ldr	r2, [pc, #224]	; (800685c <USB_SetTurnaroundTime+0x124>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d306      	bcc.n	800678e <USB_SetTurnaroundTime+0x56>
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4a37      	ldr	r2, [pc, #220]	; (8006860 <USB_SetTurnaroundTime+0x128>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d202      	bcs.n	800678e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006788:	230d      	movs	r3, #13
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	e04c      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	4a33      	ldr	r2, [pc, #204]	; (8006860 <USB_SetTurnaroundTime+0x128>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d306      	bcc.n	80067a4 <USB_SetTurnaroundTime+0x6c>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4a32      	ldr	r2, [pc, #200]	; (8006864 <USB_SetTurnaroundTime+0x12c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d802      	bhi.n	80067a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800679e:	230c      	movs	r3, #12
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	e041      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4a2f      	ldr	r2, [pc, #188]	; (8006864 <USB_SetTurnaroundTime+0x12c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d906      	bls.n	80067ba <USB_SetTurnaroundTime+0x82>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4a2e      	ldr	r2, [pc, #184]	; (8006868 <USB_SetTurnaroundTime+0x130>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d802      	bhi.n	80067ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80067b4:	230b      	movs	r3, #11
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	e036      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4a2a      	ldr	r2, [pc, #168]	; (8006868 <USB_SetTurnaroundTime+0x130>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d906      	bls.n	80067d0 <USB_SetTurnaroundTime+0x98>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	4a29      	ldr	r2, [pc, #164]	; (800686c <USB_SetTurnaroundTime+0x134>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d802      	bhi.n	80067d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80067ca:	230a      	movs	r3, #10
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	e02b      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4a26      	ldr	r2, [pc, #152]	; (800686c <USB_SetTurnaroundTime+0x134>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d906      	bls.n	80067e6 <USB_SetTurnaroundTime+0xae>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4a25      	ldr	r2, [pc, #148]	; (8006870 <USB_SetTurnaroundTime+0x138>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d202      	bcs.n	80067e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80067e0:	2309      	movs	r3, #9
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	e020      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	4a21      	ldr	r2, [pc, #132]	; (8006870 <USB_SetTurnaroundTime+0x138>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d306      	bcc.n	80067fc <USB_SetTurnaroundTime+0xc4>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	4a20      	ldr	r2, [pc, #128]	; (8006874 <USB_SetTurnaroundTime+0x13c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d802      	bhi.n	80067fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80067f6:	2308      	movs	r3, #8
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	e015      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <USB_SetTurnaroundTime+0x13c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d906      	bls.n	8006812 <USB_SetTurnaroundTime+0xda>
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4a1c      	ldr	r2, [pc, #112]	; (8006878 <USB_SetTurnaroundTime+0x140>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d202      	bcs.n	8006812 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800680c:	2307      	movs	r3, #7
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	e00a      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006812:	2306      	movs	r3, #6
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	e007      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800681e:	2309      	movs	r3, #9
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	e001      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006824:	2309      	movs	r3, #9
 8006826:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	029b      	lsls	r3, r3, #10
 800683c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006840:	431a      	orrs	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	00d8acbf 	.word	0x00d8acbf
 8006858:	00e4e1c0 	.word	0x00e4e1c0
 800685c:	00f42400 	.word	0x00f42400
 8006860:	01067380 	.word	0x01067380
 8006864:	011a499f 	.word	0x011a499f
 8006868:	01312cff 	.word	0x01312cff
 800686c:	014ca43f 	.word	0x014ca43f
 8006870:	016e3600 	.word	0x016e3600
 8006874:	01a6ab1f 	.word	0x01a6ab1f
 8006878:	01e84800 	.word	0x01e84800

0800687c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f043 0201 	orr.w	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f023 0201 	bic.w	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068dc:	78fb      	ldrb	r3, [r7, #3]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d115      	bne.n	800690e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068ee:	2001      	movs	r0, #1
 80068f0:	f7fc fb7e 	bl	8002ff0 <HAL_Delay>
      ms++;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3301      	adds	r3, #1
 80068f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 f972 	bl	8007be4 <USB_GetMode>
 8006900:	4603      	mov	r3, r0
 8006902:	2b01      	cmp	r3, #1
 8006904:	d01e      	beq.n	8006944 <USB_SetCurrentMode+0x84>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b31      	cmp	r3, #49	; 0x31
 800690a:	d9f0      	bls.n	80068ee <USB_SetCurrentMode+0x2e>
 800690c:	e01a      	b.n	8006944 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d115      	bne.n	8006940 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006920:	2001      	movs	r0, #1
 8006922:	f7fc fb65 	bl	8002ff0 <HAL_Delay>
      ms++;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3301      	adds	r3, #1
 800692a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 f959 	bl	8007be4 <USB_GetMode>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <USB_SetCurrentMode+0x84>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b31      	cmp	r3, #49	; 0x31
 800693c:	d9f0      	bls.n	8006920 <USB_SetCurrentMode+0x60>
 800693e:	e001      	b.n	8006944 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e005      	b.n	8006950 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b32      	cmp	r3, #50	; 0x32
 8006948:	d101      	bne.n	800694e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006958:	b084      	sub	sp, #16
 800695a:	b580      	push	{r7, lr}
 800695c:	b086      	sub	sp, #24
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	e009      	b.n	800698c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	3340      	adds	r3, #64	; 0x40
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	2200      	movs	r2, #0
 8006984:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	3301      	adds	r3, #1
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b0e      	cmp	r3, #14
 8006990:	d9f2      	bls.n	8006978 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d11c      	bne.n	80069d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069a6:	f043 0302 	orr.w	r3, r3, #2
 80069aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
 80069d0:	e00b      	b.n	80069ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069f0:	461a      	mov	r2, r3
 80069f2:	2300      	movs	r3, #0
 80069f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fc:	4619      	mov	r1, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a04:	461a      	mov	r2, r3
 8006a06:	680b      	ldr	r3, [r1, #0]
 8006a08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d10c      	bne.n	8006a2a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a16:	2100      	movs	r1, #0
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f945 	bl	8006ca8 <USB_SetDevSpeed>
 8006a1e:	e008      	b.n	8006a32 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a20:	2101      	movs	r1, #1
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f940 	bl	8006ca8 <USB_SetDevSpeed>
 8006a28:	e003      	b.n	8006a32 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a2a:	2103      	movs	r1, #3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f93b 	bl	8006ca8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a32:	2110      	movs	r1, #16
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f8f3 	bl	8006c20 <USB_FlushTxFifo>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f90f 	bl	8006c68 <USB_FlushRxFifo>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a66:	461a      	mov	r2, r3
 8006a68:	2300      	movs	r3, #0
 8006a6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a72:	461a      	mov	r2, r3
 8006a74:	2300      	movs	r3, #0
 8006a76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	e043      	b.n	8006b06 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a94:	d118      	bne.n	8006ac8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	e013      	b.n	8006ada <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	e008      	b.n	8006ada <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	2300      	movs	r3, #0
 8006aea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af8:	461a      	mov	r2, r3
 8006afa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006afe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	3301      	adds	r3, #1
 8006b04:	613b      	str	r3, [r7, #16]
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d3b7      	bcc.n	8006a7e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b0e:	2300      	movs	r3, #0
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	e043      	b.n	8006b9c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b2a:	d118      	bne.n	8006b5e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	e013      	b.n	8006b70 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	461a      	mov	r2, r3
 8006b56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	e008      	b.n	8006b70 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	2300      	movs	r3, #0
 8006b80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d3b7      	bcc.n	8006b14 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006bc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d105      	bne.n	8006bd8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f043 0210 	orr.w	r2, r3, #16
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699a      	ldr	r2, [r3, #24]
 8006bdc:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <USB_DevInit+0x2c4>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	f043 0208 	orr.w	r2, r3, #8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d107      	bne.n	8006c0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c04:	f043 0304 	orr.w	r3, r3, #4
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c18:	b004      	add	sp, #16
 8006c1a:	4770      	bx	lr
 8006c1c:	803c3800 	.word	0x803c3800

08006c20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	019b      	lsls	r3, r3, #6
 8006c32:	f043 0220 	orr.w	r2, r3, #32
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	4a08      	ldr	r2, [pc, #32]	; (8006c64 <USB_FlushTxFifo+0x44>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d901      	bls.n	8006c4a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e006      	b.n	8006c58 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d0f1      	beq.n	8006c3a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	00030d40 	.word	0x00030d40

08006c68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2210      	movs	r2, #16
 8006c78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	4a08      	ldr	r2, [pc, #32]	; (8006ca4 <USB_FlushRxFifo+0x3c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d901      	bls.n	8006c8a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e006      	b.n	8006c98 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 0310 	and.w	r3, r3, #16
 8006c92:	2b10      	cmp	r3, #16
 8006c94:	d0f1      	beq.n	8006c7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	00030d40 	.word	0x00030d40

08006ca8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b087      	sub	sp, #28
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0306 	and.w	r3, r3, #6
 8006cf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d102      	bne.n	8006d00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	75fb      	strb	r3, [r7, #23]
 8006cfe:	e00a      	b.n	8006d16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d002      	beq.n	8006d0c <USB_GetDevSpeed+0x32>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b06      	cmp	r3, #6
 8006d0a:	d102      	bne.n	8006d12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	75fb      	strb	r3, [r7, #23]
 8006d10:	e001      	b.n	8006d16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006d12:	230f      	movs	r3, #15
 8006d14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d13a      	bne.n	8006db6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	2101      	movs	r1, #1
 8006d52:	fa01 f303 	lsl.w	r3, r1, r3
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	68f9      	ldr	r1, [r7, #12]
 8006d5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d155      	bne.n	8006e24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	78db      	ldrb	r3, [r3, #3]
 8006d92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	059b      	lsls	r3, r3, #22
 8006d9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	0151      	lsls	r1, r2, #5
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	440a      	add	r2, r1
 8006da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	e036      	b.n	8006e24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dbc:	69da      	ldr	r2, [r3, #28]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	041b      	lsls	r3, r3, #16
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d11a      	bne.n	8006e24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	78db      	ldrb	r3, [r3, #3]
 8006e08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e0a:	430b      	orrs	r3, r1
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
	...

08006e34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d161      	bne.n	8006f14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e66:	d11f      	bne.n	8006ea8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	0151      	lsls	r1, r2, #5
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ea6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	2101      	movs	r1, #1
 8006eba:	fa01 f303 	lsl.w	r3, r1, r3
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	68f9      	ldr	r1, [r7, #12]
 8006ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ec8:	4013      	ands	r3, r2
 8006eca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	2101      	movs	r1, #1
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	68f9      	ldr	r1, [r7, #12]
 8006ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eec:	4013      	ands	r3, r2
 8006eee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	0159      	lsls	r1, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	440b      	add	r3, r1
 8006f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4b35      	ldr	r3, [pc, #212]	; (8006fe4 <USB_DeactivateEndpoint+0x1b0>)
 8006f0e:	4013      	ands	r3, r2
 8006f10:	600b      	str	r3, [r1, #0]
 8006f12:	e060      	b.n	8006fd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f2a:	d11f      	bne.n	8006f6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	0151      	lsls	r1, r2, #5
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	440a      	add	r2, r1
 8006f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f82:	041b      	lsls	r3, r3, #16
 8006f84:	43db      	mvns	r3, r3
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f96:	69da      	ldr	r2, [r3, #28]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa6:	041b      	lsls	r3, r3, #16
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	68f9      	ldr	r1, [r7, #12]
 8006fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	0159      	lsls	r1, r3, #5
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	440b      	add	r3, r1
 8006fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <USB_DeactivateEndpoint+0x1b4>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	ec337800 	.word	0xec337800
 8006fe8:	eff37800 	.word	0xeff37800

08006fec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	; 0x28
 8006ff0:	af02      	add	r7, sp, #8
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b01      	cmp	r3, #1
 800700a:	f040 815c 	bne.w	80072c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d132      	bne.n	800707c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007030:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007034:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	440a      	add	r2, r1
 8007050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007058:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	440a      	add	r2, r1
 8007070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007074:	0cdb      	lsrs	r3, r3, #19
 8007076:	04db      	lsls	r3, r3, #19
 8007078:	6113      	str	r3, [r2, #16]
 800707a:	e074      	b.n	8007166 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	0151      	lsls	r1, r2, #5
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	440a      	add	r2, r1
 8007092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007096:	0cdb      	lsrs	r3, r3, #19
 8007098:	04db      	lsls	r3, r3, #19
 800709a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	0151      	lsls	r1, r2, #5
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	440a      	add	r2, r1
 80070b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6959      	ldr	r1, [r3, #20]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	440b      	add	r3, r1
 80070d8:	1e59      	subs	r1, r3, #1
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	fbb1 f3f3 	udiv	r3, r1, r3
 80070e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070e4:	4b9d      	ldr	r3, [pc, #628]	; (800735c <USB_EPStartXfer+0x370>)
 80070e6:	400b      	ands	r3, r1
 80070e8:	69b9      	ldr	r1, [r7, #24]
 80070ea:	0148      	lsls	r0, r1, #5
 80070ec:	69f9      	ldr	r1, [r7, #28]
 80070ee:	4401      	add	r1, r0
 80070f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070f4:	4313      	orrs	r3, r2
 80070f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800710e:	69b9      	ldr	r1, [r7, #24]
 8007110:	0148      	lsls	r0, r1, #5
 8007112:	69f9      	ldr	r1, [r7, #28]
 8007114:	4401      	add	r1, r0
 8007116:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800711a:	4313      	orrs	r3, r2
 800711c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	78db      	ldrb	r3, [r3, #3]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d11f      	bne.n	8007166 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	4413      	add	r3, r2
 800712e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	0151      	lsls	r1, r2, #5
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	440a      	add	r2, r1
 800713c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007140:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007144:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	440a      	add	r2, r1
 800715c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007160:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007164:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d14b      	bne.n	8007204 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d009      	beq.n	8007188 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007180:	461a      	mov	r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	78db      	ldrb	r3, [r3, #3]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d128      	bne.n	80071e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719c:	2b00      	cmp	r3, #0
 800719e:	d110      	bne.n	80071c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	e00f      	b.n	80071e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	0151      	lsls	r1, r2, #5
 80071d4:	69fa      	ldr	r2, [r7, #28]
 80071d6:	440a      	add	r2, r1
 80071d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	e12f      	b.n	8007464 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	440a      	add	r2, r1
 800721a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007222:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	78db      	ldrb	r3, [r3, #3]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d015      	beq.n	8007258 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 8117 	beq.w	8007464 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	f003 030f 	and.w	r3, r3, #15
 8007246:	2101      	movs	r1, #1
 8007248:	fa01 f303 	lsl.w	r3, r1, r3
 800724c:	69f9      	ldr	r1, [r7, #28]
 800724e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007252:	4313      	orrs	r3, r2
 8007254:	634b      	str	r3, [r1, #52]	; 0x34
 8007256:	e105      	b.n	8007464 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007264:	2b00      	cmp	r3, #0
 8007266:	d110      	bne.n	800728a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	440a      	add	r2, r1
 800727e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007282:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	e00f      	b.n	80072aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	0151      	lsls	r1, r2, #5
 800729c:	69fa      	ldr	r2, [r7, #28]
 800729e:	440a      	add	r2, r1
 80072a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	68d9      	ldr	r1, [r3, #12]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	b298      	uxth	r0, r3
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	4603      	mov	r3, r0
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fa2b 	bl	800771a <USB_WritePacket>
 80072c4:	e0ce      	b.n	8007464 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e0:	0cdb      	lsrs	r3, r3, #19
 80072e2:	04db      	lsls	r3, r3, #19
 80072e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007300:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007304:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007308:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d126      	bne.n	8007360 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	0148      	lsls	r0, r1, #5
 800732c:	69f9      	ldr	r1, [r7, #28]
 800732e:	4401      	add	r1, r0
 8007330:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007334:	4313      	orrs	r3, r2
 8007336:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	440a      	add	r2, r1
 800734e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007352:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007356:	6113      	str	r3, [r2, #16]
 8007358:	e036      	b.n	80073c8 <USB_EPStartXfer+0x3dc>
 800735a:	bf00      	nop
 800735c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	695a      	ldr	r2, [r3, #20]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	4413      	add	r3, r2
 800736a:	1e5a      	subs	r2, r3, #1
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	fbb2 f3f3 	udiv	r3, r2, r3
 8007374:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	8afb      	ldrh	r3, [r7, #22]
 8007386:	04d9      	lsls	r1, r3, #19
 8007388:	4b39      	ldr	r3, [pc, #228]	; (8007470 <USB_EPStartXfer+0x484>)
 800738a:	400b      	ands	r3, r1
 800738c:	69b9      	ldr	r1, [r7, #24]
 800738e:	0148      	lsls	r0, r1, #5
 8007390:	69f9      	ldr	r1, [r7, #28]
 8007392:	4401      	add	r1, r0
 8007394:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007398:	4313      	orrs	r3, r2
 800739a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a8:	691a      	ldr	r2, [r3, #16]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	8af9      	ldrh	r1, [r7, #22]
 80073b0:	fb01 f303 	mul.w	r3, r1, r3
 80073b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073b8:	69b9      	ldr	r1, [r7, #24]
 80073ba:	0148      	lsls	r0, r1, #5
 80073bc:	69f9      	ldr	r1, [r7, #28]
 80073be:	4401      	add	r1, r0
 80073c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073c4:	4313      	orrs	r3, r2
 80073c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d10d      	bne.n	80073ea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d009      	beq.n	80073ea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	68d9      	ldr	r1, [r3, #12]
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e6:	460a      	mov	r2, r1
 80073e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	78db      	ldrb	r3, [r3, #3]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d128      	bne.n	8007444 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d110      	bne.n	8007424 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800741c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	e00f      	b.n	8007444 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007442:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007462:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	1ff80000 	.word	0x1ff80000

08007474 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	4613      	mov	r3, r2
 8007480:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b01      	cmp	r3, #1
 8007492:	f040 80cd 	bne.w	8007630 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d132      	bne.n	8007504 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	0151      	lsls	r1, r2, #5
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	440a      	add	r2, r1
 80074b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	0151      	lsls	r1, r2, #5
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	440a      	add	r2, r1
 80074f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074fc:	0cdb      	lsrs	r3, r3, #19
 80074fe:	04db      	lsls	r3, r3, #19
 8007500:	6113      	str	r3, [r2, #16]
 8007502:	e04e      	b.n	80075a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	0151      	lsls	r1, r2, #5
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	440a      	add	r2, r1
 800751a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751e:	0cdb      	lsrs	r3, r3, #19
 8007520:	04db      	lsls	r3, r3, #19
 8007522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	440a      	add	r2, r1
 800753a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007542:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007546:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	695a      	ldr	r2, [r3, #20]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	429a      	cmp	r2, r3
 8007552:	d903      	bls.n	800755c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	0151      	lsls	r1, r2, #5
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	440a      	add	r2, r1
 8007572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800757a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007592:	6939      	ldr	r1, [r7, #16]
 8007594:	0148      	lsls	r0, r1, #5
 8007596:	6979      	ldr	r1, [r7, #20]
 8007598:	4401      	add	r1, r0
 800759a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800759e:	4313      	orrs	r3, r2
 80075a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d11e      	bne.n	80075e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d009      	beq.n	80075c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	461a      	mov	r2, r3
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	e092      	b.n	800770c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007600:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007604:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d07e      	beq.n	800770c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	2101      	movs	r1, #1
 8007620:	fa01 f303 	lsl.w	r3, r1, r3
 8007624:	6979      	ldr	r1, [r7, #20]
 8007626:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800762a:	4313      	orrs	r3, r2
 800762c:	634b      	str	r3, [r1, #52]	; 0x34
 800762e:	e06d      	b.n	800770c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	440a      	add	r2, r1
 8007646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800764a:	0cdb      	lsrs	r3, r3, #19
 800764c:	04db      	lsls	r3, r3, #19
 800764e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	440a      	add	r2, r1
 8007666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800766a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800766e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007672:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	0151      	lsls	r1, r2, #5
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	440a      	add	r2, r1
 800769a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800769e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b0:	691a      	ldr	r2, [r3, #16]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ba:	6939      	ldr	r1, [r7, #16]
 80076bc:	0148      	lsls	r0, r1, #5
 80076be:	6979      	ldr	r1, [r7, #20]
 80076c0:	4401      	add	r1, r0
 80076c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076c6:	4313      	orrs	r3, r2
 80076c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80076ca:	79fb      	ldrb	r3, [r7, #7]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d10d      	bne.n	80076ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d009      	beq.n	80076ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	68d9      	ldr	r1, [r3, #12]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	460a      	mov	r2, r1
 80076ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	0151      	lsls	r1, r2, #5
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	440a      	add	r2, r1
 8007702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007706:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800770a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800771a:	b480      	push	{r7}
 800771c:	b089      	sub	sp, #36	; 0x24
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	4611      	mov	r1, r2
 8007726:	461a      	mov	r2, r3
 8007728:	460b      	mov	r3, r1
 800772a:	71fb      	strb	r3, [r7, #7]
 800772c:	4613      	mov	r3, r2
 800772e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007738:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800773c:	2b00      	cmp	r3, #0
 800773e:	d123      	bne.n	8007788 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007740:	88bb      	ldrh	r3, [r7, #4]
 8007742:	3303      	adds	r3, #3
 8007744:	089b      	lsrs	r3, r3, #2
 8007746:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007748:	2300      	movs	r3, #0
 800774a:	61bb      	str	r3, [r7, #24]
 800774c:	e018      	b.n	8007780 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800774e:	79fb      	ldrb	r3, [r7, #7]
 8007750:	031a      	lsls	r2, r3, #12
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	4413      	add	r3, r2
 8007756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800775a:	461a      	mov	r2, r3
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	3301      	adds	r3, #1
 8007766:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	3301      	adds	r3, #1
 800776c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	3301      	adds	r3, #1
 8007772:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	3301      	adds	r3, #1
 8007778:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	3301      	adds	r3, #1
 800777e:	61bb      	str	r3, [r7, #24]
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	429a      	cmp	r2, r3
 8007786:	d3e2      	bcc.n	800774e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3724      	adds	r7, #36	; 0x24
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007796:	b480      	push	{r7}
 8007798:	b08b      	sub	sp, #44	; 0x2c
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	4613      	mov	r3, r2
 80077a2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	089b      	lsrs	r3, r3, #2
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80077bc:	2300      	movs	r3, #0
 80077be:	623b      	str	r3, [r7, #32]
 80077c0:	e014      	b.n	80077ec <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	601a      	str	r2, [r3, #0]
    pDest++;
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	3301      	adds	r3, #1
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	3301      	adds	r3, #1
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	3301      	adds	r3, #1
 80077de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	3301      	adds	r3, #1
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	3301      	adds	r3, #1
 80077ea:	623b      	str	r3, [r7, #32]
 80077ec:	6a3a      	ldr	r2, [r7, #32]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d3e6      	bcc.n	80077c2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077f4:	8bfb      	ldrh	r3, [r7, #30]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01e      	beq.n	8007838 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077fa:	2300      	movs	r3, #0
 80077fc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007804:	461a      	mov	r2, r3
 8007806:	f107 0310 	add.w	r3, r7, #16
 800780a:	6812      	ldr	r2, [r2, #0]
 800780c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	fa22 f303 	lsr.w	r3, r2, r3
 800781a:	b2da      	uxtb	r2, r3
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	701a      	strb	r2, [r3, #0]
      i++;
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	3301      	adds	r3, #1
 8007824:	623b      	str	r3, [r7, #32]
      pDest++;
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	3301      	adds	r3, #1
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800782c:	8bfb      	ldrh	r3, [r7, #30]
 800782e:	3b01      	subs	r3, #1
 8007830:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007832:	8bfb      	ldrh	r3, [r7, #30]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1ea      	bne.n	800780e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800783a:	4618      	mov	r0, r3
 800783c:	372c      	adds	r7, #44	; 0x2c
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007846:	b480      	push	{r7}
 8007848:	b085      	sub	sp, #20
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	785b      	ldrb	r3, [r3, #1]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d12c      	bne.n	80078bc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	db12      	blt.n	800789a <USB_EPSetStall+0x54>
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00f      	beq.n	800789a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4413      	add	r3, r2
 8007882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	0151      	lsls	r1, r2, #5
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	440a      	add	r2, r1
 8007890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007894:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007898:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	e02b      	b.n	8007914 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	db12      	blt.n	80078f4 <USB_EPSetStall+0xae>
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00f      	beq.n	80078f4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	0151      	lsls	r1, r2, #5
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	440a      	add	r2, r1
 80078ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078f2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	440a      	add	r2, r1
 800790a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800790e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007912:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007922:	b480      	push	{r7}
 8007924:	b085      	sub	sp, #20
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	785b      	ldrb	r3, [r3, #1]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d128      	bne.n	8007990 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	440a      	add	r2, r1
 8007954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007958:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800795c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	78db      	ldrb	r3, [r3, #3]
 8007962:	2b03      	cmp	r3, #3
 8007964:	d003      	beq.n	800796e <USB_EPClearStall+0x4c>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	78db      	ldrb	r3, [r3, #3]
 800796a:	2b02      	cmp	r3, #2
 800796c:	d138      	bne.n	80079e0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	0151      	lsls	r1, r2, #5
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	440a      	add	r2, r1
 8007984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	e027      	b.n	80079e0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	0151      	lsls	r1, r2, #5
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	440a      	add	r2, r1
 80079a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	78db      	ldrb	r3, [r3, #3]
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d003      	beq.n	80079c0 <USB_EPClearStall+0x9e>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	78db      	ldrb	r3, [r3, #3]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d10f      	bne.n	80079e0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	0151      	lsls	r1, r2, #5
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	440a      	add	r2, r1
 80079d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079de:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b085      	sub	sp, #20
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a10:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007a22:	68f9      	ldr	r1, [r7, #12]
 8007a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a54:	f023 0303 	bic.w	r3, r3, #3
 8007a58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a68:	f023 0302 	bic.w	r3, r3, #2
 8007a6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a96:	f023 0303 	bic.w	r3, r3, #3
 8007a9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aaa:	f043 0302 	orr.w	r3, r3, #2
 8007aae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	4013      	ands	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	0c1b      	lsrs	r3, r3, #16
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	4013      	ands	r3, r2
 8007b3a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	b29b      	uxth	r3, r3
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	4013      	ands	r3, r2
 8007b78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007baa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007bac:	78fb      	ldrb	r3, [r7, #3]
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb8:	01db      	lsls	r3, r3, #7
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c1e:	f023 0307 	bic.w	r3, r3, #7
 8007c22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
	...

08007c48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	460b      	mov	r3, r1
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	333c      	adds	r3, #60	; 0x3c
 8007c5e:	3304      	adds	r3, #4
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	4a26      	ldr	r2, [pc, #152]	; (8007d00 <USB_EP0_OutStart+0xb8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d90a      	bls.n	8007c82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c7c:	d101      	bne.n	8007c82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e037      	b.n	8007cf2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c88:	461a      	mov	r2, r3
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ca0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb0:	f043 0318 	orr.w	r3, r3, #24
 8007cb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007cc8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d10f      	bne.n	8007cf0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007cee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	4f54300a 	.word	0x4f54300a

08007d04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3301      	adds	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	4a13      	ldr	r2, [pc, #76]	; (8007d64 <USB_CoreReset+0x60>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d901      	bls.n	8007d20 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e01a      	b.n	8007d56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	daf3      	bge.n	8007d10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	f043 0201 	orr.w	r2, r3, #1
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <USB_CoreReset+0x60>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d901      	bls.n	8007d48 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e006      	b.n	8007d56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d0f1      	beq.n	8007d38 <USB_CoreReset+0x34>

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	00030d40 	.word	0x00030d40

08007d68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d78:	f002 f91c 	bl	8009fb4 <USBD_static_malloc>
 8007d7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d105      	bne.n	8007d90 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e066      	b.n	8007e5e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	7c1b      	ldrb	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d119      	bne.n	8007dd4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007da4:	2202      	movs	r2, #2
 8007da6:	2181      	movs	r1, #129	; 0x81
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 ffe0 	bl	8009d6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007db8:	2202      	movs	r2, #2
 8007dba:	2101      	movs	r1, #1
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f001 ffd6 	bl	8009d6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2210      	movs	r2, #16
 8007dce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007dd2:	e016      	b.n	8007e02 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007dd4:	2340      	movs	r3, #64	; 0x40
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	2181      	movs	r1, #129	; 0x81
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f001 ffc7 	bl	8009d6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007de6:	2340      	movs	r3, #64	; 0x40
 8007de8:	2202      	movs	r2, #2
 8007dea:	2101      	movs	r1, #1
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 ffbe 	bl	8009d6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2210      	movs	r2, #16
 8007dfe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e02:	2308      	movs	r3, #8
 8007e04:	2203      	movs	r2, #3
 8007e06:	2182      	movs	r1, #130	; 0x82
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f001 ffb0 	bl	8009d6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7c1b      	ldrb	r3, [r3, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d109      	bne.n	8007e4c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e42:	2101      	movs	r1, #1
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f002 f881 	bl	8009f4c <USBD_LL_PrepareReceive>
 8007e4a:	e007      	b.n	8007e5c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e52:	2340      	movs	r3, #64	; 0x40
 8007e54:	2101      	movs	r1, #1
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f002 f878 	bl	8009f4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	460b      	mov	r3, r1
 8007e70:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e72:	2181      	movs	r1, #129	; 0x81
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 ffa0 	bl	8009dba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e80:	2101      	movs	r1, #1
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 ff99 	bl	8009dba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e90:	2182      	movs	r1, #130	; 0x82
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 ff91 	bl	8009dba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00e      	beq.n	8007ed0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f002 f884 	bl	8009fd0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e0af      	b.n	8008064 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d03f      	beq.n	8007f90 <USBD_CDC_Setup+0xb4>
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	f040 809f 	bne.w	8008054 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	88db      	ldrh	r3, [r3, #6]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d02e      	beq.n	8007f7c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b25b      	sxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	da16      	bge.n	8007f56 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007f34:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	88d2      	ldrh	r2, [r2, #6]
 8007f3a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	88db      	ldrh	r3, [r3, #6]
 8007f40:	2b07      	cmp	r3, #7
 8007f42:	bf28      	it	cs
 8007f44:	2307      	movcs	r3, #7
 8007f46:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	89fa      	ldrh	r2, [r7, #14]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 fae9 	bl	8009526 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007f54:	e085      	b.n	8008062 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	785a      	ldrb	r2, [r3, #1]
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	88db      	ldrh	r3, [r3, #6]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007f6c:	6939      	ldr	r1, [r7, #16]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	88db      	ldrh	r3, [r3, #6]
 8007f72:	461a      	mov	r2, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 fb02 	bl	800957e <USBD_CtlPrepareRx>
      break;
 8007f7a:	e072      	b.n	8008062 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	7850      	ldrb	r0, [r2, #1]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	4798      	blx	r3
      break;
 8007f8e:	e068      	b.n	8008062 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	785b      	ldrb	r3, [r3, #1]
 8007f94:	2b0b      	cmp	r3, #11
 8007f96:	d852      	bhi.n	800803e <USBD_CDC_Setup+0x162>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <USBD_CDC_Setup+0xc4>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fd1 	.word	0x08007fd1
 8007fa4:	0800804d 	.word	0x0800804d
 8007fa8:	0800803f 	.word	0x0800803f
 8007fac:	0800803f 	.word	0x0800803f
 8007fb0:	0800803f 	.word	0x0800803f
 8007fb4:	0800803f 	.word	0x0800803f
 8007fb8:	0800803f 	.word	0x0800803f
 8007fbc:	0800803f 	.word	0x0800803f
 8007fc0:	0800803f 	.word	0x0800803f
 8007fc4:	0800803f 	.word	0x0800803f
 8007fc8:	08007ffb 	.word	0x08007ffb
 8007fcc:	08008025 	.word	0x08008025
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d107      	bne.n	8007fec <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007fdc:	f107 030a 	add.w	r3, r7, #10
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 fa9e 	bl	8009526 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fea:	e032      	b.n	8008052 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 fa28 	bl	8009444 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ff8:	e02b      	b.n	8008052 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b03      	cmp	r3, #3
 8008004:	d107      	bne.n	8008016 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008006:	f107 030d 	add.w	r3, r7, #13
 800800a:	2201      	movs	r2, #1
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f001 fa89 	bl	8009526 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008014:	e01d      	b.n	8008052 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 fa13 	bl	8009444 <USBD_CtlError>
            ret = USBD_FAIL;
 800801e:	2303      	movs	r3, #3
 8008020:	75fb      	strb	r3, [r7, #23]
          break;
 8008022:	e016      	b.n	8008052 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b03      	cmp	r3, #3
 800802e:	d00f      	beq.n	8008050 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f001 fa06 	bl	8009444 <USBD_CtlError>
            ret = USBD_FAIL;
 8008038:	2303      	movs	r3, #3
 800803a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800803c:	e008      	b.n	8008050 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f9ff 	bl	8009444 <USBD_CtlError>
          ret = USBD_FAIL;
 8008046:	2303      	movs	r3, #3
 8008048:	75fb      	strb	r3, [r7, #23]
          break;
 800804a:	e002      	b.n	8008052 <USBD_CDC_Setup+0x176>
          break;
 800804c:	bf00      	nop
 800804e:	e008      	b.n	8008062 <USBD_CDC_Setup+0x186>
          break;
 8008050:	bf00      	nop
      }
      break;
 8008052:	e006      	b.n	8008062 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 f9f4 	bl	8009444 <USBD_CtlError>
      ret = USBD_FAIL;
 800805c:	2303      	movs	r3, #3
 800805e:	75fb      	strb	r3, [r7, #23]
      break;
 8008060:	bf00      	nop
  }

  return (uint8_t)ret;
 8008062:	7dfb      	ldrb	r3, [r7, #23]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800807e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800808a:	2303      	movs	r3, #3
 800808c:	e04f      	b.n	800812e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008094:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	4613      	mov	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	3318      	adds	r3, #24
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d029      	beq.n	8008100 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	440b      	add	r3, r1
 80080ba:	3318      	adds	r3, #24
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	78f9      	ldrb	r1, [r7, #3]
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	460b      	mov	r3, r1
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	1a5b      	subs	r3, r3, r1
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4403      	add	r3, r0
 80080cc:	3344      	adds	r3, #68	; 0x44
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80080d4:	fb03 f301 	mul.w	r3, r3, r1
 80080d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d110      	bne.n	8008100 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80080de:	78fa      	ldrb	r2, [r7, #3]
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	440b      	add	r3, r1
 80080ec:	3318      	adds	r3, #24
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080f2:	78f9      	ldrb	r1, [r7, #3]
 80080f4:	2300      	movs	r3, #0
 80080f6:	2200      	movs	r2, #0
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 ff06 	bl	8009f0a <USBD_LL_Transmit>
 80080fe:	e015      	b.n	800812c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2200      	movs	r2, #0
 8008104:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008148:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008154:	2303      	movs	r3, #3
 8008156:	e015      	b.n	8008184 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 ff16 	bl	8009f8e <USBD_LL_GetRxDataSize>
 8008162:	4602      	mov	r2, r0
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800817e:	4611      	mov	r1, r2
 8008180:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800819a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e01b      	b.n	80081de <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d015      	beq.n	80081dc <USBD_CDC_EP0_RxReady+0x50>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80081b6:	2bff      	cmp	r3, #255	; 0xff
 80081b8:	d010      	beq.n	80081dc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80081c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081d0:	b292      	uxth	r2, r2
 80081d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	22ff      	movs	r2, #255	; 0xff
 80081d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
	...

080081e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2243      	movs	r2, #67	; 0x43
 80081f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80081f6:	4b03      	ldr	r3, [pc, #12]	; (8008204 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	2000009c 	.word	0x2000009c

08008208 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2243      	movs	r2, #67	; 0x43
 8008214:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008216:	4b03      	ldr	r3, [pc, #12]	; (8008224 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008218:	4618      	mov	r0, r3
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	20000058 	.word	0x20000058

08008228 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2243      	movs	r2, #67	; 0x43
 8008234:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008236:	4b03      	ldr	r3, [pc, #12]	; (8008244 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008238:	4618      	mov	r0, r3
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	200000e0 	.word	0x200000e0

08008248 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	220a      	movs	r2, #10
 8008254:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008256:	4b03      	ldr	r3, [pc, #12]	; (8008264 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	20000014 	.word	0x20000014

08008268 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008278:	2303      	movs	r3, #3
 800827a:	e004      	b.n	8008286 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008292:	b480      	push	{r7}
 8008294:	b087      	sub	sp, #28
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082a4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e008      	b.n	80082c2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b085      	sub	sp, #20
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e004      	b.n	80082f4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800830e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800831a:	2303      	movs	r3, #3
 800831c:	e016      	b.n	800834c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	7c1b      	ldrb	r3, [r3, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d109      	bne.n	800833a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800832c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008330:	2101      	movs	r1, #1
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 fe0a 	bl	8009f4c <USBD_LL_PrepareReceive>
 8008338:	e007      	b.n	800834a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008340:	2340      	movs	r3, #64	; 0x40
 8008342:	2101      	movs	r1, #1
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 fe01 	bl	8009f4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008368:	2303      	movs	r3, #3
 800836a:	e01f      	b.n	80083ac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	79fa      	ldrb	r2, [r7, #7]
 800839e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f001 fc7d 	bl	8009ca0 <USBD_LL_Init>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e016      	b.n	80083fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	f107 020e 	add.w	r2, r7, #14
 80083ec:	4610      	mov	r0, r2
 80083ee:	4798      	blx	r3
 80083f0:	4602      	mov	r2, r0
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 fc94 	bl	8009d38 <USBD_LL_Start>
 8008410:	4603      	mov	r3, r0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800843c:	2303      	movs	r3, #3
 800843e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008446:	2b00      	cmp	r3, #0
 8008448:	d009      	beq.n	800845e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	4611      	mov	r1, r2
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847a:	2b00      	cmp	r3, #0
 800847c:	d007      	beq.n	800848e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	4611      	mov	r1, r2
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
  }

  return USBD_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 ff90 	bl	80093d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80084be:	461a      	mov	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084cc:	f003 031f 	and.w	r3, r3, #31
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d01a      	beq.n	800850a <USBD_LL_SetupStage+0x72>
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d822      	bhi.n	800851e <USBD_LL_SetupStage+0x86>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <USBD_LL_SetupStage+0x4a>
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d00a      	beq.n	80084f6 <USBD_LL_SetupStage+0x5e>
 80084e0:	e01d      	b.n	800851e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa62 	bl	80089b4 <USBD_StdDevReq>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]
      break;
 80084f4:	e020      	b.n	8008538 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fac6 	bl	8008a90 <USBD_StdItfReq>
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]
      break;
 8008508:	e016      	b.n	8008538 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fb05 	bl	8008b22 <USBD_StdEPReq>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]
      break;
 800851c:	e00c      	b.n	8008538 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008524:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008528:	b2db      	uxtb	r3, r3
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 fc63 	bl	8009df8 <USBD_LL_StallEP>
 8008532:	4603      	mov	r3, r0
 8008534:	73fb      	strb	r3, [r7, #15]
      break;
 8008536:	bf00      	nop
  }

  return ret;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b086      	sub	sp, #24
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	460b      	mov	r3, r1
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008550:	7afb      	ldrb	r3, [r7, #11]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d138      	bne.n	80085c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800855c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008564:	2b03      	cmp	r3, #3
 8008566:	d14a      	bne.n	80085fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	429a      	cmp	r2, r3
 8008572:	d913      	bls.n	800859c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	1ad2      	subs	r2, r2, r3
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	4293      	cmp	r3, r2
 800858c:	bf28      	it	cs
 800858e:	4613      	movcs	r3, r2
 8008590:	461a      	mov	r2, r3
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f001 f80f 	bl	80095b8 <USBD_CtlContinueRx>
 800859a:	e030      	b.n	80085fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d10b      	bne.n	80085c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f001 f80a 	bl	80095da <USBD_CtlSendStatus>
 80085c6:	e01a      	b.n	80085fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d114      	bne.n	80085fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00e      	beq.n	80085fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	7afa      	ldrb	r2, [r7, #11]
 80085ea:	4611      	mov	r1, r2
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	4798      	blx	r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80085fa:	7dfb      	ldrb	r3, [r7, #23]
 80085fc:	e000      	b.n	8008600 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	460b      	mov	r3, r1
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008616:	7afb      	ldrb	r3, [r7, #11]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d16b      	bne.n	80086f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3314      	adds	r3, #20
 8008620:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008628:	2b02      	cmp	r3, #2
 800862a:	d156      	bne.n	80086da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	429a      	cmp	r2, r3
 8008636:	d914      	bls.n	8008662 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	1ad2      	subs	r2, r2, r3
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	461a      	mov	r2, r3
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 ff84 	bl	800955c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008654:	2300      	movs	r3, #0
 8008656:	2200      	movs	r2, #0
 8008658:	2100      	movs	r1, #0
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f001 fc76 	bl	8009f4c <USBD_LL_PrepareReceive>
 8008660:	e03b      	b.n	80086da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	429a      	cmp	r2, r3
 800866c:	d11c      	bne.n	80086a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008676:	429a      	cmp	r2, r3
 8008678:	d316      	bcc.n	80086a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008684:	429a      	cmp	r2, r3
 8008686:	d20f      	bcs.n	80086a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008688:	2200      	movs	r2, #0
 800868a:	2100      	movs	r1, #0
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 ff65 	bl	800955c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800869a:	2300      	movs	r3, #0
 800869c:	2200      	movs	r2, #0
 800869e:	2100      	movs	r1, #0
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f001 fc53 	bl	8009f4c <USBD_LL_PrepareReceive>
 80086a6:	e018      	b.n	80086da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d10b      	bne.n	80086cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d005      	beq.n	80086cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086cc:	2180      	movs	r1, #128	; 0x80
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f001 fb92 	bl	8009df8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 ff93 	bl	8009600 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d122      	bne.n	800872a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f7ff fe98 	bl	800841a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086f2:	e01a      	b.n	800872a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d114      	bne.n	800872a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00e      	beq.n	800872a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	7afa      	ldrb	r2, [r7, #11]
 8008716:	4611      	mov	r1, r2
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	4798      	blx	r3
 800871c:	4603      	mov	r3, r0
 800871e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	e000      	b.n	800872c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008764:	2303      	movs	r3, #3
 8008766:	e02f      	b.n	80087c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00f      	beq.n	8008792 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d009      	beq.n	8008792 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	6852      	ldr	r2, [r2, #4]
 800878a:	b2d2      	uxtb	r2, r2
 800878c:	4611      	mov	r1, r2
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008792:	2340      	movs	r3, #64	; 0x40
 8008794:	2200      	movs	r2, #0
 8008796:	2100      	movs	r1, #0
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 fae8 	bl	8009d6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2240      	movs	r2, #64	; 0x40
 80087aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087ae:	2340      	movs	r3, #64	; 0x40
 80087b0:	2200      	movs	r2, #0
 80087b2:	2180      	movs	r1, #128	; 0x80
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 fada 	bl	8009d6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2240      	movs	r2, #64	; 0x40
 80087c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	78fa      	ldrb	r2, [r7, #3]
 80087e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2204      	movs	r2, #4
 800880a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b04      	cmp	r3, #4
 800882e:	d106      	bne.n	800883e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008836:	b2da      	uxtb	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800885e:	2303      	movs	r3, #3
 8008860:	e012      	b.n	8008888 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b03      	cmp	r3, #3
 800886c:	d10b      	bne.n	8008886 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d005      	beq.n	8008886 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e014      	b.n	80088d4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d10d      	bne.n	80088d2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d007      	beq.n	80088d2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	78fa      	ldrb	r2, [r7, #3]
 80088cc:	4611      	mov	r1, r2
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e014      	b.n	8008920 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d10d      	bne.n	800891e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	2b00      	cmp	r3, #0
 800890c:	d007      	beq.n	800891e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	78fa      	ldrb	r2, [r7, #3]
 8008918:	4611      	mov	r1, r2
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008954:	2b00      	cmp	r3, #0
 8008956:	d009      	beq.n	800896c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	6852      	ldr	r2, [r2, #4]
 8008964:	b2d2      	uxtb	r2, r2
 8008966:	4611      	mov	r1, r2
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	4798      	blx	r3
  }

  return USBD_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008976:	b480      	push	{r7}
 8008978:	b087      	sub	sp, #28
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	3301      	adds	r3, #1
 800898c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008994:	8a3b      	ldrh	r3, [r7, #16]
 8008996:	021b      	lsls	r3, r3, #8
 8008998:	b21a      	sxth	r2, r3
 800899a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800899e:	4313      	orrs	r3, r2
 80089a0:	b21b      	sxth	r3, r3
 80089a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089a4:	89fb      	ldrh	r3, [r7, #14]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	371c      	adds	r7, #28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
	...

080089b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089ca:	2b40      	cmp	r3, #64	; 0x40
 80089cc:	d005      	beq.n	80089da <USBD_StdDevReq+0x26>
 80089ce:	2b40      	cmp	r3, #64	; 0x40
 80089d0:	d853      	bhi.n	8008a7a <USBD_StdDevReq+0xc6>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00b      	beq.n	80089ee <USBD_StdDevReq+0x3a>
 80089d6:	2b20      	cmp	r3, #32
 80089d8:	d14f      	bne.n	8008a7a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	4798      	blx	r3
 80089e8:	4603      	mov	r3, r0
 80089ea:	73fb      	strb	r3, [r7, #15]
      break;
 80089ec:	e04a      	b.n	8008a84 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	785b      	ldrb	r3, [r3, #1]
 80089f2:	2b09      	cmp	r3, #9
 80089f4:	d83b      	bhi.n	8008a6e <USBD_StdDevReq+0xba>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <USBD_StdDevReq+0x48>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a51 	.word	0x08008a51
 8008a00:	08008a65 	.word	0x08008a65
 8008a04:	08008a6f 	.word	0x08008a6f
 8008a08:	08008a5b 	.word	0x08008a5b
 8008a0c:	08008a6f 	.word	0x08008a6f
 8008a10:	08008a2f 	.word	0x08008a2f
 8008a14:	08008a25 	.word	0x08008a25
 8008a18:	08008a6f 	.word	0x08008a6f
 8008a1c:	08008a47 	.word	0x08008a47
 8008a20:	08008a39 	.word	0x08008a39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f9de 	bl	8008de8 <USBD_GetDescriptor>
          break;
 8008a2c:	e024      	b.n	8008a78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fb43 	bl	80090bc <USBD_SetAddress>
          break;
 8008a36:	e01f      	b.n	8008a78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fb82 	bl	8009144 <USBD_SetConfig>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]
          break;
 8008a44:	e018      	b.n	8008a78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fc21 	bl	8009290 <USBD_GetConfig>
          break;
 8008a4e:	e013      	b.n	8008a78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fc52 	bl	80092fc <USBD_GetStatus>
          break;
 8008a58:	e00e      	b.n	8008a78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fc81 	bl	8009364 <USBD_SetFeature>
          break;
 8008a62:	e009      	b.n	8008a78 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fc90 	bl	800938c <USBD_ClrFeature>
          break;
 8008a6c:	e004      	b.n	8008a78 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fce7 	bl	8009444 <USBD_CtlError>
          break;
 8008a76:	bf00      	nop
      }
      break;
 8008a78:	e004      	b.n	8008a84 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fce1 	bl	8009444 <USBD_CtlError>
      break;
 8008a82:	bf00      	nop
  }

  return ret;
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop

08008a90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aa6:	2b40      	cmp	r3, #64	; 0x40
 8008aa8:	d005      	beq.n	8008ab6 <USBD_StdItfReq+0x26>
 8008aaa:	2b40      	cmp	r3, #64	; 0x40
 8008aac:	d82f      	bhi.n	8008b0e <USBD_StdItfReq+0x7e>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <USBD_StdItfReq+0x26>
 8008ab2:	2b20      	cmp	r3, #32
 8008ab4:	d12b      	bne.n	8008b0e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d81d      	bhi.n	8008b00 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	889b      	ldrh	r3, [r3, #4]
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d813      	bhi.n	8008af6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	4798      	blx	r3
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	88db      	ldrh	r3, [r3, #6]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d110      	bne.n	8008b0a <USBD_StdItfReq+0x7a>
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10d      	bne.n	8008b0a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fd73 	bl	80095da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008af4:	e009      	b.n	8008b0a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fca3 	bl	8009444 <USBD_CtlError>
          break;
 8008afe:	e004      	b.n	8008b0a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fc9e 	bl	8009444 <USBD_CtlError>
          break;
 8008b08:	e000      	b.n	8008b0c <USBD_StdItfReq+0x7c>
          break;
 8008b0a:	bf00      	nop
      }
      break;
 8008b0c:	e004      	b.n	8008b18 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fc97 	bl	8009444 <USBD_CtlError>
      break;
 8008b16:	bf00      	nop
  }

  return ret;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	889b      	ldrh	r3, [r3, #4]
 8008b34:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b3e:	2b40      	cmp	r3, #64	; 0x40
 8008b40:	d007      	beq.n	8008b52 <USBD_StdEPReq+0x30>
 8008b42:	2b40      	cmp	r3, #64	; 0x40
 8008b44:	f200 8145 	bhi.w	8008dd2 <USBD_StdEPReq+0x2b0>
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00c      	beq.n	8008b66 <USBD_StdEPReq+0x44>
 8008b4c:	2b20      	cmp	r3, #32
 8008b4e:	f040 8140 	bne.w	8008dd2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	4798      	blx	r3
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]
      break;
 8008b64:	e13a      	b.n	8008ddc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	785b      	ldrb	r3, [r3, #1]
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d007      	beq.n	8008b7e <USBD_StdEPReq+0x5c>
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	f300 8129 	bgt.w	8008dc6 <USBD_StdEPReq+0x2a4>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d07f      	beq.n	8008c78 <USBD_StdEPReq+0x156>
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d03c      	beq.n	8008bf6 <USBD_StdEPReq+0xd4>
 8008b7c:	e123      	b.n	8008dc6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d002      	beq.n	8008b90 <USBD_StdEPReq+0x6e>
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d016      	beq.n	8008bbc <USBD_StdEPReq+0x9a>
 8008b8e:	e02c      	b.n	8008bea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00d      	beq.n	8008bb2 <USBD_StdEPReq+0x90>
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b80      	cmp	r3, #128	; 0x80
 8008b9a:	d00a      	beq.n	8008bb2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 f929 	bl	8009df8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ba6:	2180      	movs	r1, #128	; 0x80
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f925 	bl	8009df8 <USBD_LL_StallEP>
 8008bae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bb0:	e020      	b.n	8008bf4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fc45 	bl	8009444 <USBD_CtlError>
              break;
 8008bba:	e01b      	b.n	8008bf4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10e      	bne.n	8008be2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00b      	beq.n	8008be2 <USBD_StdEPReq+0xc0>
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	2b80      	cmp	r3, #128	; 0x80
 8008bce:	d008      	beq.n	8008be2 <USBD_StdEPReq+0xc0>
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	88db      	ldrh	r3, [r3, #6]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 f90b 	bl	8009df8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fcf9 	bl	80095da <USBD_CtlSendStatus>

              break;
 8008be8:	e004      	b.n	8008bf4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fc29 	bl	8009444 <USBD_CtlError>
              break;
 8008bf2:	bf00      	nop
          }
          break;
 8008bf4:	e0ec      	b.n	8008dd0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d002      	beq.n	8008c08 <USBD_StdEPReq+0xe6>
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d016      	beq.n	8008c34 <USBD_StdEPReq+0x112>
 8008c06:	e030      	b.n	8008c6a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00d      	beq.n	8008c2a <USBD_StdEPReq+0x108>
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	2b80      	cmp	r3, #128	; 0x80
 8008c12:	d00a      	beq.n	8008c2a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 f8ed 	bl	8009df8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c1e:	2180      	movs	r1, #128	; 0x80
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 f8e9 	bl	8009df8 <USBD_LL_StallEP>
 8008c26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c28:	e025      	b.n	8008c76 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fc09 	bl	8009444 <USBD_CtlError>
              break;
 8008c32:	e020      	b.n	8008c76 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	885b      	ldrh	r3, [r3, #2]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d11b      	bne.n	8008c74 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d004      	beq.n	8008c50 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 f8f3 	bl	8009e36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fcc2 	bl	80095da <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	4798      	blx	r3
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008c68:	e004      	b.n	8008c74 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fbe9 	bl	8009444 <USBD_CtlError>
              break;
 8008c72:	e000      	b.n	8008c76 <USBD_StdEPReq+0x154>
              break;
 8008c74:	bf00      	nop
          }
          break;
 8008c76:	e0ab      	b.n	8008dd0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d002      	beq.n	8008c8a <USBD_StdEPReq+0x168>
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d032      	beq.n	8008cee <USBD_StdEPReq+0x1cc>
 8008c88:	e097      	b.n	8008dba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d007      	beq.n	8008ca0 <USBD_StdEPReq+0x17e>
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b80      	cmp	r3, #128	; 0x80
 8008c94:	d004      	beq.n	8008ca0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fbd3 	bl	8009444 <USBD_CtlError>
                break;
 8008c9e:	e091      	b.n	8008dc4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ca0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	da0b      	bge.n	8008cc0 <USBD_StdEPReq+0x19e>
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	3310      	adds	r3, #16
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	4413      	add	r3, r2
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	e00b      	b.n	8008cd8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fc1d 	bl	8009526 <USBD_CtlSendData>
              break;
 8008cec:	e06a      	b.n	8008dc4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	da11      	bge.n	8008d1a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	f003 020f 	and.w	r2, r3, #15
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	440b      	add	r3, r1
 8008d08:	3324      	adds	r3, #36	; 0x24
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d117      	bne.n	8008d40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fb96 	bl	8009444 <USBD_CtlError>
                  break;
 8008d18:	e054      	b.n	8008dc4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	f003 020f 	and.w	r2, r3, #15
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	440b      	add	r3, r1
 8008d2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d104      	bne.n	8008d40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fb83 	bl	8009444 <USBD_CtlError>
                  break;
 8008d3e:	e041      	b.n	8008dc4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	da0b      	bge.n	8008d60 <USBD_StdEPReq+0x23e>
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	3310      	adds	r3, #16
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	e00b      	b.n	8008d78 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
 8008d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	4413      	add	r3, r2
 8008d76:	3304      	adds	r3, #4
 8008d78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <USBD_StdEPReq+0x264>
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	2b80      	cmp	r3, #128	; 0x80
 8008d84:	d103      	bne.n	8008d8e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	e00e      	b.n	8008dac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 f86e 	bl	8009e74 <USBD_LL_IsStallEP>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2201      	movs	r2, #1
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e002      	b.n	8008dac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2202      	movs	r2, #2
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fbb7 	bl	8009526 <USBD_CtlSendData>
              break;
 8008db8:	e004      	b.n	8008dc4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fb41 	bl	8009444 <USBD_CtlError>
              break;
 8008dc2:	bf00      	nop
          }
          break;
 8008dc4:	e004      	b.n	8008dd0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fb3b 	bl	8009444 <USBD_CtlError>
          break;
 8008dce:	bf00      	nop
      }
      break;
 8008dd0:	e004      	b.n	8008ddc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fb35 	bl	8009444 <USBD_CtlError>
      break;
 8008dda:	bf00      	nop
  }

  return ret;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	885b      	ldrh	r3, [r3, #2]
 8008e02:	0a1b      	lsrs	r3, r3, #8
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	2b06      	cmp	r3, #6
 8008e0a:	f200 8128 	bhi.w	800905e <USBD_GetDescriptor+0x276>
 8008e0e:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <USBD_GetDescriptor+0x2c>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008e31 	.word	0x08008e31
 8008e18:	08008e49 	.word	0x08008e49
 8008e1c:	08008e89 	.word	0x08008e89
 8008e20:	0800905f 	.word	0x0800905f
 8008e24:	0800905f 	.word	0x0800905f
 8008e28:	08008fff 	.word	0x08008fff
 8008e2c:	0800902b 	.word	0x0800902b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	7c12      	ldrb	r2, [r2, #16]
 8008e3c:	f107 0108 	add.w	r1, r7, #8
 8008e40:	4610      	mov	r0, r2
 8008e42:	4798      	blx	r3
 8008e44:	60f8      	str	r0, [r7, #12]
      break;
 8008e46:	e112      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	7c1b      	ldrb	r3, [r3, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10d      	bne.n	8008e6c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e58:	f107 0208 	add.w	r2, r7, #8
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4798      	blx	r3
 8008e60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	2202      	movs	r2, #2
 8008e68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e6a:	e100      	b.n	800906e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	f107 0208 	add.w	r2, r7, #8
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4798      	blx	r3
 8008e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	2202      	movs	r2, #2
 8008e84:	701a      	strb	r2, [r3, #0]
      break;
 8008e86:	e0f2      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	885b      	ldrh	r3, [r3, #2]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b05      	cmp	r3, #5
 8008e90:	f200 80ac 	bhi.w	8008fec <USBD_GetDescriptor+0x204>
 8008e94:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <USBD_GetDescriptor+0xb4>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008ee9 	.word	0x08008ee9
 8008ea4:	08008f1d 	.word	0x08008f1d
 8008ea8:	08008f51 	.word	0x08008f51
 8008eac:	08008f85 	.word	0x08008f85
 8008eb0:	08008fb9 	.word	0x08008fb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	7c12      	ldrb	r2, [r2, #16]
 8008ecc:	f107 0108 	add.w	r1, r7, #8
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ed6:	e091      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fab2 	bl	8009444 <USBD_CtlError>
            err++;
 8008ee0:	7afb      	ldrb	r3, [r7, #11]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ee6:	e089      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00b      	beq.n	8008f0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	7c12      	ldrb	r2, [r2, #16]
 8008f00:	f107 0108 	add.w	r1, r7, #8
 8008f04:	4610      	mov	r0, r2
 8008f06:	4798      	blx	r3
 8008f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f0a:	e077      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa98 	bl	8009444 <USBD_CtlError>
            err++;
 8008f14:	7afb      	ldrb	r3, [r7, #11]
 8008f16:	3301      	adds	r3, #1
 8008f18:	72fb      	strb	r3, [r7, #11]
          break;
 8008f1a:	e06f      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00b      	beq.n	8008f40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	7c12      	ldrb	r2, [r2, #16]
 8008f34:	f107 0108 	add.w	r1, r7, #8
 8008f38:	4610      	mov	r0, r2
 8008f3a:	4798      	blx	r3
 8008f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f3e:	e05d      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fa7e 	bl	8009444 <USBD_CtlError>
            err++;
 8008f48:	7afb      	ldrb	r3, [r7, #11]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f4e:	e055      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00b      	beq.n	8008f74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	7c12      	ldrb	r2, [r2, #16]
 8008f68:	f107 0108 	add.w	r1, r7, #8
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	4798      	blx	r3
 8008f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f72:	e043      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fa64 	bl	8009444 <USBD_CtlError>
            err++;
 8008f7c:	7afb      	ldrb	r3, [r7, #11]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	72fb      	strb	r3, [r7, #11]
          break;
 8008f82:	e03b      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	7c12      	ldrb	r2, [r2, #16]
 8008f9c:	f107 0108 	add.w	r1, r7, #8
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
 8008fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fa6:	e029      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa4a 	bl	8009444 <USBD_CtlError>
            err++;
 8008fb0:	7afb      	ldrb	r3, [r7, #11]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fb6:	e021      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00b      	beq.n	8008fdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	7c12      	ldrb	r2, [r2, #16]
 8008fd0:	f107 0108 	add.w	r1, r7, #8
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	4798      	blx	r3
 8008fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fda:	e00f      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa30 	bl	8009444 <USBD_CtlError>
            err++;
 8008fe4:	7afb      	ldrb	r3, [r7, #11]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fea:	e007      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fa28 	bl	8009444 <USBD_CtlError>
          err++;
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008ffa:	bf00      	nop
      }
      break;
 8008ffc:	e037      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	7c1b      	ldrb	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800900e:	f107 0208 	add.w	r2, r7, #8
 8009012:	4610      	mov	r0, r2
 8009014:	4798      	blx	r3
 8009016:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009018:	e029      	b.n	800906e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fa11 	bl	8009444 <USBD_CtlError>
        err++;
 8009022:	7afb      	ldrb	r3, [r7, #11]
 8009024:	3301      	adds	r3, #1
 8009026:	72fb      	strb	r3, [r7, #11]
      break;
 8009028:	e021      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	7c1b      	ldrb	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10d      	bne.n	800904e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903a:	f107 0208 	add.w	r2, r7, #8
 800903e:	4610      	mov	r0, r2
 8009040:	4798      	blx	r3
 8009042:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	3301      	adds	r3, #1
 8009048:	2207      	movs	r2, #7
 800904a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800904c:	e00f      	b.n	800906e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f9f7 	bl	8009444 <USBD_CtlError>
        err++;
 8009056:	7afb      	ldrb	r3, [r7, #11]
 8009058:	3301      	adds	r3, #1
 800905a:	72fb      	strb	r3, [r7, #11]
      break;
 800905c:	e007      	b.n	800906e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f9ef 	bl	8009444 <USBD_CtlError>
      err++;
 8009066:	7afb      	ldrb	r3, [r7, #11]
 8009068:	3301      	adds	r3, #1
 800906a:	72fb      	strb	r3, [r7, #11]
      break;
 800906c:	bf00      	nop
  }

  if (err != 0U)
 800906e:	7afb      	ldrb	r3, [r7, #11]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d11e      	bne.n	80090b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	88db      	ldrh	r3, [r3, #6]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d016      	beq.n	80090aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800907c:	893b      	ldrh	r3, [r7, #8]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00e      	beq.n	80090a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	88da      	ldrh	r2, [r3, #6]
 8009086:	893b      	ldrh	r3, [r7, #8]
 8009088:	4293      	cmp	r3, r2
 800908a:	bf28      	it	cs
 800908c:	4613      	movcs	r3, r2
 800908e:	b29b      	uxth	r3, r3
 8009090:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009092:	893b      	ldrh	r3, [r7, #8]
 8009094:	461a      	mov	r2, r3
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fa44 	bl	8009526 <USBD_CtlSendData>
 800909e:	e009      	b.n	80090b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f9ce 	bl	8009444 <USBD_CtlError>
 80090a8:	e004      	b.n	80090b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fa95 	bl	80095da <USBD_CtlSendStatus>
 80090b0:	e000      	b.n	80090b4 <USBD_GetDescriptor+0x2cc>
    return;
 80090b2:	bf00      	nop
  }
}
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop

080090bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	889b      	ldrh	r3, [r3, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d131      	bne.n	8009132 <USBD_SetAddress+0x76>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	88db      	ldrh	r3, [r3, #6]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d12d      	bne.n	8009132 <USBD_SetAddress+0x76>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	885b      	ldrh	r3, [r3, #2]
 80090da:	2b7f      	cmp	r3, #127	; 0x7f
 80090dc:	d829      	bhi.n	8009132 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	885b      	ldrh	r3, [r3, #2]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d104      	bne.n	8009100 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f9a3 	bl	8009444 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fe:	e01d      	b.n	800913c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	7bfa      	ldrb	r2, [r7, #15]
 8009104:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fedd 	bl	8009ecc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa61 	bl	80095da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d004      	beq.n	8009128 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2202      	movs	r2, #2
 8009122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009126:	e009      	b.n	800913c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009130:	e004      	b.n	800913c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f985 	bl	8009444 <USBD_CtlError>
  }
}
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	885b      	ldrh	r3, [r3, #2]
 8009156:	b2da      	uxtb	r2, r3
 8009158:	4b4c      	ldr	r3, [pc, #304]	; (800928c <USBD_SetConfig+0x148>)
 800915a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800915c:	4b4b      	ldr	r3, [pc, #300]	; (800928c <USBD_SetConfig+0x148>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d905      	bls.n	8009170 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f96c 	bl	8009444 <USBD_CtlError>
    return USBD_FAIL;
 800916c:	2303      	movs	r3, #3
 800916e:	e088      	b.n	8009282 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b02      	cmp	r3, #2
 800917a:	d002      	beq.n	8009182 <USBD_SetConfig+0x3e>
 800917c:	2b03      	cmp	r3, #3
 800917e:	d025      	beq.n	80091cc <USBD_SetConfig+0x88>
 8009180:	e071      	b.n	8009266 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009182:	4b42      	ldr	r3, [pc, #264]	; (800928c <USBD_SetConfig+0x148>)
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d01c      	beq.n	80091c4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800918a:	4b40      	ldr	r3, [pc, #256]	; (800928c <USBD_SetConfig+0x148>)
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009194:	4b3d      	ldr	r3, [pc, #244]	; (800928c <USBD_SetConfig+0x148>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff f948 	bl	8008430 <USBD_SetClassConfig>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d004      	beq.n	80091b4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f949 	bl	8009444 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091b2:	e065      	b.n	8009280 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fa10 	bl	80095da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2203      	movs	r2, #3
 80091be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091c2:	e05d      	b.n	8009280 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fa08 	bl	80095da <USBD_CtlSendStatus>
      break;
 80091ca:	e059      	b.n	8009280 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80091cc:	4b2f      	ldr	r3, [pc, #188]	; (800928c <USBD_SetConfig+0x148>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d112      	bne.n	80091fa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80091dc:	4b2b      	ldr	r3, [pc, #172]	; (800928c <USBD_SetConfig+0x148>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	461a      	mov	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091e6:	4b29      	ldr	r3, [pc, #164]	; (800928c <USBD_SetConfig+0x148>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff f93b 	bl	8008468 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f9f1 	bl	80095da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091f8:	e042      	b.n	8009280 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80091fa:	4b24      	ldr	r3, [pc, #144]	; (800928c <USBD_SetConfig+0x148>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	429a      	cmp	r2, r3
 8009206:	d02a      	beq.n	800925e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7ff f929 	bl	8008468 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009216:	4b1d      	ldr	r3, [pc, #116]	; (800928c <USBD_SetConfig+0x148>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009220:	4b1a      	ldr	r3, [pc, #104]	; (800928c <USBD_SetConfig+0x148>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff f902 	bl	8008430 <USBD_SetClassConfig>
 800922c:	4603      	mov	r3, r0
 800922e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00f      	beq.n	8009256 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f903 	bl	8009444 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7ff f90e 	bl	8008468 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009254:	e014      	b.n	8009280 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f9bf 	bl	80095da <USBD_CtlSendStatus>
      break;
 800925c:	e010      	b.n	8009280 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f9bb 	bl	80095da <USBD_CtlSendStatus>
      break;
 8009264:	e00c      	b.n	8009280 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f8eb 	bl	8009444 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800926e:	4b07      	ldr	r3, [pc, #28]	; (800928c <USBD_SetConfig+0x148>)
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff f8f7 	bl	8008468 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800927a:	2303      	movs	r3, #3
 800927c:	73fb      	strb	r3, [r7, #15]
      break;
 800927e:	bf00      	nop
  }

  return ret;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	2000061e 	.word	0x2000061e

08009290 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	88db      	ldrh	r3, [r3, #6]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d004      	beq.n	80092ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f8cd 	bl	8009444 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092aa:	e023      	b.n	80092f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	dc02      	bgt.n	80092be <USBD_GetConfig+0x2e>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	dc03      	bgt.n	80092c4 <USBD_GetConfig+0x34>
 80092bc:	e015      	b.n	80092ea <USBD_GetConfig+0x5a>
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d00b      	beq.n	80092da <USBD_GetConfig+0x4a>
 80092c2:	e012      	b.n	80092ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	3308      	adds	r3, #8
 80092ce:	2201      	movs	r2, #1
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f927 	bl	8009526 <USBD_CtlSendData>
        break;
 80092d8:	e00c      	b.n	80092f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3304      	adds	r3, #4
 80092de:	2201      	movs	r2, #1
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f91f 	bl	8009526 <USBD_CtlSendData>
        break;
 80092e8:	e004      	b.n	80092f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f8a9 	bl	8009444 <USBD_CtlError>
        break;
 80092f2:	bf00      	nop
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800930c:	b2db      	uxtb	r3, r3
 800930e:	3b01      	subs	r3, #1
 8009310:	2b02      	cmp	r3, #2
 8009312:	d81e      	bhi.n	8009352 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	88db      	ldrh	r3, [r3, #6]
 8009318:	2b02      	cmp	r3, #2
 800931a:	d004      	beq.n	8009326 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f890 	bl	8009444 <USBD_CtlError>
        break;
 8009324:	e01a      	b.n	800935c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009332:	2b00      	cmp	r3, #0
 8009334:	d005      	beq.n	8009342 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	f043 0202 	orr.w	r2, r3, #2
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	330c      	adds	r3, #12
 8009346:	2202      	movs	r2, #2
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f8eb 	bl	8009526 <USBD_CtlSendData>
      break;
 8009350:	e004      	b.n	800935c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f875 	bl	8009444 <USBD_CtlError>
      break;
 800935a:	bf00      	nop
  }
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	885b      	ldrh	r3, [r3, #2]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d106      	bne.n	8009384 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f92b 	bl	80095da <USBD_CtlSendStatus>
  }
}
 8009384:	bf00      	nop
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800939c:	b2db      	uxtb	r3, r3
 800939e:	3b01      	subs	r3, #1
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d80b      	bhi.n	80093bc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	885b      	ldrh	r3, [r3, #2]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d10c      	bne.n	80093c6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f910 	bl	80095da <USBD_CtlSendStatus>
      }
      break;
 80093ba:	e004      	b.n	80093c6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f840 	bl	8009444 <USBD_CtlError>
      break;
 80093c4:	e000      	b.n	80093c8 <USBD_ClrFeature+0x3c>
      break;
 80093c6:	bf00      	nop
  }
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	781a      	ldrb	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	781a      	ldrb	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3301      	adds	r3, #1
 80093f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f7ff fabb 	bl	8008976 <SWAPBYTE>
 8009400:	4603      	mov	r3, r0
 8009402:	461a      	mov	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3301      	adds	r3, #1
 800940c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3301      	adds	r3, #1
 8009412:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff faae 	bl	8008976 <SWAPBYTE>
 800941a:	4603      	mov	r3, r0
 800941c:	461a      	mov	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3301      	adds	r3, #1
 8009426:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3301      	adds	r3, #1
 800942c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7ff faa1 	bl	8008976 <SWAPBYTE>
 8009434:	4603      	mov	r3, r0
 8009436:	461a      	mov	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	80da      	strh	r2, [r3, #6]
}
 800943c:	bf00      	nop
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800944e:	2180      	movs	r1, #128	; 0x80
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fcd1 	bl	8009df8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009456:	2100      	movs	r1, #0
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fccd 	bl	8009df8 <USBD_LL_StallEP>
}
 800945e:	bf00      	nop
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b086      	sub	sp, #24
 800946a:	af00      	add	r7, sp, #0
 800946c:	60f8      	str	r0, [r7, #12]
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d036      	beq.n	80094ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009480:	6938      	ldr	r0, [r7, #16]
 8009482:	f000 f836 	bl	80094f2 <USBD_GetLen>
 8009486:	4603      	mov	r3, r0
 8009488:	3301      	adds	r3, #1
 800948a:	b29b      	uxth	r3, r3
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009494:	7dfb      	ldrb	r3, [r7, #23]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	4413      	add	r3, r2
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	7812      	ldrb	r2, [r2, #0]
 800949e:	701a      	strb	r2, [r3, #0]
  idx++;
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	3301      	adds	r3, #1
 80094a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	4413      	add	r3, r2
 80094ac:	2203      	movs	r2, #3
 80094ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	3301      	adds	r3, #1
 80094b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80094b6:	e013      	b.n	80094e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	4413      	add	r3, r2
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	7812      	ldrb	r2, [r2, #0]
 80094c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	3301      	adds	r3, #1
 80094c8:	613b      	str	r3, [r7, #16]
    idx++;
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	3301      	adds	r3, #1
 80094ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	4413      	add	r3, r2
 80094d6:	2200      	movs	r2, #0
 80094d8:	701a      	strb	r2, [r3, #0]
    idx++;
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	3301      	adds	r3, #1
 80094de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e7      	bne.n	80094b8 <USBD_GetString+0x52>
 80094e8:	e000      	b.n	80094ec <USBD_GetString+0x86>
    return;
 80094ea:	bf00      	nop
  }
}
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b085      	sub	sp, #20
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009502:	e005      	b.n	8009510 <USBD_GetLen+0x1e>
  {
    len++;
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	3301      	adds	r3, #1
 8009508:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	3301      	adds	r3, #1
 800950e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1f5      	bne.n	8009504 <USBD_GetLen+0x12>
  }

  return len;
 8009518:	7bfb      	ldrb	r3, [r7, #15]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2202      	movs	r2, #2
 8009536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	2100      	movs	r1, #0
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 fcdc 	bl	8009f0a <USBD_LL_Transmit>

  return USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	2100      	movs	r1, #0
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 fccb 	bl	8009f0a <USBD_LL_Transmit>

  return USBD_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2203      	movs	r2, #3
 800958e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	2100      	movs	r1, #0
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fccf 	bl	8009f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	2100      	movs	r1, #0
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fcbe 	bl	8009f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b082      	sub	sp, #8
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2204      	movs	r2, #4
 80095e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095ea:	2300      	movs	r3, #0
 80095ec:	2200      	movs	r2, #0
 80095ee:	2100      	movs	r1, #0
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fc8a 	bl	8009f0a <USBD_LL_Transmit>

  return USBD_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2205      	movs	r2, #5
 800960c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009610:	2300      	movs	r3, #0
 8009612:	2200      	movs	r2, #0
 8009614:	2100      	movs	r1, #0
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fc98 	bl	8009f4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
	...

08009628 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800962c:	2200      	movs	r2, #0
 800962e:	4912      	ldr	r1, [pc, #72]	; (8009678 <MX_USB_DEVICE_Init+0x50>)
 8009630:	4812      	ldr	r0, [pc, #72]	; (800967c <MX_USB_DEVICE_Init+0x54>)
 8009632:	f7fe fe8f 	bl	8008354 <USBD_Init>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800963c:	f7f8 f90e 	bl	800185c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009640:	490f      	ldr	r1, [pc, #60]	; (8009680 <MX_USB_DEVICE_Init+0x58>)
 8009642:	480e      	ldr	r0, [pc, #56]	; (800967c <MX_USB_DEVICE_Init+0x54>)
 8009644:	f7fe feb6 	bl	80083b4 <USBD_RegisterClass>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800964e:	f7f8 f905 	bl	800185c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009652:	490c      	ldr	r1, [pc, #48]	; (8009684 <MX_USB_DEVICE_Init+0x5c>)
 8009654:	4809      	ldr	r0, [pc, #36]	; (800967c <MX_USB_DEVICE_Init+0x54>)
 8009656:	f7fe fe07 	bl	8008268 <USBD_CDC_RegisterInterface>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009660:	f7f8 f8fc 	bl	800185c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009664:	4805      	ldr	r0, [pc, #20]	; (800967c <MX_USB_DEVICE_Init+0x54>)
 8009666:	f7fe fecc 	bl	8008402 <USBD_Start>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009670:	f7f8 f8f4 	bl	800185c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009674:	bf00      	nop
 8009676:	bd80      	pop	{r7, pc}
 8009678:	20000138 	.word	0x20000138
 800967c:	200009d4 	.word	0x200009d4
 8009680:	20000020 	.word	0x20000020
 8009684:	20000124 	.word	0x20000124

08009688 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800968c:	2200      	movs	r2, #0
 800968e:	4905      	ldr	r1, [pc, #20]	; (80096a4 <CDC_Init_FS+0x1c>)
 8009690:	4805      	ldr	r0, [pc, #20]	; (80096a8 <CDC_Init_FS+0x20>)
 8009692:	f7fe fdfe 	bl	8008292 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009696:	4905      	ldr	r1, [pc, #20]	; (80096ac <CDC_Init_FS+0x24>)
 8009698:	4803      	ldr	r0, [pc, #12]	; (80096a8 <CDC_Init_FS+0x20>)
 800969a:	f7fe fe18 	bl	80082ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800969e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	200014a4 	.word	0x200014a4
 80096a8:	200009d4 	.word	0x200009d4
 80096ac:	20000ca4 	.word	0x20000ca4

080096b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80096b0:	b480      	push	{r7}
 80096b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	6039      	str	r1, [r7, #0]
 80096ca:	71fb      	strb	r3, [r7, #7]
 80096cc:	4613      	mov	r3, r2
 80096ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80096d0:	79fb      	ldrb	r3, [r7, #7]
 80096d2:	2b23      	cmp	r3, #35	; 0x23
 80096d4:	d84a      	bhi.n	800976c <CDC_Control_FS+0xac>
 80096d6:	a201      	add	r2, pc, #4	; (adr r2, 80096dc <CDC_Control_FS+0x1c>)
 80096d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096dc:	0800976d 	.word	0x0800976d
 80096e0:	0800976d 	.word	0x0800976d
 80096e4:	0800976d 	.word	0x0800976d
 80096e8:	0800976d 	.word	0x0800976d
 80096ec:	0800976d 	.word	0x0800976d
 80096f0:	0800976d 	.word	0x0800976d
 80096f4:	0800976d 	.word	0x0800976d
 80096f8:	0800976d 	.word	0x0800976d
 80096fc:	0800976d 	.word	0x0800976d
 8009700:	0800976d 	.word	0x0800976d
 8009704:	0800976d 	.word	0x0800976d
 8009708:	0800976d 	.word	0x0800976d
 800970c:	0800976d 	.word	0x0800976d
 8009710:	0800976d 	.word	0x0800976d
 8009714:	0800976d 	.word	0x0800976d
 8009718:	0800976d 	.word	0x0800976d
 800971c:	0800976d 	.word	0x0800976d
 8009720:	0800976d 	.word	0x0800976d
 8009724:	0800976d 	.word	0x0800976d
 8009728:	0800976d 	.word	0x0800976d
 800972c:	0800976d 	.word	0x0800976d
 8009730:	0800976d 	.word	0x0800976d
 8009734:	0800976d 	.word	0x0800976d
 8009738:	0800976d 	.word	0x0800976d
 800973c:	0800976d 	.word	0x0800976d
 8009740:	0800976d 	.word	0x0800976d
 8009744:	0800976d 	.word	0x0800976d
 8009748:	0800976d 	.word	0x0800976d
 800974c:	0800976d 	.word	0x0800976d
 8009750:	0800976d 	.word	0x0800976d
 8009754:	0800976d 	.word	0x0800976d
 8009758:	0800976d 	.word	0x0800976d
 800975c:	0800976d 	.word	0x0800976d
 8009760:	0800976d 	.word	0x0800976d
 8009764:	0800976d 	.word	0x0800976d
 8009768:	0800976d 	.word	0x0800976d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800976c:	bf00      	nop
  }

  return (USBD_OK);
 800976e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009770:	4618      	mov	r0, r3
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009786:	6879      	ldr	r1, [r7, #4]
 8009788:	480f      	ldr	r0, [pc, #60]	; (80097c8 <CDC_Receive_FS+0x4c>)
 800978a:	f7fe fda0 	bl	80082ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800978e:	480e      	ldr	r0, [pc, #56]	; (80097c8 <CDC_Receive_FS+0x4c>)
 8009790:	f7fe fdb6 	bl	8008300 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 8009794:	2240      	movs	r2, #64	; 0x40
 8009796:	2100      	movs	r1, #0
 8009798:	480c      	ldr	r0, [pc, #48]	; (80097cc <CDC_Receive_FS+0x50>)
 800979a:	f000 fc87 	bl	800a0ac <memset>
  uint8_t len = (uint8_t)*Len;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
 80097a6:	461a      	mov	r2, r3
 80097a8:	6879      	ldr	r1, [r7, #4]
 80097aa:	4808      	ldr	r0, [pc, #32]	; (80097cc <CDC_Receive_FS+0x50>)
 80097ac:	f000 fc70 	bl	800a090 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	461a      	mov	r2, r3
 80097b4:	2100      	movs	r1, #0
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fc78 	bl	800a0ac <memset>

  return (USBD_OK);
 80097bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	200009d4 	.word	0x200009d4
 80097cc:	2000093c 	.word	0x2000093c

080097d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80097e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	371c      	adds	r7, #28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
	...

080097f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2212      	movs	r2, #18
 8009804:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009806:	4b03      	ldr	r3, [pc, #12]	; (8009814 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009808:	4618      	mov	r0, r3
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	20000154 	.word	0x20000154

08009818 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	6039      	str	r1, [r7, #0]
 8009822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2204      	movs	r2, #4
 8009828:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800982a:	4b03      	ldr	r3, [pc, #12]	; (8009838 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	20000168 	.word	0x20000168

0800983c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	6039      	str	r1, [r7, #0]
 8009846:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d105      	bne.n	800985a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	4907      	ldr	r1, [pc, #28]	; (8009870 <USBD_FS_ProductStrDescriptor+0x34>)
 8009852:	4808      	ldr	r0, [pc, #32]	; (8009874 <USBD_FS_ProductStrDescriptor+0x38>)
 8009854:	f7ff fe07 	bl	8009466 <USBD_GetString>
 8009858:	e004      	b.n	8009864 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	4904      	ldr	r1, [pc, #16]	; (8009870 <USBD_FS_ProductStrDescriptor+0x34>)
 800985e:	4805      	ldr	r0, [pc, #20]	; (8009874 <USBD_FS_ProductStrDescriptor+0x38>)
 8009860:	f7ff fe01 	bl	8009466 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009864:	4b02      	ldr	r3, [pc, #8]	; (8009870 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20001ca4 	.word	0x20001ca4
 8009874:	0800a2b0 	.word	0x0800a2b0

08009878 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	6039      	str	r1, [r7, #0]
 8009882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	4904      	ldr	r1, [pc, #16]	; (8009898 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009888:	4804      	ldr	r0, [pc, #16]	; (800989c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800988a:	f7ff fdec 	bl	8009466 <USBD_GetString>
  return USBD_StrDesc;
 800988e:	4b02      	ldr	r3, [pc, #8]	; (8009898 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20001ca4 	.word	0x20001ca4
 800989c:	0800a2c4 	.word	0x0800a2c4

080098a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	6039      	str	r1, [r7, #0]
 80098aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	221a      	movs	r2, #26
 80098b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80098b2:	f000 f843 	bl	800993c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80098b6:	4b02      	ldr	r3, [pc, #8]	; (80098c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	2000016c 	.word	0x2000016c

080098c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	6039      	str	r1, [r7, #0]
 80098ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d105      	bne.n	80098e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	4907      	ldr	r1, [pc, #28]	; (80098f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098da:	4808      	ldr	r0, [pc, #32]	; (80098fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80098dc:	f7ff fdc3 	bl	8009466 <USBD_GetString>
 80098e0:	e004      	b.n	80098ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098e2:	683a      	ldr	r2, [r7, #0]
 80098e4:	4904      	ldr	r1, [pc, #16]	; (80098f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098e6:	4805      	ldr	r0, [pc, #20]	; (80098fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80098e8:	f7ff fdbd 	bl	8009466 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098ec:	4b02      	ldr	r3, [pc, #8]	; (80098f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20001ca4 	.word	0x20001ca4
 80098fc:	0800a2d8 	.word	0x0800a2d8

08009900 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	6039      	str	r1, [r7, #0]
 800990a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d105      	bne.n	800991e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	4907      	ldr	r1, [pc, #28]	; (8009934 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009916:	4808      	ldr	r0, [pc, #32]	; (8009938 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009918:	f7ff fda5 	bl	8009466 <USBD_GetString>
 800991c:	e004      	b.n	8009928 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	4904      	ldr	r1, [pc, #16]	; (8009934 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009922:	4805      	ldr	r0, [pc, #20]	; (8009938 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009924:	f7ff fd9f 	bl	8009466 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009928:	4b02      	ldr	r3, [pc, #8]	; (8009934 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20001ca4 	.word	0x20001ca4
 8009938:	0800a2e4 	.word	0x0800a2e4

0800993c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009942:	4b0f      	ldr	r3, [pc, #60]	; (8009980 <Get_SerialNum+0x44>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009948:	4b0e      	ldr	r3, [pc, #56]	; (8009984 <Get_SerialNum+0x48>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800994e:	4b0e      	ldr	r3, [pc, #56]	; (8009988 <Get_SerialNum+0x4c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4413      	add	r3, r2
 800995a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d009      	beq.n	8009976 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009962:	2208      	movs	r2, #8
 8009964:	4909      	ldr	r1, [pc, #36]	; (800998c <Get_SerialNum+0x50>)
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 f814 	bl	8009994 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800996c:	2204      	movs	r2, #4
 800996e:	4908      	ldr	r1, [pc, #32]	; (8009990 <Get_SerialNum+0x54>)
 8009970:	68b8      	ldr	r0, [r7, #8]
 8009972:	f000 f80f 	bl	8009994 <IntToUnicode>
  }
}
 8009976:	bf00      	nop
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	1fff7a10 	.word	0x1fff7a10
 8009984:	1fff7a14 	.word	0x1fff7a14
 8009988:	1fff7a18 	.word	0x1fff7a18
 800998c:	2000016e 	.word	0x2000016e
 8009990:	2000017e 	.word	0x2000017e

08009994 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	4613      	mov	r3, r2
 80099a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099a6:	2300      	movs	r3, #0
 80099a8:	75fb      	strb	r3, [r7, #23]
 80099aa:	e027      	b.n	80099fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	0f1b      	lsrs	r3, r3, #28
 80099b0:	2b09      	cmp	r3, #9
 80099b2:	d80b      	bhi.n	80099cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	0f1b      	lsrs	r3, r3, #28
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4619      	mov	r1, r3
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	440b      	add	r3, r1
 80099c4:	3230      	adds	r2, #48	; 0x30
 80099c6:	b2d2      	uxtb	r2, r2
 80099c8:	701a      	strb	r2, [r3, #0]
 80099ca:	e00a      	b.n	80099e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	0f1b      	lsrs	r3, r3, #28
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	4619      	mov	r1, r3
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	440b      	add	r3, r1
 80099dc:	3237      	adds	r2, #55	; 0x37
 80099de:	b2d2      	uxtb	r2, r2
 80099e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	3301      	adds	r3, #1
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	4413      	add	r3, r2
 80099f2:	2200      	movs	r2, #0
 80099f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	3301      	adds	r3, #1
 80099fa:	75fb      	strb	r3, [r7, #23]
 80099fc:	7dfa      	ldrb	r2, [r7, #23]
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d3d3      	bcc.n	80099ac <IntToUnicode+0x18>
  }
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	371c      	adds	r7, #28
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
	...

08009a14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08a      	sub	sp, #40	; 0x28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a1c:	f107 0314 	add.w	r3, r7, #20
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	605a      	str	r2, [r3, #4]
 8009a26:	609a      	str	r2, [r3, #8]
 8009a28:	60da      	str	r2, [r3, #12]
 8009a2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a34:	d13a      	bne.n	8009aac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a36:	2300      	movs	r3, #0
 8009a38:	613b      	str	r3, [r7, #16]
 8009a3a:	4b1e      	ldr	r3, [pc, #120]	; (8009ab4 <HAL_PCD_MspInit+0xa0>)
 8009a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3e:	4a1d      	ldr	r2, [pc, #116]	; (8009ab4 <HAL_PCD_MspInit+0xa0>)
 8009a40:	f043 0301 	orr.w	r3, r3, #1
 8009a44:	6313      	str	r3, [r2, #48]	; 0x30
 8009a46:	4b1b      	ldr	r3, [pc, #108]	; (8009ab4 <HAL_PCD_MspInit+0xa0>)
 8009a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	613b      	str	r3, [r7, #16]
 8009a50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a58:	2302      	movs	r3, #2
 8009a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a60:	2303      	movs	r3, #3
 8009a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a64:	230a      	movs	r3, #10
 8009a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a68:	f107 0314 	add.w	r3, r7, #20
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4812      	ldr	r0, [pc, #72]	; (8009ab8 <HAL_PCD_MspInit+0xa4>)
 8009a70:	f7f9 fbf4 	bl	800325c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a74:	4b0f      	ldr	r3, [pc, #60]	; (8009ab4 <HAL_PCD_MspInit+0xa0>)
 8009a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a78:	4a0e      	ldr	r2, [pc, #56]	; (8009ab4 <HAL_PCD_MspInit+0xa0>)
 8009a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a7e:	6353      	str	r3, [r2, #52]	; 0x34
 8009a80:	2300      	movs	r3, #0
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	4b0b      	ldr	r3, [pc, #44]	; (8009ab4 <HAL_PCD_MspInit+0xa0>)
 8009a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a88:	4a0a      	ldr	r2, [pc, #40]	; (8009ab4 <HAL_PCD_MspInit+0xa0>)
 8009a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a8e:	6453      	str	r3, [r2, #68]	; 0x44
 8009a90:	4b08      	ldr	r3, [pc, #32]	; (8009ab4 <HAL_PCD_MspInit+0xa0>)
 8009a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a98:	60fb      	str	r3, [r7, #12]
 8009a9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	2043      	movs	r0, #67	; 0x43
 8009aa2:	f7f9 fba4 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009aa6:	2043      	movs	r0, #67	; 0x43
 8009aa8:	f7f9 fbbd 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009aac:	bf00      	nop
 8009aae:	3728      	adds	r7, #40	; 0x28
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	40023800 	.word	0x40023800
 8009ab8:	40020000 	.word	0x40020000

08009abc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	f7fe fce0 	bl	8008498 <USBD_LL_SetupStage>
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009af2:	78fa      	ldrb	r2, [r7, #3]
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	00db      	lsls	r3, r3, #3
 8009afa:	1a9b      	subs	r3, r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	440b      	add	r3, r1
 8009b00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	78fb      	ldrb	r3, [r7, #3]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	f7fe fd1a 	bl	8008542 <USBD_LL_DataOutStage>
}
 8009b0e:	bf00      	nop
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009b28:	78fa      	ldrb	r2, [r7, #3]
 8009b2a:	6879      	ldr	r1, [r7, #4]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	1a9b      	subs	r3, r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	440b      	add	r3, r1
 8009b36:	3348      	adds	r3, #72	; 0x48
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	f7fe fd63 	bl	8008608 <USBD_LL_DataInStage>
}
 8009b42:	bf00      	nop
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fe fe77 	bl	800884c <USBD_LL_SOF>
}
 8009b5e:	bf00      	nop
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d102      	bne.n	8009b80 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]
 8009b7e:	e008      	b.n	8009b92 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d102      	bne.n	8009b8e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	73fb      	strb	r3, [r7, #15]
 8009b8c:	e001      	b.n	8009b92 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009b8e:	f7f7 fe65 	bl	800185c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b98:	7bfa      	ldrb	r2, [r7, #15]
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe fe17 	bl	80087d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fe fdc3 	bl	8008734 <USBD_LL_Reset>
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe fe12 	bl	80087f0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	6812      	ldr	r2, [r2, #0]
 8009bda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a1b      	ldr	r3, [r3, #32]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d005      	beq.n	8009bf8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bec:	4b04      	ldr	r3, [pc, #16]	; (8009c00 <HAL_PCD_SuspendCallback+0x48>)
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	4a03      	ldr	r2, [pc, #12]	; (8009c00 <HAL_PCD_SuspendCallback+0x48>)
 8009bf2:	f043 0306 	orr.w	r3, r3, #6
 8009bf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bf8:	bf00      	nop
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	e000ed00 	.word	0xe000ed00

08009c04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe fe02 	bl	800881c <USBD_LL_Resume>
}
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c32:	78fa      	ldrb	r2, [r7, #3]
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe fe50 	bl	80088dc <USBD_LL_IsoOUTIncomplete>
}
 8009c3c:	bf00      	nop
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c56:	78fa      	ldrb	r2, [r7, #3]
 8009c58:	4611      	mov	r1, r2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fe fe18 	bl	8008890 <USBD_LL_IsoINIncomplete>
}
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fe56 	bl	8008928 <USBD_LL_DevConnected>
}
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe fe53 	bl	800893e <USBD_LL_DevDisconnected>
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d13c      	bne.n	8009d2a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009cb0:	4a20      	ldr	r2, [pc, #128]	; (8009d34 <USBD_LL_Init+0x94>)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a1e      	ldr	r2, [pc, #120]	; (8009d34 <USBD_LL_Init+0x94>)
 8009cbc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009cc0:	4b1c      	ldr	r3, [pc, #112]	; (8009d34 <USBD_LL_Init+0x94>)
 8009cc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009cc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009cc8:	4b1a      	ldr	r3, [pc, #104]	; (8009d34 <USBD_LL_Init+0x94>)
 8009cca:	2204      	movs	r2, #4
 8009ccc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009cce:	4b19      	ldr	r3, [pc, #100]	; (8009d34 <USBD_LL_Init+0x94>)
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009cd4:	4b17      	ldr	r3, [pc, #92]	; (8009d34 <USBD_LL_Init+0x94>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009cda:	4b16      	ldr	r3, [pc, #88]	; (8009d34 <USBD_LL_Init+0x94>)
 8009cdc:	2202      	movs	r2, #2
 8009cde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ce0:	4b14      	ldr	r3, [pc, #80]	; (8009d34 <USBD_LL_Init+0x94>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ce6:	4b13      	ldr	r3, [pc, #76]	; (8009d34 <USBD_LL_Init+0x94>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009cec:	4b11      	ldr	r3, [pc, #68]	; (8009d34 <USBD_LL_Init+0x94>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009cf2:	4b10      	ldr	r3, [pc, #64]	; (8009d34 <USBD_LL_Init+0x94>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009cf8:	4b0e      	ldr	r3, [pc, #56]	; (8009d34 <USBD_LL_Init+0x94>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009cfe:	480d      	ldr	r0, [pc, #52]	; (8009d34 <USBD_LL_Init+0x94>)
 8009d00:	f7fa ff01 	bl	8004b06 <HAL_PCD_Init>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009d0a:	f7f7 fda7 	bl	800185c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d0e:	2180      	movs	r1, #128	; 0x80
 8009d10:	4808      	ldr	r0, [pc, #32]	; (8009d34 <USBD_LL_Init+0x94>)
 8009d12:	f7fc f85e 	bl	8005dd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d16:	2240      	movs	r2, #64	; 0x40
 8009d18:	2100      	movs	r1, #0
 8009d1a:	4806      	ldr	r0, [pc, #24]	; (8009d34 <USBD_LL_Init+0x94>)
 8009d1c:	f7fc f812 	bl	8005d44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d20:	2280      	movs	r2, #128	; 0x80
 8009d22:	2101      	movs	r1, #1
 8009d24:	4803      	ldr	r0, [pc, #12]	; (8009d34 <USBD_LL_Init+0x94>)
 8009d26:	f7fc f80d 	bl	8005d44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	20001ea4 	.word	0x20001ea4

08009d38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fa fff6 	bl	8004d40 <HAL_PCD_Start>
 8009d54:	4603      	mov	r3, r0
 8009d56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 f942 	bl	8009fe4 <USBD_Get_USB_Status>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	4608      	mov	r0, r1
 8009d78:	4611      	mov	r1, r2
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	70fb      	strb	r3, [r7, #3]
 8009d80:	460b      	mov	r3, r1
 8009d82:	70bb      	strb	r3, [r7, #2]
 8009d84:	4613      	mov	r3, r2
 8009d86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d96:	78bb      	ldrb	r3, [r7, #2]
 8009d98:	883a      	ldrh	r2, [r7, #0]
 8009d9a:	78f9      	ldrb	r1, [r7, #3]
 8009d9c:	f7fb fbda 	bl	8005554 <HAL_PCD_EP_Open>
 8009da0:	4603      	mov	r3, r0
 8009da2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 f91c 	bl	8009fe4 <USBD_Get_USB_Status>
 8009dac:	4603      	mov	r3, r0
 8009dae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dd4:	78fa      	ldrb	r2, [r7, #3]
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fb fc23 	bl	8005624 <HAL_PCD_EP_Close>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 f8fd 	bl	8009fe4 <USBD_Get_USB_Status>
 8009dea:	4603      	mov	r3, r0
 8009dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e12:	78fa      	ldrb	r2, [r7, #3]
 8009e14:	4611      	mov	r1, r2
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fb fcfb 	bl	8005812 <HAL_PCD_EP_SetStall>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 f8de 	bl	8009fe4 <USBD_Get_USB_Status>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b084      	sub	sp, #16
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	460b      	mov	r3, r1
 8009e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e50:	78fa      	ldrb	r2, [r7, #3]
 8009e52:	4611      	mov	r1, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fb fd40 	bl	80058da <HAL_PCD_EP_ClrStall>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 f8bf 	bl	8009fe4 <USBD_Get_USB_Status>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	da0b      	bge.n	8009ea8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e96:	68f9      	ldr	r1, [r7, #12]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	1a9b      	subs	r3, r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	440b      	add	r3, r1
 8009ea2:	333e      	adds	r3, #62	; 0x3e
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	e00b      	b.n	8009ec0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ea8:	78fb      	ldrb	r3, [r7, #3]
 8009eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eae:	68f9      	ldr	r1, [r7, #12]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	1a9b      	subs	r3, r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	440b      	add	r3, r1
 8009eba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009ebe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ee6:	78fa      	ldrb	r2, [r7, #3]
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fb fb0d 	bl	800550a <HAL_PCD_SetAddress>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 f874 	bl	8009fe4 <USBD_Get_USB_Status>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	603b      	str	r3, [r7, #0]
 8009f16:	460b      	mov	r3, r1
 8009f18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f28:	7af9      	ldrb	r1, [r7, #11]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	f7fb fc26 	bl	800577e <HAL_PCD_EP_Transmit>
 8009f32:	4603      	mov	r3, r0
 8009f34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f36:	7dfb      	ldrb	r3, [r7, #23]
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f000 f853 	bl	8009fe4 <USBD_Get_USB_Status>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f42:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	607a      	str	r2, [r7, #4]
 8009f56:	603b      	str	r3, [r7, #0]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f6a:	7af9      	ldrb	r1, [r7, #11]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	f7fb fba2 	bl	80056b8 <HAL_PCD_EP_Receive>
 8009f74:	4603      	mov	r3, r0
 8009f76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 f832 	bl	8009fe4 <USBD_Get_USB_Status>
 8009f80:	4603      	mov	r3, r0
 8009f82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f84:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	460b      	mov	r3, r1
 8009f98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fa0:	78fa      	ldrb	r2, [r7, #3]
 8009fa2:	4611      	mov	r1, r2
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fb fbd2 	bl	800574e <HAL_PCD_EP_GetRxCount>
 8009faa:	4603      	mov	r3, r0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fbc:	4b03      	ldr	r3, [pc, #12]	; (8009fcc <USBD_static_malloc+0x18>)
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	20000620 	.word	0x20000620

08009fd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]

}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	4603      	mov	r3, r0
 8009fec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d817      	bhi.n	800a028 <USBD_Get_USB_Status+0x44>
 8009ff8:	a201      	add	r2, pc, #4	; (adr r2, 800a000 <USBD_Get_USB_Status+0x1c>)
 8009ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffe:	bf00      	nop
 800a000:	0800a011 	.word	0x0800a011
 800a004:	0800a017 	.word	0x0800a017
 800a008:	0800a01d 	.word	0x0800a01d
 800a00c:	0800a023 	.word	0x0800a023
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	73fb      	strb	r3, [r7, #15]
    break;
 800a014:	e00b      	b.n	800a02e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a016:	2303      	movs	r3, #3
 800a018:	73fb      	strb	r3, [r7, #15]
    break;
 800a01a:	e008      	b.n	800a02e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a01c:	2301      	movs	r3, #1
 800a01e:	73fb      	strb	r3, [r7, #15]
    break;
 800a020:	e005      	b.n	800a02e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a022:	2303      	movs	r3, #3
 800a024:	73fb      	strb	r3, [r7, #15]
    break;
 800a026:	e002      	b.n	800a02e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a028:	2303      	movs	r3, #3
 800a02a:	73fb      	strb	r3, [r7, #15]
    break;
 800a02c:	bf00      	nop
  }
  return usb_status;
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <__errno>:
 800a03c:	4b01      	ldr	r3, [pc, #4]	; (800a044 <__errno+0x8>)
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	20000188 	.word	0x20000188

0800a048 <__libc_init_array>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	4d0d      	ldr	r5, [pc, #52]	; (800a080 <__libc_init_array+0x38>)
 800a04c:	4c0d      	ldr	r4, [pc, #52]	; (800a084 <__libc_init_array+0x3c>)
 800a04e:	1b64      	subs	r4, r4, r5
 800a050:	10a4      	asrs	r4, r4, #2
 800a052:	2600      	movs	r6, #0
 800a054:	42a6      	cmp	r6, r4
 800a056:	d109      	bne.n	800a06c <__libc_init_array+0x24>
 800a058:	4d0b      	ldr	r5, [pc, #44]	; (800a088 <__libc_init_array+0x40>)
 800a05a:	4c0c      	ldr	r4, [pc, #48]	; (800a08c <__libc_init_array+0x44>)
 800a05c:	f000 f916 	bl	800a28c <_init>
 800a060:	1b64      	subs	r4, r4, r5
 800a062:	10a4      	asrs	r4, r4, #2
 800a064:	2600      	movs	r6, #0
 800a066:	42a6      	cmp	r6, r4
 800a068:	d105      	bne.n	800a076 <__libc_init_array+0x2e>
 800a06a:	bd70      	pop	{r4, r5, r6, pc}
 800a06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a070:	4798      	blx	r3
 800a072:	3601      	adds	r6, #1
 800a074:	e7ee      	b.n	800a054 <__libc_init_array+0xc>
 800a076:	f855 3b04 	ldr.w	r3, [r5], #4
 800a07a:	4798      	blx	r3
 800a07c:	3601      	adds	r6, #1
 800a07e:	e7f2      	b.n	800a066 <__libc_init_array+0x1e>
 800a080:	0800b070 	.word	0x0800b070
 800a084:	0800b070 	.word	0x0800b070
 800a088:	0800b070 	.word	0x0800b070
 800a08c:	0800b074 	.word	0x0800b074

0800a090 <memcpy>:
 800a090:	440a      	add	r2, r1
 800a092:	4291      	cmp	r1, r2
 800a094:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a098:	d100      	bne.n	800a09c <memcpy+0xc>
 800a09a:	4770      	bx	lr
 800a09c:	b510      	push	{r4, lr}
 800a09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0a6:	4291      	cmp	r1, r2
 800a0a8:	d1f9      	bne.n	800a09e <memcpy+0xe>
 800a0aa:	bd10      	pop	{r4, pc}

0800a0ac <memset>:
 800a0ac:	4402      	add	r2, r0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d100      	bne.n	800a0b6 <memset+0xa>
 800a0b4:	4770      	bx	lr
 800a0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ba:	e7f9      	b.n	800a0b0 <memset+0x4>

0800a0bc <sqrt>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	ed2d 8b02 	vpush	{d8}
 800a0c2:	ec55 4b10 	vmov	r4, r5, d0
 800a0c6:	f000 f82d 	bl	800a124 <__ieee754_sqrt>
 800a0ca:	4b15      	ldr	r3, [pc, #84]	; (800a120 <sqrt+0x64>)
 800a0cc:	eeb0 8a40 	vmov.f32	s16, s0
 800a0d0:	eef0 8a60 	vmov.f32	s17, s1
 800a0d4:	f993 3000 	ldrsb.w	r3, [r3]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	d019      	beq.n	800a110 <sqrt+0x54>
 800a0dc:	4622      	mov	r2, r4
 800a0de:	462b      	mov	r3, r5
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f7f6 fcc6 	bl	8000a74 <__aeabi_dcmpun>
 800a0e8:	b990      	cbnz	r0, 800a110 <sqrt+0x54>
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7f6 fc97 	bl	8000a24 <__aeabi_dcmplt>
 800a0f6:	b158      	cbz	r0, 800a110 <sqrt+0x54>
 800a0f8:	f7ff ffa0 	bl	800a03c <__errno>
 800a0fc:	2321      	movs	r3, #33	; 0x21
 800a0fe:	6003      	str	r3, [r0, #0]
 800a100:	2200      	movs	r2, #0
 800a102:	2300      	movs	r3, #0
 800a104:	4610      	mov	r0, r2
 800a106:	4619      	mov	r1, r3
 800a108:	f7f6 fb44 	bl	8000794 <__aeabi_ddiv>
 800a10c:	ec41 0b18 	vmov	d8, r0, r1
 800a110:	eeb0 0a48 	vmov.f32	s0, s16
 800a114:	eef0 0a68 	vmov.f32	s1, s17
 800a118:	ecbd 8b02 	vpop	{d8}
 800a11c:	bd38      	pop	{r3, r4, r5, pc}
 800a11e:	bf00      	nop
 800a120:	200001ec 	.word	0x200001ec

0800a124 <__ieee754_sqrt>:
 800a124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a128:	ec55 4b10 	vmov	r4, r5, d0
 800a12c:	4e56      	ldr	r6, [pc, #344]	; (800a288 <__ieee754_sqrt+0x164>)
 800a12e:	43ae      	bics	r6, r5
 800a130:	ee10 0a10 	vmov	r0, s0
 800a134:	ee10 3a10 	vmov	r3, s0
 800a138:	4629      	mov	r1, r5
 800a13a:	462a      	mov	r2, r5
 800a13c:	d110      	bne.n	800a160 <__ieee754_sqrt+0x3c>
 800a13e:	ee10 2a10 	vmov	r2, s0
 800a142:	462b      	mov	r3, r5
 800a144:	f7f6 f9fc 	bl	8000540 <__aeabi_dmul>
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	4620      	mov	r0, r4
 800a14e:	4629      	mov	r1, r5
 800a150:	f7f6 f840 	bl	80001d4 <__adddf3>
 800a154:	4604      	mov	r4, r0
 800a156:	460d      	mov	r5, r1
 800a158:	ec45 4b10 	vmov	d0, r4, r5
 800a15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a160:	2d00      	cmp	r5, #0
 800a162:	dc10      	bgt.n	800a186 <__ieee754_sqrt+0x62>
 800a164:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a168:	4330      	orrs	r0, r6
 800a16a:	d0f5      	beq.n	800a158 <__ieee754_sqrt+0x34>
 800a16c:	b15d      	cbz	r5, 800a186 <__ieee754_sqrt+0x62>
 800a16e:	ee10 2a10 	vmov	r2, s0
 800a172:	462b      	mov	r3, r5
 800a174:	ee10 0a10 	vmov	r0, s0
 800a178:	f7f6 f82a 	bl	80001d0 <__aeabi_dsub>
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	f7f6 fb08 	bl	8000794 <__aeabi_ddiv>
 800a184:	e7e6      	b.n	800a154 <__ieee754_sqrt+0x30>
 800a186:	1509      	asrs	r1, r1, #20
 800a188:	d076      	beq.n	800a278 <__ieee754_sqrt+0x154>
 800a18a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a18e:	07ce      	lsls	r6, r1, #31
 800a190:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a194:	bf5e      	ittt	pl
 800a196:	0fda      	lsrpl	r2, r3, #31
 800a198:	005b      	lslpl	r3, r3, #1
 800a19a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a19e:	0fda      	lsrs	r2, r3, #31
 800a1a0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a1a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	106d      	asrs	r5, r5, #1
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	f04f 0e16 	mov.w	lr, #22
 800a1b2:	4684      	mov	ip, r0
 800a1b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1b8:	eb0c 0401 	add.w	r4, ip, r1
 800a1bc:	4294      	cmp	r4, r2
 800a1be:	bfde      	ittt	le
 800a1c0:	1b12      	suble	r2, r2, r4
 800a1c2:	eb04 0c01 	addle.w	ip, r4, r1
 800a1c6:	1840      	addle	r0, r0, r1
 800a1c8:	0052      	lsls	r2, r2, #1
 800a1ca:	f1be 0e01 	subs.w	lr, lr, #1
 800a1ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a1d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a1d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1da:	d1ed      	bne.n	800a1b8 <__ieee754_sqrt+0x94>
 800a1dc:	4671      	mov	r1, lr
 800a1de:	2720      	movs	r7, #32
 800a1e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a1e4:	4562      	cmp	r2, ip
 800a1e6:	eb04 060e 	add.w	r6, r4, lr
 800a1ea:	dc02      	bgt.n	800a1f2 <__ieee754_sqrt+0xce>
 800a1ec:	d113      	bne.n	800a216 <__ieee754_sqrt+0xf2>
 800a1ee:	429e      	cmp	r6, r3
 800a1f0:	d811      	bhi.n	800a216 <__ieee754_sqrt+0xf2>
 800a1f2:	2e00      	cmp	r6, #0
 800a1f4:	eb06 0e04 	add.w	lr, r6, r4
 800a1f8:	da43      	bge.n	800a282 <__ieee754_sqrt+0x15e>
 800a1fa:	f1be 0f00 	cmp.w	lr, #0
 800a1fe:	db40      	blt.n	800a282 <__ieee754_sqrt+0x15e>
 800a200:	f10c 0801 	add.w	r8, ip, #1
 800a204:	eba2 020c 	sub.w	r2, r2, ip
 800a208:	429e      	cmp	r6, r3
 800a20a:	bf88      	it	hi
 800a20c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a210:	1b9b      	subs	r3, r3, r6
 800a212:	4421      	add	r1, r4
 800a214:	46c4      	mov	ip, r8
 800a216:	0052      	lsls	r2, r2, #1
 800a218:	3f01      	subs	r7, #1
 800a21a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a21e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a222:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a226:	d1dd      	bne.n	800a1e4 <__ieee754_sqrt+0xc0>
 800a228:	4313      	orrs	r3, r2
 800a22a:	d006      	beq.n	800a23a <__ieee754_sqrt+0x116>
 800a22c:	1c4c      	adds	r4, r1, #1
 800a22e:	bf13      	iteet	ne
 800a230:	3101      	addne	r1, #1
 800a232:	3001      	addeq	r0, #1
 800a234:	4639      	moveq	r1, r7
 800a236:	f021 0101 	bicne.w	r1, r1, #1
 800a23a:	1043      	asrs	r3, r0, #1
 800a23c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a240:	0849      	lsrs	r1, r1, #1
 800a242:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a246:	07c2      	lsls	r2, r0, #31
 800a248:	bf48      	it	mi
 800a24a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a24e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a252:	460c      	mov	r4, r1
 800a254:	463d      	mov	r5, r7
 800a256:	e77f      	b.n	800a158 <__ieee754_sqrt+0x34>
 800a258:	0ada      	lsrs	r2, r3, #11
 800a25a:	3815      	subs	r0, #21
 800a25c:	055b      	lsls	r3, r3, #21
 800a25e:	2a00      	cmp	r2, #0
 800a260:	d0fa      	beq.n	800a258 <__ieee754_sqrt+0x134>
 800a262:	02d7      	lsls	r7, r2, #11
 800a264:	d50a      	bpl.n	800a27c <__ieee754_sqrt+0x158>
 800a266:	f1c1 0420 	rsb	r4, r1, #32
 800a26a:	fa23 f404 	lsr.w	r4, r3, r4
 800a26e:	1e4d      	subs	r5, r1, #1
 800a270:	408b      	lsls	r3, r1
 800a272:	4322      	orrs	r2, r4
 800a274:	1b41      	subs	r1, r0, r5
 800a276:	e788      	b.n	800a18a <__ieee754_sqrt+0x66>
 800a278:	4608      	mov	r0, r1
 800a27a:	e7f0      	b.n	800a25e <__ieee754_sqrt+0x13a>
 800a27c:	0052      	lsls	r2, r2, #1
 800a27e:	3101      	adds	r1, #1
 800a280:	e7ef      	b.n	800a262 <__ieee754_sqrt+0x13e>
 800a282:	46e0      	mov	r8, ip
 800a284:	e7be      	b.n	800a204 <__ieee754_sqrt+0xe0>
 800a286:	bf00      	nop
 800a288:	7ff00000 	.word	0x7ff00000

0800a28c <_init>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	bf00      	nop
 800a290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a292:	bc08      	pop	{r3}
 800a294:	469e      	mov	lr, r3
 800a296:	4770      	bx	lr

0800a298 <_fini>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	bf00      	nop
 800a29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29e:	bc08      	pop	{r3}
 800a2a0:	469e      	mov	lr, r3
 800a2a2:	4770      	bx	lr
