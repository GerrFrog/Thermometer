
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  08008b88  08008b88  00018b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800994c  0800994c  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009954  08009954  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009958  08009958  00019958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800995c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          000020b0  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002238  20002238  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f82e  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e91  00000000  00000000  0003f9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  00043878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e08  00000000  00000000  000447f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000249ee  00000000  00000000  000455f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001612b  00000000  00000000  00069fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c74e0  00000000  00000000  00080111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001475f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004004  00000000  00000000  00147644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b70 	.word	0x08008b70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	08008b70 	.word	0x08008b70

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007f8:	f000 b96e 	b.w	8000ad8 <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9d08      	ldr	r5, [sp, #32]
 800081a:	4604      	mov	r4, r0
 800081c:	468c      	mov	ip, r1
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 8083 	bne.w	800092a <__udivmoddi4+0x116>
 8000824:	428a      	cmp	r2, r1
 8000826:	4617      	mov	r7, r2
 8000828:	d947      	bls.n	80008ba <__udivmoddi4+0xa6>
 800082a:	fab2 f282 	clz	r2, r2
 800082e:	b142      	cbz	r2, 8000842 <__udivmoddi4+0x2e>
 8000830:	f1c2 0020 	rsb	r0, r2, #32
 8000834:	fa24 f000 	lsr.w	r0, r4, r0
 8000838:	4091      	lsls	r1, r2
 800083a:	4097      	lsls	r7, r2
 800083c:	ea40 0c01 	orr.w	ip, r0, r1
 8000840:	4094      	lsls	r4, r2
 8000842:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000846:	0c23      	lsrs	r3, r4, #16
 8000848:	fbbc f6f8 	udiv	r6, ip, r8
 800084c:	fa1f fe87 	uxth.w	lr, r7
 8000850:	fb08 c116 	mls	r1, r8, r6, ip
 8000854:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000858:	fb06 f10e 	mul.w	r1, r6, lr
 800085c:	4299      	cmp	r1, r3
 800085e:	d909      	bls.n	8000874 <__udivmoddi4+0x60>
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000866:	f080 8119 	bcs.w	8000a9c <__udivmoddi4+0x288>
 800086a:	4299      	cmp	r1, r3
 800086c:	f240 8116 	bls.w	8000a9c <__udivmoddi4+0x288>
 8000870:	3e02      	subs	r6, #2
 8000872:	443b      	add	r3, r7
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b2a4      	uxth	r4, r4
 8000878:	fbb3 f0f8 	udiv	r0, r3, r8
 800087c:	fb08 3310 	mls	r3, r8, r0, r3
 8000880:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000884:	fb00 fe0e 	mul.w	lr, r0, lr
 8000888:	45a6      	cmp	lr, r4
 800088a:	d909      	bls.n	80008a0 <__udivmoddi4+0x8c>
 800088c:	193c      	adds	r4, r7, r4
 800088e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000892:	f080 8105 	bcs.w	8000aa0 <__udivmoddi4+0x28c>
 8000896:	45a6      	cmp	lr, r4
 8000898:	f240 8102 	bls.w	8000aa0 <__udivmoddi4+0x28c>
 800089c:	3802      	subs	r0, #2
 800089e:	443c      	add	r4, r7
 80008a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008a4:	eba4 040e 	sub.w	r4, r4, lr
 80008a8:	2600      	movs	r6, #0
 80008aa:	b11d      	cbz	r5, 80008b4 <__udivmoddi4+0xa0>
 80008ac:	40d4      	lsrs	r4, r2
 80008ae:	2300      	movs	r3, #0
 80008b0:	e9c5 4300 	strd	r4, r3, [r5]
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xaa>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d150      	bne.n	8000968 <__udivmoddi4+0x154>
 80008c6:	1bcb      	subs	r3, r1, r7
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	fa1f f887 	uxth.w	r8, r7
 80008d0:	2601      	movs	r6, #1
 80008d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80008d6:	0c21      	lsrs	r1, r4, #16
 80008d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80008dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e0:	fb08 f30c 	mul.w	r3, r8, ip
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d907      	bls.n	80008f8 <__udivmoddi4+0xe4>
 80008e8:	1879      	adds	r1, r7, r1
 80008ea:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80008ee:	d202      	bcs.n	80008f6 <__udivmoddi4+0xe2>
 80008f0:	428b      	cmp	r3, r1
 80008f2:	f200 80e9 	bhi.w	8000ac8 <__udivmoddi4+0x2b4>
 80008f6:	4684      	mov	ip, r0
 80008f8:	1ac9      	subs	r1, r1, r3
 80008fa:	b2a3      	uxth	r3, r4
 80008fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000900:	fb0e 1110 	mls	r1, lr, r0, r1
 8000904:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000908:	fb08 f800 	mul.w	r8, r8, r0
 800090c:	45a0      	cmp	r8, r4
 800090e:	d907      	bls.n	8000920 <__udivmoddi4+0x10c>
 8000910:	193c      	adds	r4, r7, r4
 8000912:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x10a>
 8000918:	45a0      	cmp	r8, r4
 800091a:	f200 80d9 	bhi.w	8000ad0 <__udivmoddi4+0x2bc>
 800091e:	4618      	mov	r0, r3
 8000920:	eba4 0408 	sub.w	r4, r4, r8
 8000924:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000928:	e7bf      	b.n	80008aa <__udivmoddi4+0x96>
 800092a:	428b      	cmp	r3, r1
 800092c:	d909      	bls.n	8000942 <__udivmoddi4+0x12e>
 800092e:	2d00      	cmp	r5, #0
 8000930:	f000 80b1 	beq.w	8000a96 <__udivmoddi4+0x282>
 8000934:	2600      	movs	r6, #0
 8000936:	e9c5 0100 	strd	r0, r1, [r5]
 800093a:	4630      	mov	r0, r6
 800093c:	4631      	mov	r1, r6
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	fab3 f683 	clz	r6, r3
 8000946:	2e00      	cmp	r6, #0
 8000948:	d14a      	bne.n	80009e0 <__udivmoddi4+0x1cc>
 800094a:	428b      	cmp	r3, r1
 800094c:	d302      	bcc.n	8000954 <__udivmoddi4+0x140>
 800094e:	4282      	cmp	r2, r0
 8000950:	f200 80b8 	bhi.w	8000ac4 <__udivmoddi4+0x2b0>
 8000954:	1a84      	subs	r4, r0, r2
 8000956:	eb61 0103 	sbc.w	r1, r1, r3
 800095a:	2001      	movs	r0, #1
 800095c:	468c      	mov	ip, r1
 800095e:	2d00      	cmp	r5, #0
 8000960:	d0a8      	beq.n	80008b4 <__udivmoddi4+0xa0>
 8000962:	e9c5 4c00 	strd	r4, ip, [r5]
 8000966:	e7a5      	b.n	80008b4 <__udivmoddi4+0xa0>
 8000968:	f1c2 0320 	rsb	r3, r2, #32
 800096c:	fa20 f603 	lsr.w	r6, r0, r3
 8000970:	4097      	lsls	r7, r2
 8000972:	fa01 f002 	lsl.w	r0, r1, r2
 8000976:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800097a:	40d9      	lsrs	r1, r3
 800097c:	4330      	orrs	r0, r6
 800097e:	0c03      	lsrs	r3, r0, #16
 8000980:	fbb1 f6fe 	udiv	r6, r1, lr
 8000984:	fa1f f887 	uxth.w	r8, r7
 8000988:	fb0e 1116 	mls	r1, lr, r6, r1
 800098c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000990:	fb06 f108 	mul.w	r1, r6, r8
 8000994:	4299      	cmp	r1, r3
 8000996:	fa04 f402 	lsl.w	r4, r4, r2
 800099a:	d909      	bls.n	80009b0 <__udivmoddi4+0x19c>
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80009a2:	f080 808d 	bcs.w	8000ac0 <__udivmoddi4+0x2ac>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 808a 	bls.w	8000ac0 <__udivmoddi4+0x2ac>
 80009ac:	3e02      	subs	r6, #2
 80009ae:	443b      	add	r3, r7
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	b281      	uxth	r1, r0
 80009b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c0:	fb00 f308 	mul.w	r3, r0, r8
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x1c4>
 80009c8:	1879      	adds	r1, r7, r1
 80009ca:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80009ce:	d273      	bcs.n	8000ab8 <__udivmoddi4+0x2a4>
 80009d0:	428b      	cmp	r3, r1
 80009d2:	d971      	bls.n	8000ab8 <__udivmoddi4+0x2a4>
 80009d4:	3802      	subs	r0, #2
 80009d6:	4439      	add	r1, r7
 80009d8:	1acb      	subs	r3, r1, r3
 80009da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009de:	e778      	b.n	80008d2 <__udivmoddi4+0xbe>
 80009e0:	f1c6 0c20 	rsb	ip, r6, #32
 80009e4:	fa03 f406 	lsl.w	r4, r3, r6
 80009e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80009ec:	431c      	orrs	r4, r3
 80009ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80009f2:	fa01 f306 	lsl.w	r3, r1, r6
 80009f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80009fe:	431f      	orrs	r7, r3
 8000a00:	0c3b      	lsrs	r3, r7, #16
 8000a02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a06:	fa1f f884 	uxth.w	r8, r4
 8000a0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a12:	fb09 fa08 	mul.w	sl, r9, r8
 8000a16:	458a      	cmp	sl, r1
 8000a18:	fa02 f206 	lsl.w	r2, r2, r6
 8000a1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a20:	d908      	bls.n	8000a34 <__udivmoddi4+0x220>
 8000a22:	1861      	adds	r1, r4, r1
 8000a24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a28:	d248      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a2a:	458a      	cmp	sl, r1
 8000a2c:	d946      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a32:	4421      	add	r1, r4
 8000a34:	eba1 010a 	sub.w	r1, r1, sl
 8000a38:	b2bf      	uxth	r7, r7
 8000a3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a46:	fb00 f808 	mul.w	r8, r0, r8
 8000a4a:	45b8      	cmp	r8, r7
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x24a>
 8000a4e:	19e7      	adds	r7, r4, r7
 8000a50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a54:	d22e      	bcs.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a56:	45b8      	cmp	r8, r7
 8000a58:	d92c      	bls.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a5a:	3802      	subs	r0, #2
 8000a5c:	4427      	add	r7, r4
 8000a5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a62:	eba7 0708 	sub.w	r7, r7, r8
 8000a66:	fba0 8902 	umull	r8, r9, r0, r2
 8000a6a:	454f      	cmp	r7, r9
 8000a6c:	46c6      	mov	lr, r8
 8000a6e:	4649      	mov	r1, r9
 8000a70:	d31a      	bcc.n	8000aa8 <__udivmoddi4+0x294>
 8000a72:	d017      	beq.n	8000aa4 <__udivmoddi4+0x290>
 8000a74:	b15d      	cbz	r5, 8000a8e <__udivmoddi4+0x27a>
 8000a76:	ebb3 020e 	subs.w	r2, r3, lr
 8000a7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000a7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a82:	40f2      	lsrs	r2, r6
 8000a84:	ea4c 0202 	orr.w	r2, ip, r2
 8000a88:	40f7      	lsrs	r7, r6
 8000a8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000a8e:	2600      	movs	r6, #0
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	462e      	mov	r6, r5
 8000a98:	4628      	mov	r0, r5
 8000a9a:	e70b      	b.n	80008b4 <__udivmoddi4+0xa0>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	e6e9      	b.n	8000874 <__udivmoddi4+0x60>
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	e6fd      	b.n	80008a0 <__udivmoddi4+0x8c>
 8000aa4:	4543      	cmp	r3, r8
 8000aa6:	d2e5      	bcs.n	8000a74 <__udivmoddi4+0x260>
 8000aa8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000aac:	eb69 0104 	sbc.w	r1, r9, r4
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	e7df      	b.n	8000a74 <__udivmoddi4+0x260>
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	e7d2      	b.n	8000a5e <__udivmoddi4+0x24a>
 8000ab8:	4660      	mov	r0, ip
 8000aba:	e78d      	b.n	80009d8 <__udivmoddi4+0x1c4>
 8000abc:	4681      	mov	r9, r0
 8000abe:	e7b9      	b.n	8000a34 <__udivmoddi4+0x220>
 8000ac0:	4666      	mov	r6, ip
 8000ac2:	e775      	b.n	80009b0 <__udivmoddi4+0x19c>
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	e74a      	b.n	800095e <__udivmoddi4+0x14a>
 8000ac8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000acc:	4439      	add	r1, r7
 8000ace:	e713      	b.n	80008f8 <__udivmoddi4+0xe4>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	443c      	add	r4, r7
 8000ad4:	e724      	b.n	8000920 <__udivmoddi4+0x10c>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_idiv0>:
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <ScanDevices>:
 *
 * @param hi2c Handler of I2C
 * @return int Device address
 */
int ScanDevices(I2C_HandleTypeDef hi2c)
{
 8000adc:	b084      	sub	sp, #16
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	f107 0c10 	add.w	ip, r7, #16
 8000ae8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef result;
	for (int i = 0; i<126; i++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	e029      	b.n	8000b46 <ScanDevices+0x6a>
	{
		result = HAL_I2C_IsDeviceReady(&hi2c, (uint16_t) (i<<1), 2, 2);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	b299      	uxth	r1, r3
 8000afa:	2302      	movs	r3, #2
 8000afc:	2202      	movs	r2, #2
 8000afe:	f107 0010 	add.w	r0, r7, #16
 8000b02:	f002 f8eb 	bl	8002cdc <HAL_I2C_IsDeviceReady>
 8000b06:	4603      	mov	r3, r0
 8000b08:	70fb      	strb	r3, [r7, #3]
		if (result != HAL_OK)
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d004      	beq.n	8000b1a <ScanDevices+0x3e>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b14:	4811      	ldr	r0, [pc, #68]	; (8000b5c <ScanDevices+0x80>)
 8000b16:	f001 fc5e 	bl	80023d6 <HAL_GPIO_TogglePin>
		if (result == HAL_OK)
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10f      	bne.n	8000b40 <ScanDevices+0x64>
		{
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <ScanDevices+0x80>)
 8000b26:	f001 fc56 	bl	80023d6 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2e:	f001 f94f 	bl	8001dd0 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b36:	4809      	ldr	r0, [pc, #36]	; (8000b5c <ScanDevices+0x80>)
 8000b38:	f001 fc4d 	bl	80023d6 <HAL_GPIO_TogglePin>
		  return i;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	e005      	b.n	8000b4c <ScanDevices+0x70>
	for (int i = 0; i<126; i++)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3301      	adds	r3, #1
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b7d      	cmp	r3, #125	; 0x7d
 8000b4a:	ddd2      	ble.n	8000af2 <ScanDevices+0x16>
		}
	}
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b56:	b004      	add	sp, #16
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40020c00 	.word	0x40020c00

08000b60 <float_temp_to_char_temp>:
 * @param arr Pointer to output array
 * @return void
 */
#if defined(MLX90614) || defined(MLX90632)
	void float_temp_to_char_temp(double digit, char* arr)
	{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b6a:	6078      	str	r0, [r7, #4]
//			arr[3] = 's';
//			arr[4] = '\0';
//			arr[5] = '\0';
//			return;
//		}
		int l_digit = digit * 100.0;
 8000b6c:	f04f 0200 	mov.w	r2, #0
 8000b70:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <float_temp_to_char_temp+0x110>)
 8000b72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b76:	f7ff fb27 	bl	80001c8 <__aeabi_dmul>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4610      	mov	r0, r2
 8000b80:	4619      	mov	r1, r3
 8000b82:	f7ff fe07 	bl	8000794 <__aeabi_d2iz>
 8000b86:	4603      	mov	r3, r0
 8000b88:	617b      	str	r3, [r7, #20]
		arr[7] = '\0';
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3307      	adds	r3, #7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
		arr[6] = '\0';
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3306      	adds	r3, #6
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		arr[5] = '\0';
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3305      	adds	r3, #5
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
		arr[4] = l_digit % 10 + '0';
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <float_temp_to_char_temp+0x114>)
 8000ba6:	fb83 1302 	smull	r1, r3, r3, r2
 8000baa:	1099      	asrs	r1, r3, #2
 8000bac:	17d3      	asrs	r3, r2, #31
 8000bae:	1ac9      	subs	r1, r1, r3
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	1ad1      	subs	r1, r2, r3
 8000bba:	b2ca      	uxtb	r2, r1
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	3230      	adds	r2, #48	; 0x30
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	701a      	strb	r2, [r3, #0]
		l_digit /= 10;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <float_temp_to_char_temp+0x114>)
 8000bca:	fb82 1203 	smull	r1, r2, r2, r3
 8000bce:	1092      	asrs	r2, r2, #2
 8000bd0:	17db      	asrs	r3, r3, #31
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	617b      	str	r3, [r7, #20]
		arr[3] = l_digit % 10 + '0';
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <float_temp_to_char_temp+0x114>)
 8000bda:	fb83 1302 	smull	r1, r3, r3, r2
 8000bde:	1099      	asrs	r1, r3, #2
 8000be0:	17d3      	asrs	r3, r2, #31
 8000be2:	1ac9      	subs	r1, r1, r3
 8000be4:	460b      	mov	r3, r1
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	440b      	add	r3, r1
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	1ad1      	subs	r1, r2, r3
 8000bee:	b2ca      	uxtb	r2, r1
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3303      	adds	r3, #3
 8000bf4:	3230      	adds	r2, #48	; 0x30
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	701a      	strb	r2, [r3, #0]
		l_digit /= 10;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <float_temp_to_char_temp+0x114>)
 8000bfe:	fb82 1203 	smull	r1, r2, r2, r3
 8000c02:	1092      	asrs	r2, r2, #2
 8000c04:	17db      	asrs	r3, r3, #31
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	617b      	str	r3, [r7, #20]
		arr[2] = ',';
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	222c      	movs	r2, #44	; 0x2c
 8000c10:	701a      	strb	r2, [r3, #0]
		arr[1] = l_digit % 10 + '0';
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <float_temp_to_char_temp+0x114>)
 8000c16:	fb83 1302 	smull	r1, r3, r3, r2
 8000c1a:	1099      	asrs	r1, r3, #2
 8000c1c:	17d3      	asrs	r3, r2, #31
 8000c1e:	1ac9      	subs	r1, r1, r3
 8000c20:	460b      	mov	r3, r1
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	440b      	add	r3, r1
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	1ad1      	subs	r1, r2, r3
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	3230      	adds	r2, #48	; 0x30
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	701a      	strb	r2, [r3, #0]
		l_digit /= 10;
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <float_temp_to_char_temp+0x114>)
 8000c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3e:	1092      	asrs	r2, r2, #2
 8000c40:	17db      	asrs	r3, r3, #31
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	617b      	str	r3, [r7, #20]
		arr[0] = l_digit % 10 + '0';
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <float_temp_to_char_temp+0x114>)
 8000c4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c4e:	1099      	asrs	r1, r3, #2
 8000c50:	17d3      	asrs	r3, r2, #31
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	460b      	mov	r3, r1
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	440b      	add	r3, r1
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	1ad1      	subs	r1, r2, r3
 8000c5e:	b2cb      	uxtb	r3, r1
 8000c60:	3330      	adds	r3, #48	; 0x30
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	701a      	strb	r2, [r3, #0]
	}
 8000c68:	bf00      	nop
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40590000 	.word	0x40590000
 8000c74:	66666667 	.word	0x66666667

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b09c      	sub	sp, #112	; 0x70
 8000c7c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7e:	f001 f835 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c82:	f000 f8d7 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c86:	f000 f9c7 	bl	8001018 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c8a:	f000 f93b 	bl	8000f04 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c8e:	f000 f967 	bl	8000f60 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000c92:	f007 fa29 	bl	80080e8 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 8000c96:	f000 f991 	bl	8000fbc <MX_I2C3_Init>
#endif

  // Initialize Display
#ifdef SSD1306_DISPLAY
  {
	  if (SSD1306_Init(hi2c3) != 1)
 8000c9a:	4c5f      	ldr	r4, [pc, #380]	; (8000e18 <main+0x1a0>)
 8000c9c:	4668      	mov	r0, sp
 8000c9e:	f104 0310 	add.w	r3, r4, #16
 8000ca2:	2244      	movs	r2, #68	; 0x44
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f007 ff4d 	bl	8008b44 <memcpy>
 8000caa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cae:	f000 fa8d 	bl	80011cc <SSD1306_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d00d      	beq.n	8000cd4 <main+0x5c>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000cb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbc:	4857      	ldr	r0, [pc, #348]	; (8000e1c <main+0x1a4>)
 8000cbe:	f001 fb8a 	bl	80023d6 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc6:	f001 f883 	bl	8001dd0 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000cca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cce:	4853      	ldr	r0, [pc, #332]	; (8000e1c <main+0x1a4>)
 8000cd0:	f001 fb81 	bl	80023d6 <HAL_GPIO_TogglePin>
	  }

	  SSD1306_GotoXY (0,0);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f000 fd56 	bl	8001788 <SSD1306_GotoXY>
	  SSD1306_Puts ("initialize", &Font_11x18, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4950      	ldr	r1, [pc, #320]	; (8000e20 <main+0x1a8>)
 8000ce0:	4850      	ldr	r0, [pc, #320]	; (8000e24 <main+0x1ac>)
 8000ce2:	f000 fde7 	bl	80018b4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000ce6:	f000 fc87 	bl	80015f8 <SSD1306_UpdateScreen>
  }
#endif

#if defined(MLX90614) || defined(MLX90632)
  int mlx_addr_1 = ScanDevices(hi2c1);
 8000cea:	4c4f      	ldr	r4, [pc, #316]	; (8000e28 <main+0x1b0>)
 8000cec:	4668      	mov	r0, sp
 8000cee:	f104 0310 	add.w	r3, r4, #16
 8000cf2:	2244      	movs	r2, #68	; 0x44
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f007 ff25 	bl	8008b44 <memcpy>
 8000cfa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cfe:	f7ff feed 	bl	8000adc <ScanDevices>
 8000d02:	61f8      	str	r0, [r7, #28]
  int mlx_addr_2 = ScanDevices(hi2c2);
 8000d04:	4c49      	ldr	r4, [pc, #292]	; (8000e2c <main+0x1b4>)
 8000d06:	4668      	mov	r0, sp
 8000d08:	f104 0310 	add.w	r3, r4, #16
 8000d0c:	2244      	movs	r2, #68	; 0x44
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f007 ff18 	bl	8008b44 <memcpy>
 8000d14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d18:	f7ff fee0 	bl	8000adc <ScanDevices>
 8000d1c:	61b8      	str	r0, [r7, #24]

  float float_temp_1 = 0.0;
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  float float_temp_2 = 0.0;
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  char char_temp_1[8];
  char char_temp_2[8];
#endif

#ifdef SSD1306_DISPLAY
  SSD1306_Clear();
 8000d2a:	f000 fde8 	bl	80018fe <SSD1306_Clear>

	float_temp_to_char_temp(float_temp_1, char_temp_1);
	float_temp_to_char_temp(float_temp_2, char_temp_2);
#elif defined(MLX90632)
//	float_temp_1 = MLX90632_ReadTemp(mlx_addr_1, hi2c1);
	float_temp_1 = MLX90632_ReadReg(MLX90632_DEFAULT_SA, MLX90632_RAM_6, MLX90632_DBG_OFF, hi2c1);
 8000d2e:	4c3e      	ldr	r4, [pc, #248]	; (8000e28 <main+0x1b0>)
 8000d30:	4668      	mov	r0, sp
 8000d32:	1d23      	adds	r3, r4, #4
 8000d34:	2250      	movs	r2, #80	; 0x50
 8000d36:	4619      	mov	r1, r3
 8000d38:	f007 ff04 	bl	8008b44 <memcpy>
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f244 0105 	movw	r1, #16389	; 0x4005
 8000d44:	203a      	movs	r0, #58	; 0x3a
 8000d46:	f000 f9e8 	bl	800111a <MLX90632_ReadReg>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d54:	edc7 7a05 	vstr	s15, [r7, #20]
	float_temp_2 = MLX90632_ReadTemp(mlx_addr_2, hi2c2);
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	b2dd      	uxtb	r5, r3
 8000d5c:	4c33      	ldr	r4, [pc, #204]	; (8000e2c <main+0x1b4>)
 8000d5e:	4668      	mov	r0, sp
 8000d60:	f104 030c 	add.w	r3, r4, #12
 8000d64:	2248      	movs	r2, #72	; 0x48
 8000d66:	4619      	mov	r1, r3
 8000d68:	f007 feec 	bl	8008b44 <memcpy>
 8000d6c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000d70:	4628      	mov	r0, r5
 8000d72:	f000 f9fd 	bl	8001170 <MLX90632_ReadTemp>
 8000d76:	ed87 0a04 	vstr	s0, [r7, #16]

	float_temp_to_char_temp(float_temp_1, char_temp_1);
 8000d7a:	6978      	ldr	r0, [r7, #20]
 8000d7c:	f7ff fcb2 	bl	80006e4 <__aeabi_f2d>
 8000d80:	4604      	mov	r4, r0
 8000d82:	460d      	mov	r5, r1
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	4618      	mov	r0, r3
 8000d8a:	ec45 4b10 	vmov	d0, r4, r5
 8000d8e:	f7ff fee7 	bl	8000b60 <float_temp_to_char_temp>
	float_temp_to_char_temp(float_temp_2, char_temp_2);
 8000d92:	6938      	ldr	r0, [r7, #16]
 8000d94:	f7ff fca6 	bl	80006e4 <__aeabi_f2d>
 8000d98:	4604      	mov	r4, r0
 8000d9a:	460d      	mov	r5, r1
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4618      	mov	r0, r3
 8000da0:	ec45 4b10 	vmov	d0, r4, r5
 8000da4:	f7ff fedc 	bl	8000b60 <float_temp_to_char_temp>
#endif


	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 8000da8:	2101      	movs	r1, #1
 8000daa:	4821      	ldr	r0, [pc, #132]	; (8000e30 <main+0x1b8>)
 8000dac:	f001 fae2 	bl	8002374 <HAL_GPIO_ReadPin>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d114      	bne.n	8000de0 <main+0x168>
	{
#ifdef SSD1306_DISPLAY
		SSD1306_GotoXY(0, 0);
 8000db6:	2100      	movs	r1, #0
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 fce5 	bl	8001788 <SSD1306_GotoXY>
		SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4916      	ldr	r1, [pc, #88]	; (8000e20 <main+0x1a8>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fd74 	bl	80018b4 <SSD1306_Puts>

		SSD1306_GotoXY(70, 0);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2046      	movs	r0, #70	; 0x46
 8000dd0:	f000 fcda 	bl	8001788 <SSD1306_GotoXY>
		SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4911      	ldr	r1, [pc, #68]	; (8000e20 <main+0x1a8>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fd6a 	bl	80018b4 <SSD1306_Puts>
		}
#endif
	}

#ifdef SSD1306_DISPLAY
	SSD1306_GotoXY(0, 29);
 8000de0:	211d      	movs	r1, #29
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 fcd0 	bl	8001788 <SSD1306_GotoXY>
	SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	2201      	movs	r2, #1
 8000dee:	490c      	ldr	r1, [pc, #48]	; (8000e20 <main+0x1a8>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fd5f 	bl	80018b4 <SSD1306_Puts>

	SSD1306_GotoXY(70, 29);
 8000df6:	211d      	movs	r1, #29
 8000df8:	2046      	movs	r0, #70	; 0x46
 8000dfa:	f000 fcc5 	bl	8001788 <SSD1306_GotoXY>
	SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2201      	movs	r2, #1
 8000e02:	4907      	ldr	r1, [pc, #28]	; (8000e20 <main+0x1a8>)
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fd55 	bl	80018b4 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8000e0a:	f000 fbf5 	bl	80015f8 <SSD1306_UpdateScreen>
		CDC_Transmit_FS((uint8_t*)char_temp_2, strlen((uint8_t*)char_temp_2));
		CDC_Transmit_FS(end, strlen(end));
	}
#endif

	HAL_Delay(100);
 8000e0e:	2064      	movs	r0, #100	; 0x64
 8000e10:	f000 ffde 	bl	8001dd0 <HAL_Delay>
	float_temp_1 = MLX90632_ReadReg(MLX90632_DEFAULT_SA, MLX90632_RAM_6, MLX90632_DBG_OFF, hi2c1);
 8000e14:	e78b      	b.n	8000d2e <main+0xb6>
 8000e16:	bf00      	nop
 8000e18:	20000820 	.word	0x20000820
 8000e1c:	40020c00 	.word	0x40020c00
 8000e20:	20000000 	.word	0x20000000
 8000e24:	08008b88 	.word	0x08008b88
 8000e28:	20000874 	.word	0x20000874
 8000e2c:	200008c8 	.word	0x200008c8
 8000e30:	40020000 	.word	0x40020000

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	; 0x50
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2230      	movs	r2, #48	; 0x30
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f007 fe8c 	bl	8008b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <SystemClock_Config+0xc8>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a26      	ldr	r2, [pc, #152]	; (8000efc <SystemClock_Config+0xc8>)
 8000e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <SystemClock_Config+0xc8>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	2301      	movs	r3, #1
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ea8:	23c0      	movs	r3, #192	; 0xc0
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb4:	f107 0320 	add.w	r3, r7, #32
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fd07 	bl	80048cc <HAL_RCC_OscConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ec4:	f000 f924 	bl	8001110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec8:	230f      	movs	r3, #15
 8000eca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 ff6a 	bl	8004dbc <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000eee:	f000 f90f 	bl	8001110 <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3750      	adds	r7, #80	; 0x50
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40007000 	.word	0x40007000

08000f04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_I2C1_Init+0x50>)
 8000f0a:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <MX_I2C1_Init+0x54>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_I2C1_Init+0x50>)
 8000f10:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x58>)
 8000f12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_I2C1_Init+0x50>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_I2C1_Init+0x50>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_I2C1_Init+0x50>)
 8000f22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <MX_I2C1_Init+0x50>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_I2C1_Init+0x50>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <MX_I2C1_Init+0x50>)
 8000f42:	f001 fa63 	bl	800240c <HAL_I2C_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f4c:	f000 f8e0 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000874 	.word	0x20000874
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	000186a0 	.word	0x000186a0

08000f60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_I2C2_Init+0x50>)
 8000f66:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <MX_I2C2_Init+0x54>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_I2C2_Init+0x50>)
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <MX_I2C2_Init+0x58>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_I2C2_Init+0x50>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_I2C2_Init+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_I2C2_Init+0x50>)
 8000f7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <MX_I2C2_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_I2C2_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <MX_I2C2_Init+0x50>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_I2C2_Init+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_I2C2_Init+0x50>)
 8000f9e:	f001 fa35 	bl	800240c <HAL_I2C_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fa8:	f000 f8b2 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200008c8 	.word	0x200008c8
 8000fb4:	40005800 	.word	0x40005800
 8000fb8:	000186a0 	.word	0x000186a0

08000fbc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C3_Init+0x50>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MX_I2C3_Init+0x54>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C3_Init+0x50>)
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <MX_I2C3_Init+0x58>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C3_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_I2C3_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_I2C3_Init+0x50>)
 8000fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fde:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_I2C3_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_I2C3_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_I2C3_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_I2C3_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_I2C3_Init+0x50>)
 8000ffa:	f001 fa07 	bl	800240c <HAL_I2C_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001004:	f000 f884 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000820 	.word	0x20000820
 8001010:	40005c00 	.word	0x40005c00
 8001014:	00061a80 	.word	0x00061a80

08001018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <MX_GPIO_Init+0xec>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a33      	ldr	r2, [pc, #204]	; (8001104 <MX_GPIO_Init+0xec>)
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <MX_GPIO_Init+0xec>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <MX_GPIO_Init+0xec>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a2c      	ldr	r2, [pc, #176]	; (8001104 <MX_GPIO_Init+0xec>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <MX_GPIO_Init+0xec>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_GPIO_Init+0xec>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a25      	ldr	r2, [pc, #148]	; (8001104 <MX_GPIO_Init+0xec>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <MX_GPIO_Init+0xec>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <MX_GPIO_Init+0xec>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <MX_GPIO_Init+0xec>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_GPIO_Init+0xec>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_GPIO_Init+0xec>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <MX_GPIO_Init+0xec>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_GPIO_Init+0xec>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <MX_GPIO_Init+0xf0>)
 80010c2:	f001 f96f 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_GPIO_Init+0xf4>)
 80010da:	f000 ffaf 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_GPIO_Init+0xf0>)
 80010f8:	f000 ffa0 	bl	800203c <HAL_GPIO_Init>

}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40020c00 	.word	0x40020c00
 800110c:	40020000 	.word	0x40020000

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>

0800111a <MLX90632_ReadReg>:
	HAL_Delay(10);
	MLX90632_SendDebugMsg(MLX90632_DBG_MSG_W, devAddr, i2cdata[0], data, i2cdata[3], 0x00);
}

uint16_t MLX90632_ReadReg(uint8_t devAddr, uint16_t regAddr, uint8_t dbg_lvl, I2C_HandleTypeDef hi2c)
{
 800111a:	b082      	sub	sp, #8
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af04      	add	r7, sp, #16
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	460b      	mov	r3, r1
 800112a:	80bb      	strh	r3, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	int16_t ret;

	HAL_I2C_Mem_Read(&hi2c, (devAddr<<1), regAddr, 2, data, sizeof(data), 100);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	b29b      	uxth	r3, r3
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	b299      	uxth	r1, r3
 8001138:	88ba      	ldrh	r2, [r7, #4]
 800113a:	f107 001c 	add.w	r0, r7, #28
 800113e:	2364      	movs	r3, #100	; 0x64
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	2302      	movs	r3, #2
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2302      	movs	r3, #2
 800114e:	f001 fb9f 	bl	8002890 <HAL_I2C_Mem_Read>

	ret = data[1]|(data[0]<<8);
 8001152:	7b7b      	ldrb	r3, [r7, #13]
 8001154:	b21a      	sxth	r2, r3
 8001156:	7b3b      	ldrb	r3, [r7, #12]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	81fb      	strh	r3, [r7, #14]

	return ret;
 8001160:	89fb      	ldrh	r3, [r7, #14]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800116c:	b002      	add	sp, #8
 800116e:	4770      	bx	lr

08001170 <MLX90632_ReadTemp>:
 * @param regAddr Register address
 * @param hi2c Handler of I2C
 * @return float Temperature value
 */
float MLX90632_ReadTemp(uint8_t devAddr, I2C_HandleTypeDef hi2c)
{
 8001170:	b084      	sub	sp, #16
 8001172:	b590      	push	{r4, r7, lr}
 8001174:	b099      	sub	sp, #100	; 0x64
 8001176:	af14      	add	r7, sp, #80	; 0x50
 8001178:	4604      	mov	r4, r0
 800117a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800117e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001182:	4623      	mov	r3, r4
 8001184:	71fb      	strb	r3, [r7, #7]
	float temp = 20.0;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MLX90632_ReadTemp+0x58>)
 8001188:	60fb      	str	r3, [r7, #12]

	uint16_t reg = MLX90632_ReadReg(devAddr, MLX90632_RAM_6, MLX90632_DBG_OFF, hi2c);
 800118a:	79fc      	ldrb	r4, [r7, #7]
 800118c:	4668      	mov	r0, sp
 800118e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001192:	2250      	movs	r2, #80	; 0x50
 8001194:	4619      	mov	r1, r3
 8001196:	f007 fcd5 	bl	8008b44 <memcpy>
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	2200      	movs	r2, #0
 800119e:	f244 0105 	movw	r1, #16389	; 0x4005
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff ffb9 	bl	800111a <MLX90632_ReadReg>
 80011a8:	4603      	mov	r3, r0
 80011aa:	817b      	strh	r3, [r7, #10]

	return (float)reg;
 80011ac:	897b      	ldrh	r3, [r7, #10]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011c2:	b004      	add	sp, #16
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	41a00000 	.word	0x41a00000

080011cc <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 80011cc:	b084      	sub	sp, #16
 80011ce:	b590      	push	{r4, r7, lr}
 80011d0:	b097      	sub	sp, #92	; 0x5c
 80011d2:	af14      	add	r7, sp, #80	; 0x50
 80011d4:	f107 0418 	add.w	r4, r7, #24
 80011d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 80011dc:	f000 fb98 	bl	8001910 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <SSD1306_Init+0x44>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	2254      	movs	r2, #84	; 0x54
 80011ea:	4619      	mov	r1, r3
 80011ec:	f007 fcaa 	bl	8008b44 <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80011f0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80011f4:	2201      	movs	r2, #1
 80011f6:	2178      	movs	r1, #120	; 0x78
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <SSD1306_Init+0x44>)
 80011fa:	f001 fd6f 	bl	8002cdc <HAL_I2C_IsDeviceReady>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 8001204:	2300      	movs	r3, #0
 8001206:	e1ee      	b.n	80015e6 <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001208:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800120c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800120e:	e004      	b.n	800121a <SSD1306_Init+0x4e>
 8001210:	200007cc 	.word	0x200007cc
		p--;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	607b      	str	r3, [r7, #4]
	while(p>0)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f9      	bne.n	8001214 <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001220:	4ce1      	ldr	r4, [pc, #900]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001222:	23ae      	movs	r3, #174	; 0xae
 8001224:	9313      	str	r3, [sp, #76]	; 0x4c
 8001226:	4668      	mov	r0, sp
 8001228:	f104 0308 	add.w	r3, r4, #8
 800122c:	224c      	movs	r2, #76	; 0x4c
 800122e:	4619      	mov	r1, r3
 8001230:	f007 fc88 	bl	8008b44 <memcpy>
 8001234:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001238:	2100      	movs	r1, #0
 800123a:	2078      	movs	r0, #120	; 0x78
 800123c:	f000 fbc6 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001240:	4cd9      	ldr	r4, [pc, #868]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001242:	2320      	movs	r3, #32
 8001244:	9313      	str	r3, [sp, #76]	; 0x4c
 8001246:	4668      	mov	r0, sp
 8001248:	f104 0308 	add.w	r3, r4, #8
 800124c:	224c      	movs	r2, #76	; 0x4c
 800124e:	4619      	mov	r1, r3
 8001250:	f007 fc78 	bl	8008b44 <memcpy>
 8001254:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001258:	2100      	movs	r1, #0
 800125a:	2078      	movs	r0, #120	; 0x78
 800125c:	f000 fbb6 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001260:	4cd1      	ldr	r4, [pc, #836]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001262:	2310      	movs	r3, #16
 8001264:	9313      	str	r3, [sp, #76]	; 0x4c
 8001266:	4668      	mov	r0, sp
 8001268:	f104 0308 	add.w	r3, r4, #8
 800126c:	224c      	movs	r2, #76	; 0x4c
 800126e:	4619      	mov	r1, r3
 8001270:	f007 fc68 	bl	8008b44 <memcpy>
 8001274:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001278:	2100      	movs	r1, #0
 800127a:	2078      	movs	r0, #120	; 0x78
 800127c:	f000 fba6 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001280:	4cc9      	ldr	r4, [pc, #804]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001282:	23b0      	movs	r3, #176	; 0xb0
 8001284:	9313      	str	r3, [sp, #76]	; 0x4c
 8001286:	4668      	mov	r0, sp
 8001288:	f104 0308 	add.w	r3, r4, #8
 800128c:	224c      	movs	r2, #76	; 0x4c
 800128e:	4619      	mov	r1, r3
 8001290:	f007 fc58 	bl	8008b44 <memcpy>
 8001294:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001298:	2100      	movs	r1, #0
 800129a:	2078      	movs	r0, #120	; 0x78
 800129c:	f000 fb96 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80012a0:	4cc1      	ldr	r4, [pc, #772]	; (80015a8 <SSD1306_Init+0x3dc>)
 80012a2:	23c8      	movs	r3, #200	; 0xc8
 80012a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80012a6:	4668      	mov	r0, sp
 80012a8:	f104 0308 	add.w	r3, r4, #8
 80012ac:	224c      	movs	r2, #76	; 0x4c
 80012ae:	4619      	mov	r1, r3
 80012b0:	f007 fc48 	bl	8008b44 <memcpy>
 80012b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80012b8:	2100      	movs	r1, #0
 80012ba:	2078      	movs	r0, #120	; 0x78
 80012bc:	f000 fb86 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80012c0:	4cb9      	ldr	r4, [pc, #740]	; (80015a8 <SSD1306_Init+0x3dc>)
 80012c2:	2300      	movs	r3, #0
 80012c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80012c6:	4668      	mov	r0, sp
 80012c8:	f104 0308 	add.w	r3, r4, #8
 80012cc:	224c      	movs	r2, #76	; 0x4c
 80012ce:	4619      	mov	r1, r3
 80012d0:	f007 fc38 	bl	8008b44 <memcpy>
 80012d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	; 0x78
 80012dc:	f000 fb76 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80012e0:	4cb1      	ldr	r4, [pc, #708]	; (80015a8 <SSD1306_Init+0x3dc>)
 80012e2:	2310      	movs	r3, #16
 80012e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80012e6:	4668      	mov	r0, sp
 80012e8:	f104 0308 	add.w	r3, r4, #8
 80012ec:	224c      	movs	r2, #76	; 0x4c
 80012ee:	4619      	mov	r1, r3
 80012f0:	f007 fc28 	bl	8008b44 <memcpy>
 80012f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80012f8:	2100      	movs	r1, #0
 80012fa:	2078      	movs	r0, #120	; 0x78
 80012fc:	f000 fb66 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001300:	4ca9      	ldr	r4, [pc, #676]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001302:	2340      	movs	r3, #64	; 0x40
 8001304:	9313      	str	r3, [sp, #76]	; 0x4c
 8001306:	4668      	mov	r0, sp
 8001308:	f104 0308 	add.w	r3, r4, #8
 800130c:	224c      	movs	r2, #76	; 0x4c
 800130e:	4619      	mov	r1, r3
 8001310:	f007 fc18 	bl	8008b44 <memcpy>
 8001314:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001318:	2100      	movs	r1, #0
 800131a:	2078      	movs	r0, #120	; 0x78
 800131c:	f000 fb56 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001320:	4ca1      	ldr	r4, [pc, #644]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001322:	2381      	movs	r3, #129	; 0x81
 8001324:	9313      	str	r3, [sp, #76]	; 0x4c
 8001326:	4668      	mov	r0, sp
 8001328:	f104 0308 	add.w	r3, r4, #8
 800132c:	224c      	movs	r2, #76	; 0x4c
 800132e:	4619      	mov	r1, r3
 8001330:	f007 fc08 	bl	8008b44 <memcpy>
 8001334:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001338:	2100      	movs	r1, #0
 800133a:	2078      	movs	r0, #120	; 0x78
 800133c:	f000 fb46 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001340:	4c99      	ldr	r4, [pc, #612]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001342:	23ff      	movs	r3, #255	; 0xff
 8001344:	9313      	str	r3, [sp, #76]	; 0x4c
 8001346:	4668      	mov	r0, sp
 8001348:	f104 0308 	add.w	r3, r4, #8
 800134c:	224c      	movs	r2, #76	; 0x4c
 800134e:	4619      	mov	r1, r3
 8001350:	f007 fbf8 	bl	8008b44 <memcpy>
 8001354:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001358:	2100      	movs	r1, #0
 800135a:	2078      	movs	r0, #120	; 0x78
 800135c:	f000 fb36 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001360:	4c91      	ldr	r4, [pc, #580]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001362:	23a1      	movs	r3, #161	; 0xa1
 8001364:	9313      	str	r3, [sp, #76]	; 0x4c
 8001366:	4668      	mov	r0, sp
 8001368:	f104 0308 	add.w	r3, r4, #8
 800136c:	224c      	movs	r2, #76	; 0x4c
 800136e:	4619      	mov	r1, r3
 8001370:	f007 fbe8 	bl	8008b44 <memcpy>
 8001374:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001378:	2100      	movs	r1, #0
 800137a:	2078      	movs	r0, #120	; 0x78
 800137c:	f000 fb26 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001380:	4c89      	ldr	r4, [pc, #548]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001382:	23a6      	movs	r3, #166	; 0xa6
 8001384:	9313      	str	r3, [sp, #76]	; 0x4c
 8001386:	4668      	mov	r0, sp
 8001388:	f104 0308 	add.w	r3, r4, #8
 800138c:	224c      	movs	r2, #76	; 0x4c
 800138e:	4619      	mov	r1, r3
 8001390:	f007 fbd8 	bl	8008b44 <memcpy>
 8001394:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001398:	2100      	movs	r1, #0
 800139a:	2078      	movs	r0, #120	; 0x78
 800139c:	f000 fb16 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80013a0:	4c81      	ldr	r4, [pc, #516]	; (80015a8 <SSD1306_Init+0x3dc>)
 80013a2:	23a8      	movs	r3, #168	; 0xa8
 80013a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80013a6:	4668      	mov	r0, sp
 80013a8:	f104 0308 	add.w	r3, r4, #8
 80013ac:	224c      	movs	r2, #76	; 0x4c
 80013ae:	4619      	mov	r1, r3
 80013b0:	f007 fbc8 	bl	8008b44 <memcpy>
 80013b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80013b8:	2100      	movs	r1, #0
 80013ba:	2078      	movs	r0, #120	; 0x78
 80013bc:	f000 fb06 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80013c0:	4c79      	ldr	r4, [pc, #484]	; (80015a8 <SSD1306_Init+0x3dc>)
 80013c2:	233f      	movs	r3, #63	; 0x3f
 80013c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80013c6:	4668      	mov	r0, sp
 80013c8:	f104 0308 	add.w	r3, r4, #8
 80013cc:	224c      	movs	r2, #76	; 0x4c
 80013ce:	4619      	mov	r1, r3
 80013d0:	f007 fbb8 	bl	8008b44 <memcpy>
 80013d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80013d8:	2100      	movs	r1, #0
 80013da:	2078      	movs	r0, #120	; 0x78
 80013dc:	f000 faf6 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013e0:	4c71      	ldr	r4, [pc, #452]	; (80015a8 <SSD1306_Init+0x3dc>)
 80013e2:	23a4      	movs	r3, #164	; 0xa4
 80013e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80013e6:	4668      	mov	r0, sp
 80013e8:	f104 0308 	add.w	r3, r4, #8
 80013ec:	224c      	movs	r2, #76	; 0x4c
 80013ee:	4619      	mov	r1, r3
 80013f0:	f007 fba8 	bl	8008b44 <memcpy>
 80013f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80013f8:	2100      	movs	r1, #0
 80013fa:	2078      	movs	r0, #120	; 0x78
 80013fc:	f000 fae6 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001400:	4c69      	ldr	r4, [pc, #420]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001402:	23d3      	movs	r3, #211	; 0xd3
 8001404:	9313      	str	r3, [sp, #76]	; 0x4c
 8001406:	4668      	mov	r0, sp
 8001408:	f104 0308 	add.w	r3, r4, #8
 800140c:	224c      	movs	r2, #76	; 0x4c
 800140e:	4619      	mov	r1, r3
 8001410:	f007 fb98 	bl	8008b44 <memcpy>
 8001414:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001418:	2100      	movs	r1, #0
 800141a:	2078      	movs	r0, #120	; 0x78
 800141c:	f000 fad6 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001420:	4c61      	ldr	r4, [pc, #388]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001422:	2300      	movs	r3, #0
 8001424:	9313      	str	r3, [sp, #76]	; 0x4c
 8001426:	4668      	mov	r0, sp
 8001428:	f104 0308 	add.w	r3, r4, #8
 800142c:	224c      	movs	r2, #76	; 0x4c
 800142e:	4619      	mov	r1, r3
 8001430:	f007 fb88 	bl	8008b44 <memcpy>
 8001434:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001438:	2100      	movs	r1, #0
 800143a:	2078      	movs	r0, #120	; 0x78
 800143c:	f000 fac6 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001440:	4c59      	ldr	r4, [pc, #356]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001442:	23d5      	movs	r3, #213	; 0xd5
 8001444:	9313      	str	r3, [sp, #76]	; 0x4c
 8001446:	4668      	mov	r0, sp
 8001448:	f104 0308 	add.w	r3, r4, #8
 800144c:	224c      	movs	r2, #76	; 0x4c
 800144e:	4619      	mov	r1, r3
 8001450:	f007 fb78 	bl	8008b44 <memcpy>
 8001454:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001458:	2100      	movs	r1, #0
 800145a:	2078      	movs	r0, #120	; 0x78
 800145c:	f000 fab6 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001460:	4c51      	ldr	r4, [pc, #324]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001462:	23f0      	movs	r3, #240	; 0xf0
 8001464:	9313      	str	r3, [sp, #76]	; 0x4c
 8001466:	4668      	mov	r0, sp
 8001468:	f104 0308 	add.w	r3, r4, #8
 800146c:	224c      	movs	r2, #76	; 0x4c
 800146e:	4619      	mov	r1, r3
 8001470:	f007 fb68 	bl	8008b44 <memcpy>
 8001474:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001478:	2100      	movs	r1, #0
 800147a:	2078      	movs	r0, #120	; 0x78
 800147c:	f000 faa6 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001480:	4c49      	ldr	r4, [pc, #292]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001482:	23d9      	movs	r3, #217	; 0xd9
 8001484:	9313      	str	r3, [sp, #76]	; 0x4c
 8001486:	4668      	mov	r0, sp
 8001488:	f104 0308 	add.w	r3, r4, #8
 800148c:	224c      	movs	r2, #76	; 0x4c
 800148e:	4619      	mov	r1, r3
 8001490:	f007 fb58 	bl	8008b44 <memcpy>
 8001494:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001498:	2100      	movs	r1, #0
 800149a:	2078      	movs	r0, #120	; 0x78
 800149c:	f000 fa96 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80014a0:	4c41      	ldr	r4, [pc, #260]	; (80015a8 <SSD1306_Init+0x3dc>)
 80014a2:	2322      	movs	r3, #34	; 0x22
 80014a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80014a6:	4668      	mov	r0, sp
 80014a8:	f104 0308 	add.w	r3, r4, #8
 80014ac:	224c      	movs	r2, #76	; 0x4c
 80014ae:	4619      	mov	r1, r3
 80014b0:	f007 fb48 	bl	8008b44 <memcpy>
 80014b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014b8:	2100      	movs	r1, #0
 80014ba:	2078      	movs	r0, #120	; 0x78
 80014bc:	f000 fa86 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80014c0:	4c39      	ldr	r4, [pc, #228]	; (80015a8 <SSD1306_Init+0x3dc>)
 80014c2:	23da      	movs	r3, #218	; 0xda
 80014c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80014c6:	4668      	mov	r0, sp
 80014c8:	f104 0308 	add.w	r3, r4, #8
 80014cc:	224c      	movs	r2, #76	; 0x4c
 80014ce:	4619      	mov	r1, r3
 80014d0:	f007 fb38 	bl	8008b44 <memcpy>
 80014d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014d8:	2100      	movs	r1, #0
 80014da:	2078      	movs	r0, #120	; 0x78
 80014dc:	f000 fa76 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80014e0:	4c31      	ldr	r4, [pc, #196]	; (80015a8 <SSD1306_Init+0x3dc>)
 80014e2:	2312      	movs	r3, #18
 80014e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80014e6:	4668      	mov	r0, sp
 80014e8:	f104 0308 	add.w	r3, r4, #8
 80014ec:	224c      	movs	r2, #76	; 0x4c
 80014ee:	4619      	mov	r1, r3
 80014f0:	f007 fb28 	bl	8008b44 <memcpy>
 80014f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80014f8:	2100      	movs	r1, #0
 80014fa:	2078      	movs	r0, #120	; 0x78
 80014fc:	f000 fa66 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001500:	4c29      	ldr	r4, [pc, #164]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001502:	23db      	movs	r3, #219	; 0xdb
 8001504:	9313      	str	r3, [sp, #76]	; 0x4c
 8001506:	4668      	mov	r0, sp
 8001508:	f104 0308 	add.w	r3, r4, #8
 800150c:	224c      	movs	r2, #76	; 0x4c
 800150e:	4619      	mov	r1, r3
 8001510:	f007 fb18 	bl	8008b44 <memcpy>
 8001514:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001518:	2100      	movs	r1, #0
 800151a:	2078      	movs	r0, #120	; 0x78
 800151c:	f000 fa56 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001520:	4c21      	ldr	r4, [pc, #132]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001522:	2320      	movs	r3, #32
 8001524:	9313      	str	r3, [sp, #76]	; 0x4c
 8001526:	4668      	mov	r0, sp
 8001528:	f104 0308 	add.w	r3, r4, #8
 800152c:	224c      	movs	r2, #76	; 0x4c
 800152e:	4619      	mov	r1, r3
 8001530:	f007 fb08 	bl	8008b44 <memcpy>
 8001534:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001538:	2100      	movs	r1, #0
 800153a:	2078      	movs	r0, #120	; 0x78
 800153c:	f000 fa46 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001540:	4c19      	ldr	r4, [pc, #100]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001542:	238d      	movs	r3, #141	; 0x8d
 8001544:	9313      	str	r3, [sp, #76]	; 0x4c
 8001546:	4668      	mov	r0, sp
 8001548:	f104 0308 	add.w	r3, r4, #8
 800154c:	224c      	movs	r2, #76	; 0x4c
 800154e:	4619      	mov	r1, r3
 8001550:	f007 faf8 	bl	8008b44 <memcpy>
 8001554:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001558:	2100      	movs	r1, #0
 800155a:	2078      	movs	r0, #120	; 0x78
 800155c:	f000 fa36 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001560:	4c11      	ldr	r4, [pc, #68]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001562:	2314      	movs	r3, #20
 8001564:	9313      	str	r3, [sp, #76]	; 0x4c
 8001566:	4668      	mov	r0, sp
 8001568:	f104 0308 	add.w	r3, r4, #8
 800156c:	224c      	movs	r2, #76	; 0x4c
 800156e:	4619      	mov	r1, r3
 8001570:	f007 fae8 	bl	8008b44 <memcpy>
 8001574:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001578:	2100      	movs	r1, #0
 800157a:	2078      	movs	r0, #120	; 0x78
 800157c:	f000 fa26 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001580:	4c09      	ldr	r4, [pc, #36]	; (80015a8 <SSD1306_Init+0x3dc>)
 8001582:	23af      	movs	r3, #175	; 0xaf
 8001584:	9313      	str	r3, [sp, #76]	; 0x4c
 8001586:	4668      	mov	r0, sp
 8001588:	f104 0308 	add.w	r3, r4, #8
 800158c:	224c      	movs	r2, #76	; 0x4c
 800158e:	4619      	mov	r1, r3
 8001590:	f007 fad8 	bl	8008b44 <memcpy>
 8001594:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001598:	2100      	movs	r1, #0
 800159a:	2078      	movs	r0, #120	; 0x78
 800159c:	f000 fa16 	bl	80019cc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015a0:	4c01      	ldr	r4, [pc, #4]	; (80015a8 <SSD1306_Init+0x3dc>)
 80015a2:	232e      	movs	r3, #46	; 0x2e
 80015a4:	e002      	b.n	80015ac <SSD1306_Init+0x3e0>
 80015a6:	bf00      	nop
 80015a8:	200007cc 	.word	0x200007cc
 80015ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80015ae:	4668      	mov	r0, sp
 80015b0:	f104 0308 	add.w	r3, r4, #8
 80015b4:	224c      	movs	r2, #76	; 0x4c
 80015b6:	4619      	mov	r1, r3
 80015b8:	f007 fac4 	bl	8008b44 <memcpy>
 80015bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80015c0:	2100      	movs	r1, #0
 80015c2:	2078      	movs	r0, #120	; 0x78
 80015c4:	f000 fa02 	bl	80019cc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 f865 	bl	8001698 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80015ce:	f000 f813 	bl	80015f8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <SSD1306_Init+0x428>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <SSD1306_Init+0x428>)
 80015da:	2200      	movs	r2, #0
 80015dc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <SSD1306_Init+0x428>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80015f0:	b004      	add	sp, #16
 80015f2:	4770      	bx	lr
 80015f4:	200005a4 	.word	0x200005a4

080015f8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b097      	sub	sp, #92	; 0x5c
 80015fc:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	e03d      	b.n	8001680 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	3b50      	subs	r3, #80	; 0x50
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4c21      	ldr	r4, [pc, #132]	; (8001690 <SSD1306_UpdateScreen+0x98>)
 800160c:	9313      	str	r3, [sp, #76]	; 0x4c
 800160e:	4668      	mov	r0, sp
 8001610:	f104 0308 	add.w	r3, r4, #8
 8001614:	224c      	movs	r2, #76	; 0x4c
 8001616:	4619      	mov	r1, r3
 8001618:	f007 fa94 	bl	8008b44 <memcpy>
 800161c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001620:	2100      	movs	r1, #0
 8001622:	2078      	movs	r0, #120	; 0x78
 8001624:	f000 f9d2 	bl	80019cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001628:	4c19      	ldr	r4, [pc, #100]	; (8001690 <SSD1306_UpdateScreen+0x98>)
 800162a:	2300      	movs	r3, #0
 800162c:	9313      	str	r3, [sp, #76]	; 0x4c
 800162e:	4668      	mov	r0, sp
 8001630:	f104 0308 	add.w	r3, r4, #8
 8001634:	224c      	movs	r2, #76	; 0x4c
 8001636:	4619      	mov	r1, r3
 8001638:	f007 fa84 	bl	8008b44 <memcpy>
 800163c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001640:	2100      	movs	r1, #0
 8001642:	2078      	movs	r0, #120	; 0x78
 8001644:	f000 f9c2 	bl	80019cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001648:	4c11      	ldr	r4, [pc, #68]	; (8001690 <SSD1306_UpdateScreen+0x98>)
 800164a:	2310      	movs	r3, #16
 800164c:	9313      	str	r3, [sp, #76]	; 0x4c
 800164e:	4668      	mov	r0, sp
 8001650:	f104 0308 	add.w	r3, r4, #8
 8001654:	224c      	movs	r2, #76	; 0x4c
 8001656:	4619      	mov	r1, r3
 8001658:	f007 fa74 	bl	8008b44 <memcpy>
 800165c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001660:	2100      	movs	r1, #0
 8001662:	2078      	movs	r0, #120	; 0x78
 8001664:	f000 f9b2 	bl	80019cc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	4a09      	ldr	r2, [pc, #36]	; (8001694 <SSD1306_UpdateScreen+0x9c>)
 800166e:	441a      	add	r2, r3
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	2140      	movs	r1, #64	; 0x40
 8001674:	2078      	movs	r0, #120	; 0x78
 8001676:	f000 f961 	bl	800193c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	3301      	adds	r3, #1
 800167e:	71fb      	strb	r3, [r7, #7]
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	2b07      	cmp	r3, #7
 8001684:	d9be      	bls.n	8001604 <SSD1306_UpdateScreen+0xc>
	}
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	200007cc 	.word	0x200007cc
 8001694:	200001a4 	.word	0x200001a4

08001698 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <SSD1306_Fill+0x14>
 80016a8:	2300      	movs	r3, #0
 80016aa:	e000      	b.n	80016ae <SSD1306_Fill+0x16>
 80016ac:	23ff      	movs	r3, #255	; 0xff
 80016ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b2:	4619      	mov	r1, r3
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <SSD1306_Fill+0x2c>)
 80016b6:	f007 fa53 	bl	8008b60 <memset>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200001a4 	.word	0x200001a4

080016c8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	80fb      	strh	r3, [r7, #6]
 80016d2:	460b      	mov	r3, r1
 80016d4:	80bb      	strh	r3, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	70fb      	strb	r3, [r7, #3]
	if (
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	2b7f      	cmp	r3, #127	; 0x7f
 80016de:	d848      	bhi.n	8001772 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	2b3f      	cmp	r3, #63	; 0x3f
 80016e4:	d845      	bhi.n	8001772 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <SSD1306_DrawPixel+0xb8>)
 80016e8:	791b      	ldrb	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf0c      	ite	eq
 80016f4:	2301      	moveq	r3, #1
 80016f6:	2300      	movne	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d11a      	bne.n	8001738 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001702:	88fa      	ldrh	r2, [r7, #6]
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	b298      	uxth	r0, r3
 800170a:	4603      	mov	r3, r0
 800170c:	01db      	lsls	r3, r3, #7
 800170e:	4413      	add	r3, r2
 8001710:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <SSD1306_DrawPixel+0xbc>)
 8001712:	5cd3      	ldrb	r3, [r2, r3]
 8001714:	b25a      	sxtb	r2, r3
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	b25b      	sxtb	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b259      	sxtb	r1, r3
 8001728:	88fa      	ldrh	r2, [r7, #6]
 800172a:	4603      	mov	r3, r0
 800172c:	01db      	lsls	r3, r3, #7
 800172e:	4413      	add	r3, r2
 8001730:	b2c9      	uxtb	r1, r1
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <SSD1306_DrawPixel+0xbc>)
 8001734:	54d1      	strb	r1, [r2, r3]
 8001736:	e01d      	b.n	8001774 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001738:	88fa      	ldrh	r2, [r7, #6]
 800173a:	88bb      	ldrh	r3, [r7, #4]
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	b298      	uxth	r0, r3
 8001740:	4603      	mov	r3, r0
 8001742:	01db      	lsls	r3, r3, #7
 8001744:	4413      	add	r3, r2
 8001746:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <SSD1306_DrawPixel+0xbc>)
 8001748:	5cd3      	ldrb	r3, [r2, r3]
 800174a:	b25a      	sxtb	r2, r3
 800174c:	88bb      	ldrh	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	b25b      	sxtb	r3, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	b25b      	sxtb	r3, r3
 800175e:	4013      	ands	r3, r2
 8001760:	b259      	sxtb	r1, r3
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	4603      	mov	r3, r0
 8001766:	01db      	lsls	r3, r3, #7
 8001768:	4413      	add	r3, r2
 800176a:	b2c9      	uxtb	r1, r1
 800176c:	4a05      	ldr	r2, [pc, #20]	; (8001784 <SSD1306_DrawPixel+0xbc>)
 800176e:	54d1      	strb	r1, [r2, r3]
 8001770:	e000      	b.n	8001774 <SSD1306_DrawPixel+0xac>
		return;
 8001772:	bf00      	nop
	}
}
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	200005a4 	.word	0x200005a4
 8001784:	200001a4 	.word	0x200001a4

08001788 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	460a      	mov	r2, r1
 8001792:	80fb      	strh	r3, [r7, #6]
 8001794:	4613      	mov	r3, r2
 8001796:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SSD1306_GotoXY+0x28>)
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <SSD1306_GotoXY+0x28>)
 80017a0:	88bb      	ldrh	r3, [r7, #4]
 80017a2:	8053      	strh	r3, [r2, #2]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	200005a4 	.word	0x200005a4

080017b4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017c4:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <SSD1306_Putc+0xfc>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
	if (
 80017d0:	2b7f      	cmp	r3, #127	; 0x7f
 80017d2:	dc07      	bgt.n	80017e4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <SSD1306_Putc+0xfc>)
 80017d6:	885b      	ldrh	r3, [r3, #2]
 80017d8:	461a      	mov	r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017e0:	2b3f      	cmp	r3, #63	; 0x3f
 80017e2:	dd01      	ble.n	80017e8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e05e      	b.n	80018a6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e04b      	b.n	8001886 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	3b20      	subs	r3, #32
 80017f6:	6839      	ldr	r1, [r7, #0]
 80017f8:	7849      	ldrb	r1, [r1, #1]
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	4619      	mov	r1, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	440b      	add	r3, r1
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	e030      	b.n	8001874 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d010      	beq.n	8001844 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <SSD1306_Putc+0xfc>)
 8001824:	881a      	ldrh	r2, [r3, #0]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b298      	uxth	r0, r3
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <SSD1306_Putc+0xfc>)
 8001830:	885a      	ldrh	r2, [r3, #2]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4413      	add	r3, r2
 8001838:	b29b      	uxth	r3, r3
 800183a:	79ba      	ldrb	r2, [r7, #6]
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff ff43 	bl	80016c8 <SSD1306_DrawPixel>
 8001842:	e014      	b.n	800186e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <SSD1306_Putc+0xfc>)
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4413      	add	r3, r2
 800184e:	b298      	uxth	r0, r3
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <SSD1306_Putc+0xfc>)
 8001852:	885a      	ldrh	r2, [r3, #2]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4413      	add	r3, r2
 800185a:	b299      	uxth	r1, r3
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf0c      	ite	eq
 8001862:	2301      	moveq	r3, #1
 8001864:	2300      	movne	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	f7ff ff2d 	bl	80016c8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	3301      	adds	r3, #1
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4293      	cmp	r3, r2
 800187e:	d3c8      	bcc.n	8001812 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	785b      	ldrb	r3, [r3, #1]
 800188a:	461a      	mov	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4293      	cmp	r3, r2
 8001890:	d3ad      	bcc.n	80017ee <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <SSD1306_Putc+0xfc>)
 8001894:	881a      	ldrh	r2, [r3, #0]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <SSD1306_Putc+0xfc>)
 80018a2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80018a4:	79fb      	ldrb	r3, [r7, #7]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200005a4 	.word	0x200005a4

080018b4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	4613      	mov	r3, r2
 80018c0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018c2:	e012      	b.n	80018ea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	79fa      	ldrb	r2, [r7, #7]
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff71 	bl	80017b4 <SSD1306_Putc>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d002      	beq.n	80018e4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	e008      	b.n	80018f6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1e8      	bne.n	80018c4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	781b      	ldrb	r3, [r3, #0]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff fec8 	bl	8001698 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001908:	f7ff fe76 	bl	80015f8 <SSD1306_UpdateScreen>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <ssd1306_I2C_Init+0x28>)
 8001918:	607b      	str	r3, [r7, #4]
	while(p>0)
 800191a:	e002      	b.n	8001922 <ssd1306_I2C_Init+0x12>
		p--;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f9      	bne.n	800191c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	0003d090 	.word	0x0003d090

0800193c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b0c7      	sub	sp, #284	; 0x11c
 8001940:	af02      	add	r7, sp, #8
 8001942:	4604      	mov	r4, r0
 8001944:	4608      	mov	r0, r1
 8001946:	4639      	mov	r1, r7
 8001948:	600a      	str	r2, [r1, #0]
 800194a:	4619      	mov	r1, r3
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	4622      	mov	r2, r4
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	1dbb      	adds	r3, r7, #6
 8001954:	4602      	mov	r2, r0
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	460a      	mov	r2, r1
 800195c:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	1dba      	adds	r2, r7, #6
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800196e:	e010      	b.n	8001992 <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8001970:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001974:	463a      	mov	r2, r7
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	441a      	add	r2, r3
 800197a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800197e:	3301      	adds	r3, #1
 8001980:	7811      	ldrb	r1, [r2, #0]
 8001982:	f107 020c 	add.w	r2, r7, #12
 8001986:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001988:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800198c:	3301      	adds	r3, #1
 800198e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001992:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001996:	b29b      	uxth	r3, r3
 8001998:	1d3a      	adds	r2, r7, #4
 800199a:	8812      	ldrh	r2, [r2, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8e7      	bhi.n	8001970 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b299      	uxth	r1, r3
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	f107 020c 	add.w	r2, r7, #12
 80019b2:	200a      	movs	r0, #10
 80019b4:	9000      	str	r0, [sp, #0]
 80019b6:	4804      	ldr	r0, [pc, #16]	; (80019c8 <ssd1306_I2C_WriteMulti+0x8c>)
 80019b8:	f000 fe6c 	bl	8002694 <HAL_I2C_Master_Transmit>
}
 80019bc:	bf00      	nop
 80019be:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200007cc 	.word	0x200007cc

080019cc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 80019cc:	b082      	sub	sp, #8
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af02      	add	r7, sp, #8
 80019d4:	f107 0c18 	add.w	ip, r7, #24
 80019d8:	e88c 000c 	stmia.w	ip, {r2, r3}
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	460b      	mov	r3, r1
 80019e2:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 80019e4:	79bb      	ldrb	r3, [r7, #6]
 80019e6:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019e8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80019ec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	b299      	uxth	r1, r3
 80019f2:	f107 020c 	add.w	r2, r7, #12
 80019f6:	230a      	movs	r3, #10
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2302      	movs	r3, #2
 80019fc:	f107 0018 	add.w	r0, r7, #24
 8001a00:	f000 fe48 	bl	8002694 <HAL_I2C_Master_Transmit>
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a0e:	b002      	add	sp, #8
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800

08001a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08e      	sub	sp, #56	; 0x38
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a5b      	ldr	r2, [pc, #364]	; (8001bf0 <HAL_I2C_MspInit+0x18c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12c      	bne.n	8001ae0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a59      	ldr	r2, [pc, #356]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	623b      	str	r3, [r7, #32]
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa2:	23c0      	movs	r3, #192	; 0xc0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa6:	2312      	movs	r3, #18
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aba:	4619      	mov	r1, r3
 8001abc:	484e      	ldr	r0, [pc, #312]	; (8001bf8 <HAL_I2C_MspInit+0x194>)
 8001abe:	f000 fabd 	bl	800203c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a4a      	ldr	r2, [pc, #296]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001acc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ade:	e083      	b.n	8001be8 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a45      	ldr	r2, [pc, #276]	; (8001bfc <HAL_I2C_MspInit+0x198>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d12d      	bne.n	8001b46 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a40      	ldr	r2, [pc, #256]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0c:	2312      	movs	r3, #18
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b20:	4619      	mov	r1, r3
 8001b22:	4835      	ldr	r0, [pc, #212]	; (8001bf8 <HAL_I2C_MspInit+0x194>)
 8001b24:	f000 fa8a 	bl	800203c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	4a30      	ldr	r2, [pc, #192]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001b32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b36:	6413      	str	r3, [r2, #64]	; 0x40
 8001b38:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697b      	ldr	r3, [r7, #20]
}
 8001b44:	e050      	b.n	8001be8 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2d      	ldr	r2, [pc, #180]	; (8001c00 <HAL_I2C_MspInit+0x19c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d14b      	bne.n	8001be8 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8e:	2312      	movs	r3, #18
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4817      	ldr	r0, [pc, #92]	; (8001c04 <HAL_I2C_MspInit+0x1a0>)
 8001ba6:	f000 fa49 	bl	800203c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb0:	2312      	movs	r3, #18
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4810      	ldr	r0, [pc, #64]	; (8001c08 <HAL_I2C_MspInit+0x1a4>)
 8001bc8:	f000 fa38 	bl	800203c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001bd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_I2C_MspInit+0x190>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
}
 8001be8:	bf00      	nop
 8001bea:	3738      	adds	r7, #56	; 0x38
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40005400 	.word	0x40005400
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	40005800 	.word	0x40005800
 8001c00:	40005c00 	.word	0x40005c00
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020000 	.word	0x40020000

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <NMI_Handler+0x4>

08001c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <MemManage_Handler+0x4>

08001c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c58:	f000 f89a 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <OTG_FS_IRQHandler+0x10>)
 8001c66:	f001 fdfe 	bl	8003866 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20001e30 	.word	0x20001e30

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c9c:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c9e:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca4:	e002      	b.n	8001cac <LoopCopyDataInit>

08001ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001caa:	3304      	adds	r3, #4

08001cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb0:	d3f9      	bcc.n	8001ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb4:	4c0b      	ldr	r4, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb8:	e001      	b.n	8001cbe <LoopFillZerobss>

08001cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cbc:	3204      	adds	r2, #4

08001cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc0:	d3fb      	bcc.n	8001cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cc2:	f7ff ffd7 	bl	8001c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f006 ff19 	bl	8008afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7fe ffd5 	bl	8000c78 <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001cdc:	0800995c 	.word	0x0800995c
  ldr r2, =_sbss
 8001ce0:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001ce4:	20002238 	.word	0x20002238

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_Init+0x40>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_Init+0x40>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_Init+0x40>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 f94f 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	200f      	movs	r0, #15
 8001d1c:	f000 f808 	bl	8001d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fe78 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_InitTick+0x54>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x58>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f967 	bl	8002022 <HAL_SYSTICK_Config>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00e      	b.n	8001d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d80a      	bhi.n	8001d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d6c:	f000 f92f 	bl	8001fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <HAL_InitTick+0x5c>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000010 	.word	0x20000010
 8001d8c:	2000000c 	.word	0x2000000c

08001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_IncTick+0x24>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000010 	.word	0x20000010
 8001db4:	2000095c 	.word	0x2000095c

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_GetTick+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	2000095c 	.word	0x2000095c

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff ffee 	bl	8001db8 <HAL_GetTick>
 8001ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001de8:	d005      	beq.n	8001df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_Delay+0x44>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df6:	bf00      	nop
 8001df8:	f7ff ffde 	bl	8001db8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d8f7      	bhi.n	8001df8 <HAL_Delay+0x28>
  {
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000010 	.word	0x20000010

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <__NVIC_EnableIRQ+0x38>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	; (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f98:	f7ff ff8e 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff29 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff3e 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ff8e 	bl	8001f0c <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff5d 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff31 	bl	8001e7c <__NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffa2 	bl	8001f74 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	e16b      	b.n	8002330 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	429a      	cmp	r2, r3
 8002072:	f040 815a 	bne.w	800232a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d005      	beq.n	800208e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208a:	2b02      	cmp	r3, #2
 800208c:	d130      	bne.n	80020f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 0201 	and.w	r2, r3, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d017      	beq.n	800212c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d123      	bne.n	8002180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	08da      	lsrs	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3208      	adds	r2, #8
 800217a:	69b9      	ldr	r1, [r7, #24]
 800217c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0203 	and.w	r2, r3, #3
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80b4 	beq.w	800232a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b60      	ldr	r3, [pc, #384]	; (8002348 <HAL_GPIO_Init+0x30c>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a5f      	ldr	r2, [pc, #380]	; (8002348 <HAL_GPIO_Init+0x30c>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <HAL_GPIO_Init+0x30c>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021de:	4a5b      	ldr	r2, [pc, #364]	; (800234c <HAL_GPIO_Init+0x310>)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3302      	adds	r3, #2
 80021e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	220f      	movs	r2, #15
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a52      	ldr	r2, [pc, #328]	; (8002350 <HAL_GPIO_Init+0x314>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d02b      	beq.n	8002262 <HAL_GPIO_Init+0x226>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a51      	ldr	r2, [pc, #324]	; (8002354 <HAL_GPIO_Init+0x318>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d025      	beq.n	800225e <HAL_GPIO_Init+0x222>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a50      	ldr	r2, [pc, #320]	; (8002358 <HAL_GPIO_Init+0x31c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01f      	beq.n	800225a <HAL_GPIO_Init+0x21e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4f      	ldr	r2, [pc, #316]	; (800235c <HAL_GPIO_Init+0x320>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d019      	beq.n	8002256 <HAL_GPIO_Init+0x21a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4e      	ldr	r2, [pc, #312]	; (8002360 <HAL_GPIO_Init+0x324>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0x216>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4d      	ldr	r2, [pc, #308]	; (8002364 <HAL_GPIO_Init+0x328>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x212>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4c      	ldr	r2, [pc, #304]	; (8002368 <HAL_GPIO_Init+0x32c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x20e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4b      	ldr	r2, [pc, #300]	; (800236c <HAL_GPIO_Init+0x330>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x20a>
 8002242:	2307      	movs	r3, #7
 8002244:	e00e      	b.n	8002264 <HAL_GPIO_Init+0x228>
 8002246:	2308      	movs	r3, #8
 8002248:	e00c      	b.n	8002264 <HAL_GPIO_Init+0x228>
 800224a:	2306      	movs	r3, #6
 800224c:	e00a      	b.n	8002264 <HAL_GPIO_Init+0x228>
 800224e:	2305      	movs	r3, #5
 8002250:	e008      	b.n	8002264 <HAL_GPIO_Init+0x228>
 8002252:	2304      	movs	r3, #4
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x228>
 8002256:	2303      	movs	r3, #3
 8002258:	e004      	b.n	8002264 <HAL_GPIO_Init+0x228>
 800225a:	2302      	movs	r3, #2
 800225c:	e002      	b.n	8002264 <HAL_GPIO_Init+0x228>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_GPIO_Init+0x228>
 8002262:	2300      	movs	r3, #0
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f002 0203 	and.w	r2, r2, #3
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	4093      	lsls	r3, r2
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002274:	4935      	ldr	r1, [pc, #212]	; (800234c <HAL_GPIO_Init+0x310>)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	3302      	adds	r3, #2
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002282:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_GPIO_Init+0x334>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a6:	4a32      	ldr	r2, [pc, #200]	; (8002370 <HAL_GPIO_Init+0x334>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022ac:	4b30      	ldr	r3, [pc, #192]	; (8002370 <HAL_GPIO_Init+0x334>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d0:	4a27      	ldr	r2, [pc, #156]	; (8002370 <HAL_GPIO_Init+0x334>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <HAL_GPIO_Init+0x334>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022fa:	4a1d      	ldr	r2, [pc, #116]	; (8002370 <HAL_GPIO_Init+0x334>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_GPIO_Init+0x334>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002324:	4a12      	ldr	r2, [pc, #72]	; (8002370 <HAL_GPIO_Init+0x334>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	f67f ae90 	bls.w	8002058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3724      	adds	r7, #36	; 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	40013800 	.word	0x40013800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021000 	.word	0x40021000
 8002364:	40021400 	.word	0x40021400
 8002368:	40021800 	.word	0x40021800
 800236c:	40021c00 	.word	0x40021c00
 8002370:	40013c00 	.word	0x40013c00

08002374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	e001      	b.n	8002396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
 80023b0:	4613      	mov	r3, r2
 80023b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b4:	787b      	ldrb	r3, [r7, #1]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023c0:	e003      	b.n	80023ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	041a      	lsls	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	619a      	str	r2, [r3, #24]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023e8:	887a      	ldrh	r2, [r7, #2]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4013      	ands	r3, r2
 80023ee:	041a      	lsls	r2, r3, #16
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	400b      	ands	r3, r1
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	619a      	str	r2, [r3, #24]
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e12b      	b.n	8002676 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff fb16 	bl	8001a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2224      	movs	r2, #36	; 0x24
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800245e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800246e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002470:	f002 fe4c 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8002474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a81      	ldr	r2, [pc, #516]	; (8002680 <HAL_I2C_Init+0x274>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d807      	bhi.n	8002490 <HAL_I2C_Init+0x84>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a80      	ldr	r2, [pc, #512]	; (8002684 <HAL_I2C_Init+0x278>)
 8002484:	4293      	cmp	r3, r2
 8002486:	bf94      	ite	ls
 8002488:	2301      	movls	r3, #1
 800248a:	2300      	movhi	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e006      	b.n	800249e <HAL_I2C_Init+0x92>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a7d      	ldr	r2, [pc, #500]	; (8002688 <HAL_I2C_Init+0x27c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	bf94      	ite	ls
 8002498:	2301      	movls	r3, #1
 800249a:	2300      	movhi	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0e7      	b.n	8002676 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a78      	ldr	r2, [pc, #480]	; (800268c <HAL_I2C_Init+0x280>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0c9b      	lsrs	r3, r3, #18
 80024b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4a6a      	ldr	r2, [pc, #424]	; (8002680 <HAL_I2C_Init+0x274>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d802      	bhi.n	80024e0 <HAL_I2C_Init+0xd4>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	3301      	adds	r3, #1
 80024de:	e009      	b.n	80024f4 <HAL_I2C_Init+0xe8>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	4a69      	ldr	r2, [pc, #420]	; (8002690 <HAL_I2C_Init+0x284>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	3301      	adds	r3, #1
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	430b      	orrs	r3, r1
 80024fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002506:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	495c      	ldr	r1, [pc, #368]	; (8002680 <HAL_I2C_Init+0x274>)
 8002510:	428b      	cmp	r3, r1
 8002512:	d819      	bhi.n	8002548 <HAL_I2C_Init+0x13c>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1e59      	subs	r1, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002522:	1c59      	adds	r1, r3, #1
 8002524:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002528:	400b      	ands	r3, r1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_I2C_Init+0x138>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1e59      	subs	r1, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fbb1 f3f3 	udiv	r3, r1, r3
 800253c:	3301      	adds	r3, #1
 800253e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002542:	e051      	b.n	80025e8 <HAL_I2C_Init+0x1dc>
 8002544:	2304      	movs	r3, #4
 8002546:	e04f      	b.n	80025e8 <HAL_I2C_Init+0x1dc>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d111      	bne.n	8002574 <HAL_I2C_Init+0x168>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	440b      	add	r3, r1
 800255e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e012      	b.n	800259a <HAL_I2C_Init+0x18e>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e58      	subs	r0, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	0099      	lsls	r1, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	fbb0 f3f3 	udiv	r3, r0, r3
 800258a:	3301      	adds	r3, #1
 800258c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Init+0x196>
 800259e:	2301      	movs	r3, #1
 80025a0:	e022      	b.n	80025e8 <HAL_I2C_Init+0x1dc>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10e      	bne.n	80025c8 <HAL_I2C_Init+0x1bc>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e58      	subs	r0, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	440b      	add	r3, r1
 80025b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c6:	e00f      	b.n	80025e8 <HAL_I2C_Init+0x1dc>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1e58      	subs	r0, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	0099      	lsls	r1, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	6809      	ldr	r1, [r1, #0]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6911      	ldr	r1, [r2, #16]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68d2      	ldr	r2, [r2, #12]
 8002622:	4311      	orrs	r1, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	430b      	orrs	r3, r1
 800262a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	000186a0 	.word	0x000186a0
 8002684:	001e847f 	.word	0x001e847f
 8002688:	003d08ff 	.word	0x003d08ff
 800268c:	431bde83 	.word	0x431bde83
 8002690:	10624dd3 	.word	0x10624dd3

08002694 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	461a      	mov	r2, r3
 80026a0:	460b      	mov	r3, r1
 80026a2:	817b      	strh	r3, [r7, #10]
 80026a4:	4613      	mov	r3, r2
 80026a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff fb86 	bl	8001db8 <HAL_GetTick>
 80026ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	f040 80e0 	bne.w	800287c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2319      	movs	r3, #25
 80026c2:	2201      	movs	r2, #1
 80026c4:	4970      	ldr	r1, [pc, #448]	; (8002888 <HAL_I2C_Master_Transmit+0x1f4>)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fda0 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
 80026d4:	e0d3      	b.n	800287e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_I2C_Master_Transmit+0x50>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0cc      	b.n	800287e <HAL_I2C_Master_Transmit+0x1ea>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d007      	beq.n	800270a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0201 	orr.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002718:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2221      	movs	r2, #33	; 0x21
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2210      	movs	r2, #16
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	893a      	ldrh	r2, [r7, #8]
 800273a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a50      	ldr	r2, [pc, #320]	; (800288c <HAL_I2C_Master_Transmit+0x1f8>)
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800274c:	8979      	ldrh	r1, [r7, #10]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	6a3a      	ldr	r2, [r7, #32]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fbf0 	bl	8002f38 <I2C_MasterRequestWrite>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e08d      	b.n	800287e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002778:	e066      	b.n	8002848 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	6a39      	ldr	r1, [r7, #32]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fe1a 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00d      	beq.n	80027a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b04      	cmp	r3, #4
 8002790:	d107      	bne.n	80027a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e06b      	b.n	800287e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d11b      	bne.n	800281c <HAL_I2C_Master_Transmit+0x188>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d017      	beq.n	800281c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	6a39      	ldr	r1, [r7, #32]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fe0a 	bl	800343a <I2C_WaitOnBTFFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2b04      	cmp	r3, #4
 8002832:	d107      	bne.n	8002844 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e01a      	b.n	800287e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	2b00      	cmp	r3, #0
 800284e:	d194      	bne.n	800277a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	e000      	b.n	800287e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800287c:	2302      	movs	r3, #2
  }
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	00100002 	.word	0x00100002
 800288c:	ffff0000 	.word	0xffff0000

08002890 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08c      	sub	sp, #48	; 0x30
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	4608      	mov	r0, r1
 800289a:	4611      	mov	r1, r2
 800289c:	461a      	mov	r2, r3
 800289e:	4603      	mov	r3, r0
 80028a0:	817b      	strh	r3, [r7, #10]
 80028a2:	460b      	mov	r3, r1
 80028a4:	813b      	strh	r3, [r7, #8]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028aa:	f7ff fa85 	bl	8001db8 <HAL_GetTick>
 80028ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	f040 8208 	bne.w	8002cce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2319      	movs	r3, #25
 80028c4:	2201      	movs	r2, #1
 80028c6:	497b      	ldr	r1, [pc, #492]	; (8002ab4 <HAL_I2C_Mem_Read+0x224>)
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fc9f 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80028d4:	2302      	movs	r3, #2
 80028d6:	e1fb      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_Mem_Read+0x56>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e1f4      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x440>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d007      	beq.n	800290c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800291a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2222      	movs	r2, #34	; 0x22
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2240      	movs	r2, #64	; 0x40
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800293c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a5b      	ldr	r2, [pc, #364]	; (8002ab8 <HAL_I2C_Mem_Read+0x228>)
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800294e:	88f8      	ldrh	r0, [r7, #6]
 8002950:	893a      	ldrh	r2, [r7, #8]
 8002952:	8979      	ldrh	r1, [r7, #10]
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	4603      	mov	r3, r0
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fb6c 	bl	800303c <I2C_RequestMemoryRead>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e1b0      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	2b00      	cmp	r3, #0
 8002974:	d113      	bne.n	800299e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	623b      	str	r3, [r7, #32]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	623b      	str	r3, [r7, #32]
 800298a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	e184      	b.n	8002ca8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d11b      	bne.n	80029de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e164      	b.n	8002ca8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d11b      	bne.n	8002a1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	e144      	b.n	8002ca8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a34:	e138      	b.n	8002ca8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	f200 80f1 	bhi.w	8002c22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d123      	bne.n	8002a90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fd35 	bl	80034bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e139      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a8e:	e10b      	b.n	8002ca8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d14e      	bne.n	8002b36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4906      	ldr	r1, [pc, #24]	; (8002abc <HAL_I2C_Mem_Read+0x22c>)
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fbb2 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e10e      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x440>
 8002ab2:	bf00      	nop
 8002ab4:	00100002 	.word	0x00100002
 8002ab8:	ffff0000 	.word	0xffff0000
 8002abc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b34:	e0b8      	b.n	8002ca8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4966      	ldr	r1, [pc, #408]	; (8002cd8 <HAL_I2C_Mem_Read+0x448>)
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fb63 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0bf      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	2200      	movs	r2, #0
 8002b9a:	494f      	ldr	r1, [pc, #316]	; (8002cd8 <HAL_I2C_Mem_Read+0x448>)
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fb35 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e091      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c20:	e042      	b.n	8002ca8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fc48 	bl	80034bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e04c      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d118      	bne.n	8002ca8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f47f aec2 	bne.w	8002a36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3728      	adds	r7, #40	; 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	00010004 	.word	0x00010004

08002cdc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002cec:	f7ff f864 	bl	8001db8 <HAL_GetTick>
 8002cf0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	f040 8111 	bne.w	8002f26 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	2319      	movs	r3, #25
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	4988      	ldr	r1, [pc, #544]	; (8002f30 <HAL_I2C_IsDeviceReady+0x254>)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fa7c 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e104      	b.n	8002f28 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_I2C_IsDeviceReady+0x50>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e0fd      	b.n	8002f28 <HAL_I2C_IsDeviceReady+0x24c>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d007      	beq.n	8002d52 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0201 	orr.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2224      	movs	r2, #36	; 0x24
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4a70      	ldr	r2, [pc, #448]	; (8002f34 <HAL_I2C_IsDeviceReady+0x258>)
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d84:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fa3a 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00d      	beq.n	8002dba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dac:	d103      	bne.n	8002db6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0b6      	b.n	8002f28 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dc8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002dca:	f7fe fff5 	bl	8001db8 <HAL_GetTick>
 8002dce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	bf0c      	ite	eq
 8002dde:	2301      	moveq	r3, #1
 8002de0:	2300      	movne	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dfe:	e025      	b.n	8002e4c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e00:	f7fe ffda 	bl	8001db8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d302      	bcc.n	8002e16 <HAL_I2C_IsDeviceReady+0x13a>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	22a0      	movs	r2, #160	; 0xa0
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2ba0      	cmp	r3, #160	; 0xa0
 8002e56:	d005      	beq.n	8002e64 <HAL_I2C_IsDeviceReady+0x188>
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <HAL_I2C_IsDeviceReady+0x188>
 8002e5e:	7dbb      	ldrb	r3, [r7, #22]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0cd      	beq.n	8002e00 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d129      	bne.n	8002ece <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e88:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	2319      	movs	r3, #25
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4921      	ldr	r1, [pc, #132]	; (8002f30 <HAL_I2C_IsDeviceReady+0x254>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f9ae 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e036      	b.n	8002f28 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e02c      	b.n	8002f28 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002edc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ee6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2319      	movs	r3, #25
 8002eee:	2201      	movs	r2, #1
 8002ef0:	490f      	ldr	r1, [pc, #60]	; (8002f30 <HAL_I2C_IsDeviceReady+0x254>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f98a 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e012      	b.n	8002f28 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	3301      	adds	r3, #1
 8002f06:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	f4ff af32 	bcc.w	8002d76 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	00100002 	.word	0x00100002
 8002f34:	ffff0000 	.word	0xffff0000

08002f38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	460b      	mov	r3, r1
 8002f46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d006      	beq.n	8002f62 <I2C_MasterRequestWrite+0x2a>
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d003      	beq.n	8002f62 <I2C_MasterRequestWrite+0x2a>
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f60:	d108      	bne.n	8002f74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e00b      	b.n	8002f8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	2b12      	cmp	r3, #18
 8002f7a:	d107      	bne.n	8002f8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f937 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00d      	beq.n	8002fc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d103      	bne.n	8002fbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e035      	b.n	800302c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fc8:	d108      	bne.n	8002fdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fca:	897b      	ldrh	r3, [r7, #10]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fd8:	611a      	str	r2, [r3, #16]
 8002fda:	e01b      	b.n	8003014 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fdc:	897b      	ldrh	r3, [r7, #10]
 8002fde:	11db      	asrs	r3, r3, #7
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f003 0306 	and.w	r3, r3, #6
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f063 030f 	orn	r3, r3, #15
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	490e      	ldr	r1, [pc, #56]	; (8003034 <I2C_MasterRequestWrite+0xfc>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f95d 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e010      	b.n	800302c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4907      	ldr	r1, [pc, #28]	; (8003038 <I2C_MasterRequestWrite+0x100>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f94d 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00010008 	.word	0x00010008
 8003038:	00010002 	.word	0x00010002

0800303c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	4608      	mov	r0, r1
 8003046:	4611      	mov	r1, r2
 8003048:	461a      	mov	r2, r3
 800304a:	4603      	mov	r3, r0
 800304c:	817b      	strh	r3, [r7, #10]
 800304e:	460b      	mov	r3, r1
 8003050:	813b      	strh	r3, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003064:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003074:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	2200      	movs	r2, #0
 800307e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f8c2 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309c:	d103      	bne.n	80030a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0aa      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030aa:	897b      	ldrh	r3, [r7, #10]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	4952      	ldr	r1, [pc, #328]	; (8003208 <I2C_RequestMemoryRead+0x1cc>)
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f8fa 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e097      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e8:	6a39      	ldr	r1, [r7, #32]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f964 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d107      	bne.n	800310e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e076      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d105      	bne.n	8003124 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003118:	893b      	ldrh	r3, [r7, #8]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	611a      	str	r2, [r3, #16]
 8003122:	e021      	b.n	8003168 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003124:	893b      	ldrh	r3, [r7, #8]
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	b29b      	uxth	r3, r3
 800312a:	b2da      	uxtb	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003134:	6a39      	ldr	r1, [r7, #32]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f93e 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00d      	beq.n	800315e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b04      	cmp	r3, #4
 8003148:	d107      	bne.n	800315a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003158:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e050      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800315e:	893b      	ldrh	r3, [r7, #8]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316a:	6a39      	ldr	r1, [r7, #32]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f923 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	2b04      	cmp	r3, #4
 800317e:	d107      	bne.n	8003190 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e035      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f82b 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ca:	d103      	bne.n	80031d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e013      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031d8:	897b      	ldrh	r3, [r7, #10]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	6a3a      	ldr	r2, [r7, #32]
 80031ec:	4906      	ldr	r1, [pc, #24]	; (8003208 <I2C_RequestMemoryRead+0x1cc>)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f863 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	00010002 	.word	0x00010002

0800320c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321c:	e025      	b.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003224:	d021      	beq.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003226:	f7fe fdc7 	bl	8001db8 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d302      	bcc.n	800323c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d116      	bne.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e023      	b.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10d      	bne.n	8003290 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	e00c      	b.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d0b6      	beq.n	800321e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032c8:	e051      	b.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d123      	bne.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e046      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003328:	d021      	beq.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe fd45 	bl	8001db8 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d116      	bne.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e020      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10c      	bne.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e00b      	b.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	43da      	mvns	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d18d      	bne.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c4:	e02d      	b.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f8ce 	bl	8003568 <I2C_IsAcknowledgeFailed>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e02d      	b.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033dc:	d021      	beq.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fe fceb 	bl	8001db8 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e007      	b.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d1ca      	bne.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003446:	e02d      	b.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f88d 	bl	8003568 <I2C_IsAcknowledgeFailed>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e02d      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800345e:	d021      	beq.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003460:	f7fe fcaa 	bl	8001db8 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e007      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d1ca      	bne.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034c8:	e042      	b.n	8003550 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d119      	bne.n	800350c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0210 	mvn.w	r2, #16
 80034e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e029      	b.n	8003560 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350c:	f7fe fc54 	bl	8001db8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d116      	bne.n	8003550 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e007      	b.n	8003560 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d1b5      	bne.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357e:	d11b      	bne.n	80035b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003588:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f043 0204 	orr.w	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c8:	b08f      	sub	sp, #60	; 0x3c
 80035ca:	af0a      	add	r7, sp, #40	; 0x28
 80035cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e10f      	b.n	80037f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f004 ff6e 	bl	80084d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2203      	movs	r2, #3
 80035fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fea1 	bl	800535e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	687e      	ldr	r6, [r7, #4]
 8003624:	466d      	mov	r5, sp
 8003626:	f106 0410 	add.w	r4, r6, #16
 800362a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800362c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800362e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003632:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003636:	e885 0003 	stmia.w	r5, {r0, r1}
 800363a:	1d33      	adds	r3, r6, #4
 800363c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800363e:	6838      	ldr	r0, [r7, #0]
 8003640:	f001 fd78 	bl	8005134 <USB_CoreInit>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0d0      	b.n	80037f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f001 fe8f 	bl	8005380 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
 8003666:	e04a      	b.n	80036fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	333d      	adds	r3, #61	; 0x3d
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	333c      	adds	r3, #60	; 0x3c
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	b298      	uxth	r0, r3
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	3342      	adds	r3, #66	; 0x42
 80036a4:	4602      	mov	r2, r0
 80036a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	333f      	adds	r3, #63	; 0x3f
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3344      	adds	r3, #68	; 0x44
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3348      	adds	r3, #72	; 0x48
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3350      	adds	r3, #80	; 0x50
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	3301      	adds	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	d3af      	bcc.n	8003668 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]
 800370c:	e044      	b.n	8003798 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003724:	7bfa      	ldrb	r2, [r7, #15]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800373a:	7bfa      	ldrb	r2, [r7, #15]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	3301      	adds	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d3b5      	bcc.n	800370e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	687e      	ldr	r6, [r7, #4]
 80037aa:	466d      	mov	r5, sp
 80037ac:	f106 0410 	add.w	r4, r6, #16
 80037b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80037c0:	1d33      	adds	r3, r6, #4
 80037c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c4:	6838      	ldr	r0, [r7, #0]
 80037c6:	f001 fe27 	bl	8005418 <USB_DevInit>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e00d      	b.n	80037f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f002 fea3 	bl	800653c <USB_DevDisconnect>

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003800 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_PCD_Start+0x1c>
 8003818:	2302      	movs	r3, #2
 800381a:	e020      	b.n	800385e <HAL_PCD_Start+0x5e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	2b01      	cmp	r3, #1
 800382a:	d109      	bne.n	8003840 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003830:	2b01      	cmp	r3, #1
 8003832:	d005      	beq.n	8003840 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f001 fd79 	bl	800533c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f002 fe53 	bl	80064fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003866:	b590      	push	{r4, r7, lr}
 8003868:	b08d      	sub	sp, #52	; 0x34
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f002 ff11 	bl	80066a4 <USB_GetMode>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 839d 	bne.w	8003fc4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f002 fe75 	bl	800657e <USB_ReadInterrupts>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8393 	beq.w	8003fc2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f002 fe6c 	bl	800657e <USB_ReadInterrupts>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d107      	bne.n	80038c0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f002 0202 	and.w	r2, r2, #2
 80038be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f002 fe5a 	bl	800657e <USB_ReadInterrupts>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d161      	bne.n	8003998 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0210 	bic.w	r2, r2, #16
 80038e2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f003 020f 	and.w	r2, r3, #15
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	3304      	adds	r3, #4
 8003902:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	0c5b      	lsrs	r3, r3, #17
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	2b02      	cmp	r3, #2
 800390e:	d124      	bne.n	800395a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d035      	beq.n	8003988 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800392a:	b29b      	uxth	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	6a38      	ldr	r0, [r7, #32]
 8003930:	f002 fc91 	bl	8006256 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003940:	441a      	add	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003952:	441a      	add	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	619a      	str	r2, [r3, #24]
 8003958:	e016      	b.n	8003988 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	0c5b      	lsrs	r3, r3, #17
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	2b06      	cmp	r3, #6
 8003964:	d110      	bne.n	8003988 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800396c:	2208      	movs	r2, #8
 800396e:	4619      	mov	r1, r3
 8003970:	6a38      	ldr	r0, [r7, #32]
 8003972:	f002 fc70 	bl	8006256 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003982:	441a      	add	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0210 	orr.w	r2, r2, #16
 8003996:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f002 fdee 	bl	800657e <USB_ReadInterrupts>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039ac:	d16e      	bne.n	8003a8c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f002 fdf4 	bl	80065a4 <USB_ReadDevAllOutEpInterrupt>
 80039bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80039be:	e062      	b.n	8003a86 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d057      	beq.n	8003a7a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f002 fe19 	bl	800660c <USB_ReadDevOutEPInterrupt>
 80039da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f2:	461a      	mov	r2, r3
 80039f4:	2301      	movs	r3, #1
 80039f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fdb0 	bl	8004560 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00c      	beq.n	8003a24 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a16:	461a      	mov	r2, r3
 8003a18:	2308      	movs	r3, #8
 8003a1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 feaa 	bl	8004778 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	461a      	mov	r2, r3
 8003a58:	2320      	movs	r3, #32
 8003a5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a72:	461a      	mov	r2, r3
 8003a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d199      	bne.n	80039c0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f002 fd74 	bl	800657e <USB_ReadInterrupts>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa0:	f040 80c0 	bne.w	8003c24 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f002 fd95 	bl	80065d8 <USB_ReadDevAllInEpInterrupt>
 8003aae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003ab4:	e0b2      	b.n	8003c1c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80a7 	beq.w	8003c10 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f002 fdbb 	bl	8006648 <USB_ReadDevInEPInterrupt>
 8003ad2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d057      	beq.n	8003b8e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69f9      	ldr	r1, [r7, #28]
 8003afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003afe:	4013      	ands	r3, r2
 8003b00:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2301      	movs	r3, #1
 8003b12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d132      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	3348      	adds	r3, #72	; 0x48
 8003b2c:	6819      	ldr	r1, [r3, #0]
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4403      	add	r3, r0
 8003b3c:	3344      	adds	r3, #68	; 0x44
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4419      	add	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4403      	add	r3, r0
 8003b50:	3348      	adds	r3, #72	; 0x48
 8003b52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d113      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x31c>
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	3350      	adds	r3, #80	; 0x50
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d108      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	f002 fdc3 	bl	8006708 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	4619      	mov	r1, r3
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f004 fd24 	bl	80085d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2340      	movs	r3, #64	; 0x40
 8003be0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fc1b 	bl	8004446 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	3301      	adds	r3, #1
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f47f af49 	bne.w	8003ab6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f002 fca8 	bl	800657e <USB_ReadInterrupts>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c38:	d122      	bne.n	8003c80 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d108      	bne.n	8003c6a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c60:	2100      	movs	r1, #0
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fe26 	bl	80048b4 <HAL_PCDEx_LPM_Callback>
 8003c68:	e002      	b.n	8003c70 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f004 fd2a 	bl	80086c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f002 fc7a 	bl	800657e <USB_ReadInterrupts>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c94:	d112      	bne.n	8003cbc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d102      	bne.n	8003cac <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f004 fce6 	bl	8008678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f002 fc5c 	bl	800657e <USB_ReadInterrupts>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	f040 80c7 	bne.w	8003e62 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2110      	movs	r1, #16
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f001 fcf6 	bl	80056e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf8:	e056      	b.n	8003da8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	461a      	mov	r2, r3
 8003d08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1e:	0151      	lsls	r1, r2, #5
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	440a      	add	r2, r1
 8003d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d2c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d72:	0151      	lsls	r1, r2, #5
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	440a      	add	r2, r1
 8003d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d92:	0151      	lsls	r1, r2, #5
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	440a      	add	r2, r1
 8003d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003da0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	3301      	adds	r3, #1
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d3a3      	bcc.n	8003cfa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003dc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dde:	f043 030b 	orr.w	r3, r3, #11
 8003de2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df4:	f043 030b 	orr.w	r3, r3, #11
 8003df8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfa:	e015      	b.n	8003e28 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e0e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e22:	f043 030b 	orr.w	r3, r3, #11
 8003e26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f002 fc5b 	bl	8006708 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f002 fb89 	bl	800657e <USB_ReadInterrupts>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e76:	d124      	bne.n	8003ec2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f002 fc1f 	bl	80066c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f001 fc87 	bl	800579a <USB_GetDevSpeed>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	461a      	mov	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681c      	ldr	r4, [r3, #0]
 8003e98:	f001 f92c 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8003e9c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f001 f9a6 	bl	80051f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f004 fbba 	bl	8008626 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f002 fb59 	bl	800657e <USB_ReadInterrupts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d10a      	bne.n	8003eec <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f004 fb97 	bl	800860a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f002 0208 	and.w	r2, r2, #8
 8003eea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f002 fb44 	bl	800657e <USB_ReadInterrupts>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f00:	d10f      	bne.n	8003f22 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f004 fbf9 	bl	8008704 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f002 fb29 	bl	800657e <USB_ReadInterrupts>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f36:	d10f      	bne.n	8003f58 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f004 fbcc 	bl	80086e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f002 fb0e 	bl	800657e <USB_ReadInterrupts>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6c:	d10a      	bne.n	8003f84 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f004 fbda 	bl	8008728 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695a      	ldr	r2, [r3, #20]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f002 faf8 	bl	800657e <USB_ReadInterrupts>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d115      	bne.n	8003fc4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f004 fbca 	bl	8008744 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	e000      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003fc2:	bf00      	nop
    }
  }
}
 8003fc4:	3734      	adds	r7, #52	; 0x34
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd90      	pop	{r4, r7, pc}

08003fca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_PCD_SetAddress+0x1a>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e013      	b.n	800400c <HAL_PCD_SetAddress+0x42>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f002 fa56 	bl	80064ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	4608      	mov	r0, r1
 800401e:	4611      	mov	r1, r2
 8004020:	461a      	mov	r2, r3
 8004022:	4603      	mov	r3, r0
 8004024:	70fb      	strb	r3, [r7, #3]
 8004026:	460b      	mov	r3, r1
 8004028:	803b      	strh	r3, [r7, #0]
 800402a:	4613      	mov	r3, r2
 800402c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004036:	2b00      	cmp	r3, #0
 8004038:	da0f      	bge.n	800405a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	f003 020f 	and.w	r2, r3, #15
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	3338      	adds	r3, #56	; 0x38
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	3304      	adds	r3, #4
 8004050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	705a      	strb	r2, [r3, #1]
 8004058:	e00f      	b.n	800407a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 020f 	and.w	r2, r3, #15
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004086:	883a      	ldrh	r2, [r7, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	78ba      	ldrb	r2, [r7, #2]
 8004090:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	785b      	ldrb	r3, [r3, #1]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d004      	beq.n	80040a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040a4:	78bb      	ldrb	r3, [r7, #2]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d102      	bne.n	80040b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_PCD_EP_Open+0xaa>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e00e      	b.n	80040dc <HAL_PCD_EP_Open+0xc8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68f9      	ldr	r1, [r7, #12]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f001 fb89 	bl	80057e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80040da:	7afb      	ldrb	r3, [r7, #11]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	da0f      	bge.n	8004118 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	f003 020f 	and.w	r2, r3, #15
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	3338      	adds	r3, #56	; 0x38
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	3304      	adds	r3, #4
 800410e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	705a      	strb	r2, [r3, #1]
 8004116:	e00f      	b.n	8004138 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 020f 	and.w	r2, r3, #15
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	3304      	adds	r3, #4
 8004130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_PCD_EP_Close+0x6e>
 800414e:	2302      	movs	r3, #2
 8004150:	e00e      	b.n	8004170 <HAL_PCD_EP_Close+0x8c>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	4618      	mov	r0, r3
 8004162:	f001 fbc7 	bl	80058f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	607a      	str	r2, [r7, #4]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	460b      	mov	r3, r1
 8004186:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004188:	7afb      	ldrb	r3, [r7, #11]
 800418a:	f003 020f 	and.w	r2, r3, #15
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	3304      	adds	r3, #4
 80041a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2200      	movs	r2, #0
 80041b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ba:	7afb      	ldrb	r3, [r7, #11]
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d102      	bne.n	80041d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041d4:	7afb      	ldrb	r3, [r7, #11]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	6979      	ldr	r1, [r7, #20]
 80041ec:	f001 fea2 	bl	8005f34 <USB_EP0StartXfer>
 80041f0:	e008      	b.n	8004204 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	6979      	ldr	r1, [r7, #20]
 8004200:	f001 fc54 	bl	8005aac <USB_EPStartXfer>
  }

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004230:	681b      	ldr	r3, [r3, #0]
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	460b      	mov	r3, r1
 800424c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800424e:	7afb      	ldrb	r3, [r7, #11]
 8004250:	f003 020f 	and.w	r2, r3, #15
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	3338      	adds	r3, #56	; 0x38
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	3304      	adds	r3, #4
 8004264:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2200      	movs	r2, #0
 8004276:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2201      	movs	r2, #1
 800427c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800427e:	7afb      	ldrb	r3, [r7, #11]
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	b2da      	uxtb	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d102      	bne.n	8004298 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004298:	7afb      	ldrb	r3, [r7, #11]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	f001 fe40 	bl	8005f34 <USB_EP0StartXfer>
 80042b4:	e008      	b.n	80042c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	6979      	ldr	r1, [r7, #20]
 80042c4:	f001 fbf2 	bl	8005aac <USB_EPStartXfer>
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	f003 020f 	and.w	r2, r3, #15
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d901      	bls.n	80042f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e050      	b.n	8004392 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	da0f      	bge.n	8004318 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	f003 020f 	and.w	r2, r3, #15
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	3338      	adds	r3, #56	; 0x38
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	4413      	add	r3, r2
 800430c:	3304      	adds	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	705a      	strb	r2, [r3, #1]
 8004316:	e00d      	b.n	8004334 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4413      	add	r3, r2
 800432a:	3304      	adds	r3, #4
 800432c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	b2da      	uxtb	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_PCD_EP_SetStall+0x82>
 8004350:	2302      	movs	r3, #2
 8004352:	e01e      	b.n	8004392 <HAL_PCD_EP_SetStall+0xc0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68f9      	ldr	r1, [r7, #12]
 8004362:	4618      	mov	r0, r3
 8004364:	f001 ffcf 	bl	8006306 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	b2d9      	uxtb	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004382:	461a      	mov	r2, r3
 8004384:	f002 f9c0 	bl	8006708 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	f003 020f 	and.w	r2, r3, #15
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d901      	bls.n	80043b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e042      	b.n	800443e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	da0f      	bge.n	80043e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	3338      	adds	r3, #56	; 0x38
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	4413      	add	r3, r2
 80043d4:	3304      	adds	r3, #4
 80043d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	705a      	strb	r2, [r3, #1]
 80043de:	e00f      	b.n	8004400 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	4413      	add	r3, r2
 80043f6:	3304      	adds	r3, #4
 80043f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	b2da      	uxtb	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_PCD_EP_ClrStall+0x86>
 800441c:	2302      	movs	r3, #2
 800441e:	e00e      	b.n	800443e <HAL_PCD_EP_ClrStall+0xa4>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68f9      	ldr	r1, [r7, #12]
 800442e:	4618      	mov	r0, r3
 8004430:	f001 ffd7 	bl	80063e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b08a      	sub	sp, #40	; 0x28
 800444a:	af02      	add	r7, sp, #8
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	3338      	adds	r3, #56	; 0x38
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4413      	add	r3, r2
 800446a:	3304      	adds	r3, #4
 800446c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	429a      	cmp	r2, r3
 8004478:	d901      	bls.n	800447e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e06c      	b.n	8004558 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	429a      	cmp	r2, r3
 8004492:	d902      	bls.n	800449a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3303      	adds	r3, #3
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044a2:	e02b      	b.n	80044fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d902      	bls.n	80044c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3303      	adds	r3, #3
 80044c4:	089b      	lsrs	r3, r3, #2
 80044c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68d9      	ldr	r1, [r3, #12]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	4603      	mov	r3, r0
 80044de:	6978      	ldr	r0, [r7, #20]
 80044e0:	f001 fe7b 	bl	80061da <USB_WritePacket>

    ep->xfer_buff  += len;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	699a      	ldr	r2, [r3, #24]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	441a      	add	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	b29b      	uxth	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	429a      	cmp	r2, r3
 8004510:	d809      	bhi.n	8004526 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800451a:	429a      	cmp	r2, r3
 800451c:	d203      	bcs.n	8004526 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1be      	bne.n	80044a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	429a      	cmp	r2, r3
 8004530:	d811      	bhi.n	8004556 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	2201      	movs	r2, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	43db      	mvns	r3, r3
 800454c:	6939      	ldr	r1, [r7, #16]
 800454e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004552:	4013      	ands	r3, r2
 8004554:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	333c      	adds	r3, #60	; 0x3c
 8004578:	3304      	adds	r3, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b01      	cmp	r3, #1
 8004594:	f040 80a0 	bne.w	80046d8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d015      	beq.n	80045ce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4a72      	ldr	r2, [pc, #456]	; (8004770 <PCD_EP_OutXfrComplete_int+0x210>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	f240 80dd 	bls.w	8004766 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80d7 	beq.w	8004766 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	461a      	mov	r2, r3
 80045c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ca:	6093      	str	r3, [r2, #8]
 80045cc:	e0cb      	b.n	8004766 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	461a      	mov	r2, r3
 80045e6:	2320      	movs	r3, #32
 80045e8:	6093      	str	r3, [r2, #8]
 80045ea:	e0bc      	b.n	8004766 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f040 80b7 	bne.w	8004766 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a5d      	ldr	r2, [pc, #372]	; (8004770 <PCD_EP_OutXfrComplete_int+0x210>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d90f      	bls.n	8004620 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004616:	461a      	mov	r2, r3
 8004618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461c:	6093      	str	r3, [r2, #8]
 800461e:	e0a2      	b.n	8004766 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004632:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	0159      	lsls	r1, r3, #5
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	440b      	add	r3, r1
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004646:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4403      	add	r3, r0
 8004656:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800465a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4403      	add	r3, r0
 800467e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4419      	add	r1, r3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4403      	add	r3, r0
 8004694:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004698:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d114      	bne.n	80046ca <PCD_EP_OutXfrComplete_int+0x16a>
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d108      	bne.n	80046ca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046c2:	461a      	mov	r2, r3
 80046c4:	2101      	movs	r1, #1
 80046c6:	f002 f81f 	bl	8006708 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f003 ff65 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
 80046d6:	e046      	b.n	8004766 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4a26      	ldr	r2, [pc, #152]	; (8004774 <PCD_EP_OutXfrComplete_int+0x214>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d124      	bne.n	800472a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f6:	461a      	mov	r2, r3
 80046f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fc:	6093      	str	r3, [r2, #8]
 80046fe:	e032      	b.n	8004766 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004716:	461a      	mov	r2, r3
 8004718:	2320      	movs	r3, #32
 800471a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f003 ff3c 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
 8004728:	e01d      	b.n	8004766 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d114      	bne.n	800475a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d108      	bne.n	800475a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004752:	461a      	mov	r2, r3
 8004754:	2100      	movs	r1, #0
 8004756:	f001 ffd7 	bl	8006708 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f003 ff1d 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	4f54300a 	.word	0x4f54300a
 8004774:	4f54310a 	.word	0x4f54310a

08004778 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	333c      	adds	r3, #60	; 0x3c
 8004790:	3304      	adds	r3, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a15      	ldr	r2, [pc, #84]	; (8004800 <PCD_EP_OutSetupPacket_int+0x88>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d90e      	bls.n	80047cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	461a      	mov	r2, r3
 80047c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f003 fed5 	bl	800857c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <PCD_EP_OutSetupPacket_int+0x88>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d90c      	bls.n	80047f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d108      	bne.n	80047f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047ec:	461a      	mov	r2, r3
 80047ee:	2101      	movs	r1, #1
 80047f0:	f001 ff8a 	bl	8006708 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	4f54300a 	.word	0x4f54300a

08004804 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
 8004810:	4613      	mov	r3, r2
 8004812:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d107      	bne.n	8004832 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004822:	883b      	ldrh	r3, [r7, #0]
 8004824:	0419      	lsls	r1, r3, #16
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	430a      	orrs	r2, r1
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
 8004830:	e028      	b.n	8004884 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	0c1b      	lsrs	r3, r3, #16
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	4413      	add	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004840:	2300      	movs	r3, #0
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	e00d      	b.n	8004862 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	3340      	adds	r3, #64	; 0x40
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4413      	add	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	3301      	adds	r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
 8004862:	7bfa      	ldrb	r2, [r7, #15]
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	3b01      	subs	r3, #1
 8004868:	429a      	cmp	r2, r3
 800486a:	d3ec      	bcc.n	8004846 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800486c:	883b      	ldrh	r3, [r7, #0]
 800486e:	0418      	lsls	r0, r3, #16
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6819      	ldr	r1, [r3, #0]
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	3b01      	subs	r3, #1
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	4302      	orrs	r2, r0
 800487c:	3340      	adds	r3, #64	; 0x40
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	887a      	ldrh	r2, [r7, #2]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e264      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d075      	beq.n	80049d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ea:	4ba3      	ldr	r3, [pc, #652]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d00c      	beq.n	8004910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f6:	4ba0      	ldr	r3, [pc, #640]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d112      	bne.n	8004928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004902:	4b9d      	ldr	r3, [pc, #628]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490e:	d10b      	bne.n	8004928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004910:	4b99      	ldr	r3, [pc, #612]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d05b      	beq.n	80049d4 <HAL_RCC_OscConfig+0x108>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d157      	bne.n	80049d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e23f      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004930:	d106      	bne.n	8004940 <HAL_RCC_OscConfig+0x74>
 8004932:	4b91      	ldr	r3, [pc, #580]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a90      	ldr	r2, [pc, #576]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e01d      	b.n	800497c <HAL_RCC_OscConfig+0xb0>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004948:	d10c      	bne.n	8004964 <HAL_RCC_OscConfig+0x98>
 800494a:	4b8b      	ldr	r3, [pc, #556]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a8a      	ldr	r2, [pc, #552]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	4b88      	ldr	r3, [pc, #544]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a87      	ldr	r2, [pc, #540]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e00b      	b.n	800497c <HAL_RCC_OscConfig+0xb0>
 8004964:	4b84      	ldr	r3, [pc, #528]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a83      	ldr	r2, [pc, #524]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 800496a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b81      	ldr	r3, [pc, #516]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a80      	ldr	r2, [pc, #512]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800497a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004984:	f7fd fa18 	bl	8001db8 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800498c:	f7fd fa14 	bl	8001db8 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	; 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e204      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499e:	4b76      	ldr	r3, [pc, #472]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0xc0>
 80049aa:	e014      	b.n	80049d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fd fa04 	bl	8001db8 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b4:	f7fd fa00 	bl	8001db8 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	; 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e1f0      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c6:	4b6c      	ldr	r3, [pc, #432]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0xe8>
 80049d2:	e000      	b.n	80049d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d063      	beq.n	8004aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049e2:	4b65      	ldr	r3, [pc, #404]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	4b62      	ldr	r3, [pc, #392]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d11c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049fa:	4b5f      	ldr	r3, [pc, #380]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d116      	bne.n	8004a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a06:	4b5c      	ldr	r3, [pc, #368]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_RCC_OscConfig+0x152>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d001      	beq.n	8004a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e1c4      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1e:	4b56      	ldr	r3, [pc, #344]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4952      	ldr	r1, [pc, #328]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a32:	e03a      	b.n	8004aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a3c:	4b4f      	ldr	r3, [pc, #316]	; (8004b7c <HAL_RCC_OscConfig+0x2b0>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fd f9b9 	bl	8001db8 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4a:	f7fd f9b5 	bl	8001db8 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e1a5      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5c:	4b46      	ldr	r3, [pc, #280]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a68:	4b43      	ldr	r3, [pc, #268]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4940      	ldr	r1, [pc, #256]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	600b      	str	r3, [r1, #0]
 8004a7c:	e015      	b.n	8004aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7e:	4b3f      	ldr	r3, [pc, #252]	; (8004b7c <HAL_RCC_OscConfig+0x2b0>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fd f998 	bl	8001db8 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8c:	f7fd f994 	bl	8001db8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e184      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9e:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d030      	beq.n	8004b18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d016      	beq.n	8004aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004abe:	4b30      	ldr	r3, [pc, #192]	; (8004b80 <HAL_RCC_OscConfig+0x2b4>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fd f978 	bl	8001db8 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004acc:	f7fd f974 	bl	8001db8 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e164      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ade:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x200>
 8004aea:	e015      	b.n	8004b18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aec:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <HAL_RCC_OscConfig+0x2b4>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af2:	f7fd f961 	bl	8001db8 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afa:	f7fd f95d 	bl	8001db8 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e14d      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b0c:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f0      	bne.n	8004afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80a0 	beq.w	8004c66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b26:	2300      	movs	r3, #0
 8004b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b2a:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10f      	bne.n	8004b56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	4a0e      	ldr	r2, [pc, #56]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b44:	6413      	str	r3, [r2, #64]	; 0x40
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b52:	2301      	movs	r3, #1
 8004b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCC_OscConfig+0x2b8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d121      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b62:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <HAL_RCC_OscConfig+0x2b8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a07      	ldr	r2, [pc, #28]	; (8004b84 <HAL_RCC_OscConfig+0x2b8>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6e:	f7fd f923 	bl	8001db8 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b74:	e011      	b.n	8004b9a <HAL_RCC_OscConfig+0x2ce>
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	42470000 	.word	0x42470000
 8004b80:	42470e80 	.word	0x42470e80
 8004b84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b88:	f7fd f916 	bl	8001db8 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e106      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9a:	4b85      	ldr	r3, [pc, #532]	; (8004db0 <HAL_RCC_OscConfig+0x4e4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d106      	bne.n	8004bbc <HAL_RCC_OscConfig+0x2f0>
 8004bae:	4b81      	ldr	r3, [pc, #516]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	4a80      	ldr	r2, [pc, #512]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bba:	e01c      	b.n	8004bf6 <HAL_RCC_OscConfig+0x32a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b05      	cmp	r3, #5
 8004bc2:	d10c      	bne.n	8004bde <HAL_RCC_OscConfig+0x312>
 8004bc4:	4b7b      	ldr	r3, [pc, #492]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	4a7a      	ldr	r2, [pc, #488]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004bca:	f043 0304 	orr.w	r3, r3, #4
 8004bce:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd0:	4b78      	ldr	r3, [pc, #480]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd4:	4a77      	ldr	r2, [pc, #476]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	6713      	str	r3, [r2, #112]	; 0x70
 8004bdc:	e00b      	b.n	8004bf6 <HAL_RCC_OscConfig+0x32a>
 8004bde:	4b75      	ldr	r3, [pc, #468]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	4a74      	ldr	r2, [pc, #464]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004be4:	f023 0301 	bic.w	r3, r3, #1
 8004be8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bea:	4b72      	ldr	r3, [pc, #456]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	4a71      	ldr	r2, [pc, #452]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004bf0:	f023 0304 	bic.w	r3, r3, #4
 8004bf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d015      	beq.n	8004c2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfe:	f7fd f8db 	bl	8001db8 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c04:	e00a      	b.n	8004c1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c06:	f7fd f8d7 	bl	8001db8 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e0c5      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1c:	4b65      	ldr	r3, [pc, #404]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0ee      	beq.n	8004c06 <HAL_RCC_OscConfig+0x33a>
 8004c28:	e014      	b.n	8004c54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fd f8c5 	bl	8001db8 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c32:	f7fd f8c1 	bl	8001db8 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e0af      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c48:	4b5a      	ldr	r3, [pc, #360]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ee      	bne.n	8004c32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d105      	bne.n	8004c66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5a:	4b56      	ldr	r3, [pc, #344]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	4a55      	ldr	r2, [pc, #340]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 809b 	beq.w	8004da6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c70:	4b50      	ldr	r3, [pc, #320]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 030c 	and.w	r3, r3, #12
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d05c      	beq.n	8004d36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d141      	bne.n	8004d08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c84:	4b4c      	ldr	r3, [pc, #304]	; (8004db8 <HAL_RCC_OscConfig+0x4ec>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fd f895 	bl	8001db8 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c92:	f7fd f891 	bl	8001db8 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e081      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca4:	4b43      	ldr	r3, [pc, #268]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	019b      	lsls	r3, r3, #6
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	041b      	lsls	r3, r3, #16
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	061b      	lsls	r3, r3, #24
 8004cd4:	4937      	ldr	r1, [pc, #220]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cda:	4b37      	ldr	r3, [pc, #220]	; (8004db8 <HAL_RCC_OscConfig+0x4ec>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce0:	f7fd f86a 	bl	8001db8 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce8:	f7fd f866 	bl	8001db8 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e056      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfa:	4b2e      	ldr	r3, [pc, #184]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x41c>
 8004d06:	e04e      	b.n	8004da6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d08:	4b2b      	ldr	r3, [pc, #172]	; (8004db8 <HAL_RCC_OscConfig+0x4ec>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0e:	f7fd f853 	bl	8001db8 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d16:	f7fd f84f 	bl	8001db8 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e03f      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d28:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f0      	bne.n	8004d16 <HAL_RCC_OscConfig+0x44a>
 8004d34:	e037      	b.n	8004da6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e032      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d42:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <HAL_RCC_OscConfig+0x4e8>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d028      	beq.n	8004da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d121      	bne.n	8004da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d11a      	bne.n	8004da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d72:	4013      	ands	r3, r2
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d111      	bne.n	8004da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40007000 	.word	0x40007000
 8004db4:	40023800 	.word	0x40023800
 8004db8:	42470060 	.word	0x42470060

08004dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0cc      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d90c      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b65      	ldr	r3, [pc, #404]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b63      	ldr	r3, [pc, #396]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0b8      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d020      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e10:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a58      	ldr	r2, [pc, #352]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e28:	4b53      	ldr	r3, [pc, #332]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4a52      	ldr	r2, [pc, #328]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e34:	4b50      	ldr	r3, [pc, #320]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	494d      	ldr	r1, [pc, #308]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d044      	beq.n	8004edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d119      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e07f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d003      	beq.n	8004e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7a:	4b3f      	ldr	r3, [pc, #252]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e06f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8a:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e067      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e9a:	4b37      	ldr	r3, [pc, #220]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f023 0203 	bic.w	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4934      	ldr	r1, [pc, #208]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eac:	f7fc ff84 	bl	8001db8 <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb4:	f7fc ff80 	bl	8001db8 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e04f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	4b2b      	ldr	r3, [pc, #172]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 020c 	and.w	r2, r3, #12
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d1eb      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d20c      	bcs.n	8004f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e032      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4916      	ldr	r1, [pc, #88]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	490e      	ldr	r1, [pc, #56]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f42:	f000 f821 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	490a      	ldr	r1, [pc, #40]	; (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004f54:	5ccb      	ldrb	r3, [r1, r3]
 8004f56:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <HAL_RCC_ClockConfig+0x1c8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fc fee4 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40023c00 	.word	0x40023c00
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	08009934 	.word	0x08009934
 8004f80:	20000008 	.word	0x20000008
 8004f84:	2000000c 	.word	0x2000000c

08004f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f88:	b5b0      	push	{r4, r5, r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f8e:	2100      	movs	r1, #0
 8004f90:	6079      	str	r1, [r7, #4]
 8004f92:	2100      	movs	r1, #0
 8004f94:	60f9      	str	r1, [r7, #12]
 8004f96:	2100      	movs	r1, #0
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f9e:	4952      	ldr	r1, [pc, #328]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004fa0:	6889      	ldr	r1, [r1, #8]
 8004fa2:	f001 010c 	and.w	r1, r1, #12
 8004fa6:	2908      	cmp	r1, #8
 8004fa8:	d00d      	beq.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x3e>
 8004faa:	2908      	cmp	r1, #8
 8004fac:	f200 8094 	bhi.w	80050d8 <HAL_RCC_GetSysClockFreq+0x150>
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_RCC_GetSysClockFreq+0x32>
 8004fb4:	2904      	cmp	r1, #4
 8004fb6:	d003      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x38>
 8004fb8:	e08e      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fba:	4b4c      	ldr	r3, [pc, #304]	; (80050ec <HAL_RCC_GetSysClockFreq+0x164>)
 8004fbc:	60bb      	str	r3, [r7, #8]
       break;
 8004fbe:	e08e      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fc0:	4b4b      	ldr	r3, [pc, #300]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004fc2:	60bb      	str	r3, [r7, #8]
      break;
 8004fc4:	e08b      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc6:	4948      	ldr	r1, [pc, #288]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004fc8:	6849      	ldr	r1, [r1, #4]
 8004fca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004fce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fd0:	4945      	ldr	r1, [pc, #276]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004fd2:	6849      	ldr	r1, [r1, #4]
 8004fd4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004fd8:	2900      	cmp	r1, #0
 8004fda:	d024      	beq.n	8005026 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fdc:	4942      	ldr	r1, [pc, #264]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004fde:	6849      	ldr	r1, [r1, #4]
 8004fe0:	0989      	lsrs	r1, r1, #6
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	f04f 0100 	mov.w	r1, #0
 8004fe8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004fec:	f04f 0500 	mov.w	r5, #0
 8004ff0:	ea00 0204 	and.w	r2, r0, r4
 8004ff4:	ea01 0305 	and.w	r3, r1, r5
 8004ff8:	493d      	ldr	r1, [pc, #244]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004ffa:	fb01 f003 	mul.w	r0, r1, r3
 8004ffe:	2100      	movs	r1, #0
 8005000:	fb01 f102 	mul.w	r1, r1, r2
 8005004:	1844      	adds	r4, r0, r1
 8005006:	493a      	ldr	r1, [pc, #232]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005008:	fba2 0101 	umull	r0, r1, r2, r1
 800500c:	1863      	adds	r3, r4, r1
 800500e:	4619      	mov	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	461a      	mov	r2, r3
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	f7fb fbe4 	bl	80007e4 <__aeabi_uldivmod>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4613      	mov	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	e04a      	b.n	80050bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005026:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	099b      	lsrs	r3, r3, #6
 800502c:	461a      	mov	r2, r3
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005036:	f04f 0100 	mov.w	r1, #0
 800503a:	ea02 0400 	and.w	r4, r2, r0
 800503e:	ea03 0501 	and.w	r5, r3, r1
 8005042:	4620      	mov	r0, r4
 8005044:	4629      	mov	r1, r5
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	014b      	lsls	r3, r1, #5
 8005050:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005054:	0142      	lsls	r2, r0, #5
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	1b00      	subs	r0, r0, r4
 800505c:	eb61 0105 	sbc.w	r1, r1, r5
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	018b      	lsls	r3, r1, #6
 800506a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800506e:	0182      	lsls	r2, r0, #6
 8005070:	1a12      	subs	r2, r2, r0
 8005072:	eb63 0301 	sbc.w	r3, r3, r1
 8005076:	f04f 0000 	mov.w	r0, #0
 800507a:	f04f 0100 	mov.w	r1, #0
 800507e:	00d9      	lsls	r1, r3, #3
 8005080:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005084:	00d0      	lsls	r0, r2, #3
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	1912      	adds	r2, r2, r4
 800508c:	eb45 0303 	adc.w	r3, r5, r3
 8005090:	f04f 0000 	mov.w	r0, #0
 8005094:	f04f 0100 	mov.w	r1, #0
 8005098:	0299      	lsls	r1, r3, #10
 800509a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800509e:	0290      	lsls	r0, r2, #10
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	f7fb fb98 	bl	80007e4 <__aeabi_uldivmod>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4613      	mov	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	0c1b      	lsrs	r3, r3, #16
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	3301      	adds	r3, #1
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	60bb      	str	r3, [r7, #8]
      break;
 80050d6:	e002      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <HAL_RCC_GetSysClockFreq+0x164>)
 80050da:	60bb      	str	r3, [r7, #8]
      break;
 80050dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050de:	68bb      	ldr	r3, [r7, #8]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bdb0      	pop	{r4, r5, r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	017d7840 	.word	0x017d7840

080050f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f8:	4b03      	ldr	r3, [pc, #12]	; (8005108 <HAL_RCC_GetHCLKFreq+0x14>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000008 	.word	0x20000008

0800510c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005110:	f7ff fff0 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	0a9b      	lsrs	r3, r3, #10
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4903      	ldr	r1, [pc, #12]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40023800 	.word	0x40023800
 8005130:	08009944 	.word	0x08009944

08005134 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005134:	b084      	sub	sp, #16
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	f107 001c 	add.w	r0, r7, #28
 8005142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	2b01      	cmp	r3, #1
 800514a:	d122      	bne.n	8005192 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005176:	2b01      	cmp	r3, #1
 8005178:	d105      	bne.n	8005186 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 fb1c 	bl	80067c4 <USB_CoreReset>
 800518c:	4603      	mov	r3, r0
 800518e:	73fb      	strb	r3, [r7, #15]
 8005190:	e01a      	b.n	80051c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 fb10 	bl	80067c4 <USB_CoreReset>
 80051a4:	4603      	mov	r3, r0
 80051a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38
 80051ba:	e005      	b.n	80051c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d10b      	bne.n	80051e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f043 0206 	orr.w	r2, r3, #6
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051f2:	b004      	add	sp, #16
 80051f4:	4770      	bx	lr
	...

080051f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d165      	bne.n	80052d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4a41      	ldr	r2, [pc, #260]	; (8005314 <USB_SetTurnaroundTime+0x11c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d906      	bls.n	8005222 <USB_SetTurnaroundTime+0x2a>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4a40      	ldr	r2, [pc, #256]	; (8005318 <USB_SetTurnaroundTime+0x120>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d202      	bcs.n	8005222 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800521c:	230f      	movs	r3, #15
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e062      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a3c      	ldr	r2, [pc, #240]	; (8005318 <USB_SetTurnaroundTime+0x120>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d306      	bcc.n	8005238 <USB_SetTurnaroundTime+0x40>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4a3b      	ldr	r2, [pc, #236]	; (800531c <USB_SetTurnaroundTime+0x124>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d202      	bcs.n	8005238 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005232:	230e      	movs	r3, #14
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e057      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4a38      	ldr	r2, [pc, #224]	; (800531c <USB_SetTurnaroundTime+0x124>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d306      	bcc.n	800524e <USB_SetTurnaroundTime+0x56>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4a37      	ldr	r2, [pc, #220]	; (8005320 <USB_SetTurnaroundTime+0x128>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d202      	bcs.n	800524e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005248:	230d      	movs	r3, #13
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e04c      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4a33      	ldr	r2, [pc, #204]	; (8005320 <USB_SetTurnaroundTime+0x128>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d306      	bcc.n	8005264 <USB_SetTurnaroundTime+0x6c>
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4a32      	ldr	r2, [pc, #200]	; (8005324 <USB_SetTurnaroundTime+0x12c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d802      	bhi.n	8005264 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800525e:	230c      	movs	r3, #12
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	e041      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4a2f      	ldr	r2, [pc, #188]	; (8005324 <USB_SetTurnaroundTime+0x12c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d906      	bls.n	800527a <USB_SetTurnaroundTime+0x82>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4a2e      	ldr	r2, [pc, #184]	; (8005328 <USB_SetTurnaroundTime+0x130>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d802      	bhi.n	800527a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005274:	230b      	movs	r3, #11
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e036      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4a2a      	ldr	r2, [pc, #168]	; (8005328 <USB_SetTurnaroundTime+0x130>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d906      	bls.n	8005290 <USB_SetTurnaroundTime+0x98>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4a29      	ldr	r2, [pc, #164]	; (800532c <USB_SetTurnaroundTime+0x134>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d802      	bhi.n	8005290 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800528a:	230a      	movs	r3, #10
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e02b      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4a26      	ldr	r2, [pc, #152]	; (800532c <USB_SetTurnaroundTime+0x134>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d906      	bls.n	80052a6 <USB_SetTurnaroundTime+0xae>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4a25      	ldr	r2, [pc, #148]	; (8005330 <USB_SetTurnaroundTime+0x138>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d202      	bcs.n	80052a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80052a0:	2309      	movs	r3, #9
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e020      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4a21      	ldr	r2, [pc, #132]	; (8005330 <USB_SetTurnaroundTime+0x138>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d306      	bcc.n	80052bc <USB_SetTurnaroundTime+0xc4>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4a20      	ldr	r2, [pc, #128]	; (8005334 <USB_SetTurnaroundTime+0x13c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d802      	bhi.n	80052bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80052b6:	2308      	movs	r3, #8
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	e015      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <USB_SetTurnaroundTime+0x13c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d906      	bls.n	80052d2 <USB_SetTurnaroundTime+0xda>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4a1c      	ldr	r2, [pc, #112]	; (8005338 <USB_SetTurnaroundTime+0x140>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d202      	bcs.n	80052d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80052cc:	2307      	movs	r3, #7
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e00a      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80052d2:	2306      	movs	r3, #6
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	e007      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80052de:	2309      	movs	r3, #9
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	e001      	b.n	80052e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80052e4:	2309      	movs	r3, #9
 80052e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	029b      	lsls	r3, r3, #10
 80052fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005300:	431a      	orrs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	00d8acbf 	.word	0x00d8acbf
 8005318:	00e4e1c0 	.word	0x00e4e1c0
 800531c:	00f42400 	.word	0x00f42400
 8005320:	01067380 	.word	0x01067380
 8005324:	011a499f 	.word	0x011a499f
 8005328:	01312cff 	.word	0x01312cff
 800532c:	014ca43f 	.word	0x014ca43f
 8005330:	016e3600 	.word	0x016e3600
 8005334:	01a6ab1f 	.word	0x01a6ab1f
 8005338:	01e84800 	.word	0x01e84800

0800533c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f043 0201 	orr.w	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 0201 	bic.w	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d115      	bne.n	80053ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053ae:	2001      	movs	r0, #1
 80053b0:	f7fc fd0e 	bl	8001dd0 <HAL_Delay>
      ms++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f001 f972 	bl	80066a4 <USB_GetMode>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d01e      	beq.n	8005404 <USB_SetCurrentMode+0x84>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b31      	cmp	r3, #49	; 0x31
 80053ca:	d9f0      	bls.n	80053ae <USB_SetCurrentMode+0x2e>
 80053cc:	e01a      	b.n	8005404 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d115      	bne.n	8005400 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053e0:	2001      	movs	r0, #1
 80053e2:	f7fc fcf5 	bl	8001dd0 <HAL_Delay>
      ms++;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f001 f959 	bl	80066a4 <USB_GetMode>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <USB_SetCurrentMode+0x84>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b31      	cmp	r3, #49	; 0x31
 80053fc:	d9f0      	bls.n	80053e0 <USB_SetCurrentMode+0x60>
 80053fe:	e001      	b.n	8005404 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e005      	b.n	8005410 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b32      	cmp	r3, #50	; 0x32
 8005408:	d101      	bne.n	800540e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005418:	b084      	sub	sp, #16
 800541a:	b580      	push	{r7, lr}
 800541c:	b086      	sub	sp, #24
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	e009      	b.n	800544c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	3340      	adds	r3, #64	; 0x40
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	2200      	movs	r2, #0
 8005444:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	3301      	adds	r3, #1
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b0e      	cmp	r3, #14
 8005450:	d9f2      	bls.n	8005438 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11c      	bne.n	8005492 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005466:	f043 0302 	orr.w	r3, r3, #2
 800546a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	639a      	str	r2, [r3, #56]	; 0x38
 8005490:	e00b      	b.n	80054aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054b0:	461a      	mov	r2, r3
 80054b2:	2300      	movs	r3, #0
 80054b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054bc:	4619      	mov	r1, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c4:	461a      	mov	r2, r3
 80054c6:	680b      	ldr	r3, [r1, #0]
 80054c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d10c      	bne.n	80054ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054d6:	2100      	movs	r1, #0
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f945 	bl	8005768 <USB_SetDevSpeed>
 80054de:	e008      	b.n	80054f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054e0:	2101      	movs	r1, #1
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f940 	bl	8005768 <USB_SetDevSpeed>
 80054e8:	e003      	b.n	80054f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054ea:	2103      	movs	r1, #3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f93b 	bl	8005768 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054f2:	2110      	movs	r1, #16
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f8f3 	bl	80056e0 <USB_FlushTxFifo>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f90f 	bl	8005728 <USB_FlushRxFifo>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	461a      	mov	r2, r3
 800551c:	2300      	movs	r3, #0
 800551e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	461a      	mov	r2, r3
 8005528:	2300      	movs	r3, #0
 800552a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	461a      	mov	r2, r3
 8005534:	2300      	movs	r3, #0
 8005536:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	e043      	b.n	80055c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005554:	d118      	bne.n	8005588 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	461a      	mov	r2, r3
 800556a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e013      	b.n	800559a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	461a      	mov	r2, r3
 8005580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e008      	b.n	800559a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	461a      	mov	r2, r3
 8005596:	2300      	movs	r3, #0
 8005598:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	461a      	mov	r2, r3
 80055ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	3301      	adds	r3, #1
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d3b7      	bcc.n	800553e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e043      	b.n	800565c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ea:	d118      	bne.n	800561e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fe:	461a      	mov	r2, r3
 8005600:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	e013      	b.n	8005630 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	461a      	mov	r2, r3
 8005616:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	e008      	b.n	8005630 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562a:	461a      	mov	r2, r3
 800562c:	2300      	movs	r3, #0
 800562e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	461a      	mov	r2, r3
 800563e:	2300      	movs	r3, #0
 8005640:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	461a      	mov	r2, r3
 8005650:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005654:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3301      	adds	r3, #1
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	429a      	cmp	r2, r3
 8005662:	d3b7      	bcc.n	80055d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005676:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005684:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f043 0210 	orr.w	r2, r3, #16
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <USB_DevInit+0x2c4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f043 0208 	orr.w	r2, r3, #8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d107      	bne.n	80056cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056c4:	f043 0304 	orr.w	r3, r3, #4
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056d8:	b004      	add	sp, #16
 80056da:	4770      	bx	lr
 80056dc:	803c3800 	.word	0x803c3800

080056e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	019b      	lsls	r3, r3, #6
 80056f2:	f043 0220 	orr.w	r2, r3, #32
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3301      	adds	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	4a08      	ldr	r2, [pc, #32]	; (8005724 <USB_FlushTxFifo+0x44>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d901      	bls.n	800570a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e006      	b.n	8005718 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b20      	cmp	r3, #32
 8005714:	d0f1      	beq.n	80056fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	00030d40 	.word	0x00030d40

08005728 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2210      	movs	r2, #16
 8005738:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	4a08      	ldr	r2, [pc, #32]	; (8005764 <USB_FlushRxFifo+0x3c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e006      	b.n	8005758 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b10      	cmp	r3, #16
 8005754:	d0f1      	beq.n	800573a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	00030d40 	.word	0x00030d40

08005768 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005788:	4313      	orrs	r3, r2
 800578a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800579a:	b480      	push	{r7}
 800579c:	b087      	sub	sp, #28
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 0306 	and.w	r3, r3, #6
 80057b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]
 80057be:	e00a      	b.n	80057d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d002      	beq.n	80057cc <USB_GetDevSpeed+0x32>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b06      	cmp	r3, #6
 80057ca:	d102      	bne.n	80057d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057cc:	2302      	movs	r3, #2
 80057ce:	75fb      	strb	r3, [r7, #23]
 80057d0:	e001      	b.n	80057d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057d2:	230f      	movs	r3, #15
 80057d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	785b      	ldrb	r3, [r3, #1]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d13a      	bne.n	8005876 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	2101      	movs	r1, #1
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	b29b      	uxth	r3, r3
 8005818:	68f9      	ldr	r1, [r7, #12]
 800581a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800581e:	4313      	orrs	r3, r2
 8005820:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d155      	bne.n	80058e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	78db      	ldrb	r3, [r3, #3]
 8005852:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005854:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	059b      	lsls	r3, r3, #22
 800585a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800585c:	4313      	orrs	r3, r2
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	e036      	b.n	80058e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587c:	69da      	ldr	r2, [r3, #28]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	2101      	movs	r1, #1
 8005888:	fa01 f303 	lsl.w	r3, r1, r3
 800588c:	041b      	lsls	r3, r3, #16
 800588e:	68f9      	ldr	r1, [r7, #12]
 8005890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005894:	4313      	orrs	r3, r2
 8005896:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d11a      	bne.n	80058e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	78db      	ldrb	r3, [r3, #3]
 80058c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058ca:	430b      	orrs	r3, r1
 80058cc:	4313      	orrs	r3, r2
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d161      	bne.n	80059d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005926:	d11f      	bne.n	8005968 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005946:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	0151      	lsls	r1, r2, #5
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	440a      	add	r2, r1
 800595e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005966:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	2101      	movs	r1, #1
 800597a:	fa01 f303 	lsl.w	r3, r1, r3
 800597e:	b29b      	uxth	r3, r3
 8005980:	43db      	mvns	r3, r3
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005988:	4013      	ands	r3, r2
 800598a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	2101      	movs	r1, #1
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	43db      	mvns	r3, r3
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ac:	4013      	ands	r3, r2
 80059ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	0159      	lsls	r1, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	440b      	add	r3, r1
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	4619      	mov	r1, r3
 80059cc:	4b35      	ldr	r3, [pc, #212]	; (8005aa4 <USB_DeactivateEndpoint+0x1b0>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	600b      	str	r3, [r1, #0]
 80059d2:	e060      	b.n	8005a96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ea:	d11f      	bne.n	8005a2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a42:	041b      	lsls	r3, r3, #16
 8005a44:	43db      	mvns	r3, r3
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	2101      	movs	r1, #1
 8005a62:	fa01 f303 	lsl.w	r3, r1, r3
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a70:	4013      	ands	r3, r2
 8005a72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	0159      	lsls	r1, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	440b      	add	r3, r1
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <USB_DeactivateEndpoint+0x1b4>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	ec337800 	.word	0xec337800
 8005aa8:	eff37800 	.word	0xeff37800

08005aac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	; 0x28
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	f040 815c 	bne.w	8005d86 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d132      	bne.n	8005b3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005af4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005af8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b34:	0cdb      	lsrs	r3, r3, #19
 8005b36:	04db      	lsls	r3, r3, #19
 8005b38:	6113      	str	r3, [r2, #16]
 8005b3a:	e074      	b.n	8005c26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b56:	0cdb      	lsrs	r3, r3, #19
 8005b58:	04db      	lsls	r3, r3, #19
 8005b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6959      	ldr	r1, [r3, #20]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	440b      	add	r3, r1
 8005b98:	1e59      	subs	r1, r3, #1
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ba2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ba4:	4b9d      	ldr	r3, [pc, #628]	; (8005e1c <USB_EPStartXfer+0x370>)
 8005ba6:	400b      	ands	r3, r1
 8005ba8:	69b9      	ldr	r1, [r7, #24]
 8005baa:	0148      	lsls	r0, r1, #5
 8005bac:	69f9      	ldr	r1, [r7, #28]
 8005bae:	4401      	add	r1, r0
 8005bb0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bce:	69b9      	ldr	r1, [r7, #24]
 8005bd0:	0148      	lsls	r0, r1, #5
 8005bd2:	69f9      	ldr	r1, [r7, #28]
 8005bd4:	4401      	add	r1, r0
 8005bd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	78db      	ldrb	r3, [r3, #3]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d11f      	bne.n	8005c26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d14b      	bne.n	8005cc4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d009      	beq.n	8005c48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	461a      	mov	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	78db      	ldrb	r3, [r3, #3]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d128      	bne.n	8005ca2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d110      	bne.n	8005c82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	0151      	lsls	r1, r2, #5
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	440a      	add	r2, r1
 8005c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	e00f      	b.n	8005ca2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e12f      	b.n	8005f24 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ce2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	78db      	ldrb	r3, [r3, #3]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d015      	beq.n	8005d18 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8117 	beq.w	8005f24 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	2101      	movs	r1, #1
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	69f9      	ldr	r1, [r7, #28]
 8005d0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d12:	4313      	orrs	r3, r2
 8005d14:	634b      	str	r3, [r1, #52]	; 0x34
 8005d16:	e105      	b.n	8005f24 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d110      	bne.n	8005d4a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e00f      	b.n	8005d6a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d68:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	68d9      	ldr	r1, [r3, #12]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	781a      	ldrb	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	b298      	uxth	r0, r3
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fa2b 	bl	80061da <USB_WritePacket>
 8005d84:	e0ce      	b.n	8005f24 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da0:	0cdb      	lsrs	r3, r3, #19
 8005da2:	04db      	lsls	r3, r3, #19
 8005da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d126      	bne.n	8005e20 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de8:	69b9      	ldr	r1, [r7, #24]
 8005dea:	0148      	lsls	r0, r1, #5
 8005dec:	69f9      	ldr	r1, [r7, #28]
 8005dee:	4401      	add	r1, r0
 8005df0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005df4:	4313      	orrs	r3, r2
 8005df6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e16:	6113      	str	r3, [r2, #16]
 8005e18:	e036      	b.n	8005e88 <USB_EPStartXfer+0x3dc>
 8005e1a:	bf00      	nop
 8005e1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	4413      	add	r3, r2
 8005e2a:	1e5a      	subs	r2, r3, #1
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e34:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	8afb      	ldrh	r3, [r7, #22]
 8005e46:	04d9      	lsls	r1, r3, #19
 8005e48:	4b39      	ldr	r3, [pc, #228]	; (8005f30 <USB_EPStartXfer+0x484>)
 8005e4a:	400b      	ands	r3, r1
 8005e4c:	69b9      	ldr	r1, [r7, #24]
 8005e4e:	0148      	lsls	r0, r1, #5
 8005e50:	69f9      	ldr	r1, [r7, #28]
 8005e52:	4401      	add	r1, r0
 8005e54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	691a      	ldr	r2, [r3, #16]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	8af9      	ldrh	r1, [r7, #22]
 8005e70:	fb01 f303 	mul.w	r3, r1, r3
 8005e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e78:	69b9      	ldr	r1, [r7, #24]
 8005e7a:	0148      	lsls	r0, r1, #5
 8005e7c:	69f9      	ldr	r1, [r7, #28]
 8005e7e:	4401      	add	r1, r0
 8005e80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e84:	4313      	orrs	r3, r2
 8005e86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d10d      	bne.n	8005eaa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	68d9      	ldr	r1, [r3, #12]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea6:	460a      	mov	r2, r1
 8005ea8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	78db      	ldrb	r3, [r3, #3]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d128      	bne.n	8005f04 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d110      	bne.n	8005ee4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005edc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e00f      	b.n	8005f04 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	1ff80000 	.word	0x1ff80000

08005f34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	f040 80cd 	bne.w	80060f0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d132      	bne.n	8005fc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	0151      	lsls	r1, r2, #5
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	440a      	add	r2, r1
 8005f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fbc:	0cdb      	lsrs	r3, r3, #19
 8005fbe:	04db      	lsls	r3, r3, #19
 8005fc0:	6113      	str	r3, [r2, #16]
 8005fc2:	e04e      	b.n	8006062 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fde:	0cdb      	lsrs	r3, r3, #19
 8005fe0:	04db      	lsls	r3, r3, #19
 8005fe2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006002:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006006:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	429a      	cmp	r2, r3
 8006012:	d903      	bls.n	800601c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	0151      	lsls	r1, r2, #5
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	440a      	add	r2, r1
 8006032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800603a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006052:	6939      	ldr	r1, [r7, #16]
 8006054:	0148      	lsls	r0, r1, #5
 8006056:	6979      	ldr	r1, [r7, #20]
 8006058:	4401      	add	r1, r0
 800605a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800605e:	4313      	orrs	r3, r2
 8006060:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d11e      	bne.n	80060a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d009      	beq.n	8006084 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607c:	461a      	mov	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	e092      	b.n	80061cc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	0151      	lsls	r1, r2, #5
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	440a      	add	r2, r1
 80060bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d07e      	beq.n	80061cc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	2101      	movs	r1, #1
 80060e0:	fa01 f303 	lsl.w	r3, r1, r3
 80060e4:	6979      	ldr	r1, [r7, #20]
 80060e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ea:	4313      	orrs	r3, r2
 80060ec:	634b      	str	r3, [r1, #52]	; 0x34
 80060ee:	e06d      	b.n	80061cc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	0151      	lsls	r1, r2, #5
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	440a      	add	r2, r1
 8006106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800610a:	0cdb      	lsrs	r3, r3, #19
 800610c:	04db      	lsls	r3, r3, #19
 800610e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	0151      	lsls	r1, r2, #5
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	440a      	add	r2, r1
 8006126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800612a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800612e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006132:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800615e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006162:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800617a:	6939      	ldr	r1, [r7, #16]
 800617c:	0148      	lsls	r0, r1, #5
 800617e:	6979      	ldr	r1, [r7, #20]
 8006180:	4401      	add	r1, r0
 8006182:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006186:	4313      	orrs	r3, r2
 8006188:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d10d      	bne.n	80061ac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	68d9      	ldr	r1, [r3, #12]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a8:	460a      	mov	r2, r1
 80061aa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061da:	b480      	push	{r7}
 80061dc:	b089      	sub	sp, #36	; 0x24
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	4611      	mov	r1, r2
 80061e6:	461a      	mov	r2, r3
 80061e8:	460b      	mov	r3, r1
 80061ea:	71fb      	strb	r3, [r7, #7]
 80061ec:	4613      	mov	r3, r2
 80061ee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d123      	bne.n	8006248 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006200:	88bb      	ldrh	r3, [r7, #4]
 8006202:	3303      	adds	r3, #3
 8006204:	089b      	lsrs	r3, r3, #2
 8006206:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006208:	2300      	movs	r3, #0
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	e018      	b.n	8006240 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	031a      	lsls	r2, r3, #12
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4413      	add	r3, r2
 8006216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621a:	461a      	mov	r2, r3
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	3301      	adds	r3, #1
 8006226:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	3301      	adds	r3, #1
 800622c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3301      	adds	r3, #1
 8006232:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	3301      	adds	r3, #1
 8006238:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	3301      	adds	r3, #1
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	429a      	cmp	r2, r3
 8006246:	d3e2      	bcc.n	800620e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3724      	adds	r7, #36	; 0x24
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006256:	b480      	push	{r7}
 8006258:	b08b      	sub	sp, #44	; 0x2c
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	4613      	mov	r3, r2
 8006262:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	089b      	lsrs	r3, r3, #2
 8006270:	b29b      	uxth	r3, r3
 8006272:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800627c:	2300      	movs	r3, #0
 800627e:	623b      	str	r3, [r7, #32]
 8006280:	e014      	b.n	80062ac <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	601a      	str	r2, [r3, #0]
    pDest++;
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	3301      	adds	r3, #1
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	3301      	adds	r3, #1
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	3301      	adds	r3, #1
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	3301      	adds	r3, #1
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	3301      	adds	r3, #1
 80062aa:	623b      	str	r3, [r7, #32]
 80062ac:	6a3a      	ldr	r2, [r7, #32]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d3e6      	bcc.n	8006282 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062b4:	8bfb      	ldrh	r3, [r7, #30]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d01e      	beq.n	80062f8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c4:	461a      	mov	r2, r3
 80062c6:	f107 0310 	add.w	r3, r7, #16
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	fa22 f303 	lsr.w	r3, r2, r3
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	701a      	strb	r2, [r3, #0]
      i++;
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	3301      	adds	r3, #1
 80062e4:	623b      	str	r3, [r7, #32]
      pDest++;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	3301      	adds	r3, #1
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80062ec:	8bfb      	ldrh	r3, [r7, #30]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062f2:	8bfb      	ldrh	r3, [r7, #30]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1ea      	bne.n	80062ce <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	372c      	adds	r7, #44	; 0x2c
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d12c      	bne.n	800637c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	db12      	blt.n	800635a <USB_EPSetStall+0x54>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00f      	beq.n	800635a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006354:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006358:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	e02b      	b.n	80063d4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	db12      	blt.n	80063b4 <USB_EPSetStall+0xae>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00f      	beq.n	80063b4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063b2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	0151      	lsls	r1, r2, #5
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	440a      	add	r2, r1
 80063ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d128      	bne.n	8006450 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006418:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800641c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	78db      	ldrb	r3, [r3, #3]
 8006422:	2b03      	cmp	r3, #3
 8006424:	d003      	beq.n	800642e <USB_EPClearStall+0x4c>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	78db      	ldrb	r3, [r3, #3]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d138      	bne.n	80064a0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e027      	b.n	80064a0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800646a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800646e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	78db      	ldrb	r3, [r3, #3]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d003      	beq.n	8006480 <USB_EPClearStall+0x9e>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	78db      	ldrb	r3, [r3, #3]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d10f      	bne.n	80064a0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	440a      	add	r2, r1
 8006496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800649a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064e2:	68f9      	ldr	r1, [r7, #12]
 80064e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064e8:	4313      	orrs	r3, r2
 80064ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006514:	f023 0303 	bic.w	r3, r3, #3
 8006518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006528:	f023 0302 	bic.w	r3, r3, #2
 800652c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006556:	f023 0303 	bic.w	r3, r3, #3
 800655a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800656a:	f043 0302 	orr.w	r3, r3, #2
 800656e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800657e:	b480      	push	{r7}
 8006580:	b085      	sub	sp, #20
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4013      	ands	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006596:	68fb      	ldr	r3, [r7, #12]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	4013      	ands	r3, r2
 80065c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	0c1b      	lsrs	r3, r3, #16
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4013      	ands	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	b29b      	uxth	r3, r3
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	4013      	ands	r3, r2
 8006638:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800663a:	68bb      	ldr	r3, [r7, #8]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	fa22 f303 	lsr.w	r3, r2, r3
 8006678:	01db      	lsls	r3, r3, #7
 800667a:	b2db      	uxtb	r3, r3
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4013      	ands	r3, r2
 8006694:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006696:	68bb      	ldr	r3, [r7, #8]
}
 8006698:	4618      	mov	r0, r3
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	f003 0301 	and.w	r3, r3, #1
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066de:	f023 0307 	bic.w	r3, r3, #7
 80066e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	460b      	mov	r3, r1
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	333c      	adds	r3, #60	; 0x3c
 800671e:	3304      	adds	r3, #4
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4a26      	ldr	r2, [pc, #152]	; (80067c0 <USB_EP0_OutStart+0xb8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d90a      	bls.n	8006742 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800673c:	d101      	bne.n	8006742 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e037      	b.n	80067b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	461a      	mov	r2, r3
 800674a:	2300      	movs	r3, #0
 800674c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800675c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006770:	f043 0318 	orr.w	r3, r3, #24
 8006774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006784:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006788:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d10f      	bne.n	80067b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	461a      	mov	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	4f54300a 	.word	0x4f54300a

080067c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	4a13      	ldr	r2, [pc, #76]	; (8006824 <USB_CoreReset+0x60>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d901      	bls.n	80067e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e01a      	b.n	8006816 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	daf3      	bge.n	80067d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f043 0201 	orr.w	r2, r3, #1
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	4a09      	ldr	r2, [pc, #36]	; (8006824 <USB_CoreReset+0x60>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d901      	bls.n	8006808 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e006      	b.n	8006816 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d0f1      	beq.n	80067f8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	00030d40 	.word	0x00030d40

08006828 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006834:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006838:	f002 f91c 	bl	8008a74 <USBD_static_malloc>
 800683c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800684c:	2302      	movs	r3, #2
 800684e:	e066      	b.n	800691e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	7c1b      	ldrb	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d119      	bne.n	8006894 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006864:	2202      	movs	r2, #2
 8006866:	2181      	movs	r1, #129	; 0x81
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 ffe0 	bl	800882e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006878:	2202      	movs	r2, #2
 800687a:	2101      	movs	r1, #1
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 ffd6 	bl	800882e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2210      	movs	r2, #16
 800688e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006892:	e016      	b.n	80068c2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006894:	2340      	movs	r3, #64	; 0x40
 8006896:	2202      	movs	r2, #2
 8006898:	2181      	movs	r1, #129	; 0x81
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 ffc7 	bl	800882e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068a6:	2340      	movs	r3, #64	; 0x40
 80068a8:	2202      	movs	r2, #2
 80068aa:	2101      	movs	r1, #1
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 ffbe 	bl	800882e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2210      	movs	r2, #16
 80068be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068c2:	2308      	movs	r3, #8
 80068c4:	2203      	movs	r2, #3
 80068c6:	2182      	movs	r1, #130	; 0x82
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 ffb0 	bl	800882e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	7c1b      	ldrb	r3, [r3, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d109      	bne.n	800690c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006902:	2101      	movs	r1, #1
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f002 f881 	bl	8008a0c <USBD_LL_PrepareReceive>
 800690a:	e007      	b.n	800691c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006912:	2340      	movs	r3, #64	; 0x40
 8006914:	2101      	movs	r1, #1
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f002 f878 	bl	8008a0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b082      	sub	sp, #8
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	460b      	mov	r3, r1
 8006930:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006932:	2181      	movs	r1, #129	; 0x81
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f001 ffa0 	bl	800887a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006940:	2101      	movs	r1, #1
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 ff99 	bl	800887a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006950:	2182      	movs	r1, #130	; 0x82
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 ff91 	bl	800887a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00e      	beq.n	8006990 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006982:	4618      	mov	r0, r3
 8006984:	f002 f884 	bl	8008a90 <USBD_static_free>
    pdev->pClassData = NULL;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e0af      	b.n	8006b24 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d03f      	beq.n	8006a50 <USBD_CDC_Setup+0xb4>
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	f040 809f 	bne.w	8006b14 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	88db      	ldrh	r3, [r3, #6]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d02e      	beq.n	8006a3c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	da16      	bge.n	8006a16 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80069f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	88d2      	ldrh	r2, [r2, #6]
 80069fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	88db      	ldrh	r3, [r3, #6]
 8006a00:	2b07      	cmp	r3, #7
 8006a02:	bf28      	it	cs
 8006a04:	2307      	movcs	r3, #7
 8006a06:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	89fa      	ldrh	r2, [r7, #14]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fae9 	bl	8007fe6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006a14:	e085      	b.n	8006b22 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	785a      	ldrb	r2, [r3, #1]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	88db      	ldrh	r3, [r3, #6]
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006a2c:	6939      	ldr	r1, [r7, #16]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	88db      	ldrh	r3, [r3, #6]
 8006a32:	461a      	mov	r2, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fb02 	bl	800803e <USBD_CtlPrepareRx>
      break;
 8006a3a:	e072      	b.n	8006b22 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	7850      	ldrb	r0, [r2, #1]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	4798      	blx	r3
      break;
 8006a4e:	e068      	b.n	8006b22 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b0b      	cmp	r3, #11
 8006a56:	d852      	bhi.n	8006afe <USBD_CDC_Setup+0x162>
 8006a58:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <USBD_CDC_Setup+0xc4>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a91 	.word	0x08006a91
 8006a64:	08006b0d 	.word	0x08006b0d
 8006a68:	08006aff 	.word	0x08006aff
 8006a6c:	08006aff 	.word	0x08006aff
 8006a70:	08006aff 	.word	0x08006aff
 8006a74:	08006aff 	.word	0x08006aff
 8006a78:	08006aff 	.word	0x08006aff
 8006a7c:	08006aff 	.word	0x08006aff
 8006a80:	08006aff 	.word	0x08006aff
 8006a84:	08006aff 	.word	0x08006aff
 8006a88:	08006abb 	.word	0x08006abb
 8006a8c:	08006ae5 	.word	0x08006ae5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d107      	bne.n	8006aac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a9c:	f107 030a 	add.w	r3, r7, #10
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 fa9e 	bl	8007fe6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aaa:	e032      	b.n	8006b12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 fa28 	bl	8007f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ab8:	e02b      	b.n	8006b12 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d107      	bne.n	8006ad6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ac6:	f107 030d 	add.w	r3, r7, #13
 8006aca:	2201      	movs	r2, #1
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fa89 	bl	8007fe6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ad4:	e01d      	b.n	8006b12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 fa13 	bl	8007f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae2:	e016      	b.n	8006b12 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d00f      	beq.n	8006b10 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fa06 	bl	8007f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8006af8:	2303      	movs	r3, #3
 8006afa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006afc:	e008      	b.n	8006b10 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 f9ff 	bl	8007f04 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b06:	2303      	movs	r3, #3
 8006b08:	75fb      	strb	r3, [r7, #23]
          break;
 8006b0a:	e002      	b.n	8006b12 <USBD_CDC_Setup+0x176>
          break;
 8006b0c:	bf00      	nop
 8006b0e:	e008      	b.n	8006b22 <USBD_CDC_Setup+0x186>
          break;
 8006b10:	bf00      	nop
      }
      break;
 8006b12:	e006      	b.n	8006b22 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 f9f4 	bl	8007f04 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b20:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e04f      	b.n	8006bee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b56:	78fa      	ldrb	r2, [r7, #3]
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	3318      	adds	r3, #24
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d029      	beq.n	8006bc0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b6c:	78fa      	ldrb	r2, [r7, #3]
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	440b      	add	r3, r1
 8006b7a:	3318      	adds	r3, #24
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	78f9      	ldrb	r1, [r7, #3]
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	460b      	mov	r3, r1
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	1a5b      	subs	r3, r3, r1
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4403      	add	r3, r0
 8006b8c:	3344      	adds	r3, #68	; 0x44
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b94:	fb03 f301 	mul.w	r3, r3, r1
 8006b98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d110      	bne.n	8006bc0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006b9e:	78fa      	ldrb	r2, [r7, #3]
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	440b      	add	r3, r1
 8006bac:	3318      	adds	r3, #24
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bb2:	78f9      	ldrb	r1, [r7, #3]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 ff06 	bl	80089ca <USBD_LL_Transmit>
 8006bbe:	e015      	b.n	8006bec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00b      	beq.n	8006bec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006be8:	78fa      	ldrb	r2, [r7, #3]
 8006bea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e015      	b.n	8006c44 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 ff16 	bl	8008a4e <USBD_LL_GetRxDataSize>
 8006c22:	4602      	mov	r2, r0
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c3e:	4611      	mov	r1, r2
 8006c40:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e01b      	b.n	8006c9e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d015      	beq.n	8006c9c <USBD_CDC_EP0_RxReady+0x50>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c76:	2bff      	cmp	r3, #255	; 0xff
 8006c78:	d010      	beq.n	8006c9c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006c88:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c90:	b292      	uxth	r2, r2
 8006c92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	22ff      	movs	r2, #255	; 0xff
 8006c98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2243      	movs	r2, #67	; 0x43
 8006cb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006cb6:	4b03      	ldr	r3, [pc, #12]	; (8006cc4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	2000009c 	.word	0x2000009c

08006cc8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2243      	movs	r2, #67	; 0x43
 8006cd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006cd6:	4b03      	ldr	r3, [pc, #12]	; (8006ce4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	20000058 	.word	0x20000058

08006ce8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2243      	movs	r2, #67	; 0x43
 8006cf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006cf6:	4b03      	ldr	r3, [pc, #12]	; (8006d04 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	200000e0 	.word	0x200000e0

08006d08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	220a      	movs	r2, #10
 8006d14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d16:	4b03      	ldr	r3, [pc, #12]	; (8006d24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	20000014 	.word	0x20000014

08006d28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e004      	b.n	8006d46 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b087      	sub	sp, #28
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d64:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e008      	b.n	8006d82 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e004      	b.n	8006db4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e016      	b.n	8006e0c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	7c1b      	ldrb	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d109      	bne.n	8006dfa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006df0:	2101      	movs	r1, #1
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fe0a 	bl	8008a0c <USBD_LL_PrepareReceive>
 8006df8:	e007      	b.n	8006e0a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e00:	2340      	movs	r3, #64	; 0x40
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fe01 	bl	8008a0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e01f      	b.n	8006e6c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	79fa      	ldrb	r2, [r7, #7]
 8006e5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f001 fc7d 	bl	8008760 <USBD_LL_Init>
 8006e66:	4603      	mov	r3, r0
 8006e68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e016      	b.n	8006eba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	f107 020e 	add.w	r2, r7, #14
 8006eac:	4610      	mov	r0, r2
 8006eae:	4798      	blx	r3
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fc94 	bl	80087f8 <USBD_LL_Start>
 8006ed0:	4603      	mov	r3, r0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006efc:	2303      	movs	r3, #3
 8006efe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	78fa      	ldrb	r2, [r7, #3]
 8006f14:	4611      	mov	r1, r2
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	4798      	blx	r3
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d007      	beq.n	8006f4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	4611      	mov	r1, r2
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
  }

  return USBD_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 ff90 	bl	8007e90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f7e:	461a      	mov	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f8c:	f003 031f 	and.w	r3, r3, #31
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d01a      	beq.n	8006fca <USBD_LL_SetupStage+0x72>
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d822      	bhi.n	8006fde <USBD_LL_SetupStage+0x86>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <USBD_LL_SetupStage+0x4a>
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d00a      	beq.n	8006fb6 <USBD_LL_SetupStage+0x5e>
 8006fa0:	e01d      	b.n	8006fde <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa62 	bl	8007474 <USBD_StdDevReq>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb4:	e020      	b.n	8006ff8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fac6 	bl	8007550 <USBD_StdItfReq>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc8:	e016      	b.n	8006ff8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fb05 	bl	80075e2 <USBD_StdEPReq>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]
      break;
 8006fdc:	e00c      	b.n	8006ff8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fe4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 fc63 	bl	80088b8 <USBD_LL_StallEP>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff6:	bf00      	nop
  }

  return ret;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b086      	sub	sp, #24
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	460b      	mov	r3, r1
 800700c:	607a      	str	r2, [r7, #4]
 800700e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007010:	7afb      	ldrb	r3, [r7, #11]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d138      	bne.n	8007088 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800701c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007024:	2b03      	cmp	r3, #3
 8007026:	d14a      	bne.n	80070be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	429a      	cmp	r2, r3
 8007032:	d913      	bls.n	800705c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	1ad2      	subs	r2, r2, r3
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	4293      	cmp	r3, r2
 800704c:	bf28      	it	cs
 800704e:	4613      	movcs	r3, r2
 8007050:	461a      	mov	r2, r3
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f001 f80f 	bl	8008078 <USBD_CtlContinueRx>
 800705a:	e030      	b.n	80070be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b03      	cmp	r3, #3
 8007066:	d10b      	bne.n	8007080 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f001 f80a 	bl	800809a <USBD_CtlSendStatus>
 8007086:	e01a      	b.n	80070be <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b03      	cmp	r3, #3
 8007092:	d114      	bne.n	80070be <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00e      	beq.n	80070be <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	7afa      	ldrb	r2, [r7, #11]
 80070aa:	4611      	mov	r1, r2
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	4798      	blx	r3
 80070b0:	4603      	mov	r3, r0
 80070b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	e000      	b.n	80070c0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	460b      	mov	r3, r1
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070d6:	7afb      	ldrb	r3, [r7, #11]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d16b      	bne.n	80071b4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3314      	adds	r3, #20
 80070e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d156      	bne.n	800719a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d914      	bls.n	8007122 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	1ad2      	subs	r2, r2, r3
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	461a      	mov	r2, r3
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 ff84 	bl	800801c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007114:	2300      	movs	r3, #0
 8007116:	2200      	movs	r2, #0
 8007118:	2100      	movs	r1, #0
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f001 fc76 	bl	8008a0c <USBD_LL_PrepareReceive>
 8007120:	e03b      	b.n	800719a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	429a      	cmp	r2, r3
 800712c:	d11c      	bne.n	8007168 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007136:	429a      	cmp	r2, r3
 8007138:	d316      	bcc.n	8007168 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007144:	429a      	cmp	r2, r3
 8007146:	d20f      	bcs.n	8007168 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007148:	2200      	movs	r2, #0
 800714a:	2100      	movs	r1, #0
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 ff65 	bl	800801c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800715a:	2300      	movs	r3, #0
 800715c:	2200      	movs	r2, #0
 800715e:	2100      	movs	r1, #0
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f001 fc53 	bl	8008a0c <USBD_LL_PrepareReceive>
 8007166:	e018      	b.n	800719a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b03      	cmp	r3, #3
 8007172:	d10b      	bne.n	800718c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800718c:	2180      	movs	r1, #128	; 0x80
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f001 fb92 	bl	80088b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 ff93 	bl	80080c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d122      	bne.n	80071ea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff fe98 	bl	8006eda <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071b2:	e01a      	b.n	80071ea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d114      	bne.n	80071ea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00e      	beq.n	80071ea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	7afa      	ldrb	r2, [r7, #11]
 80071d6:	4611      	mov	r1, r2
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	4798      	blx	r3
 80071dc:	4603      	mov	r3, r0
 80071de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	e000      	b.n	80071ec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007224:	2303      	movs	r3, #3
 8007226:	e02f      	b.n	8007288 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00f      	beq.n	8007252 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d009      	beq.n	8007252 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	6852      	ldr	r2, [r2, #4]
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	4611      	mov	r1, r2
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	2200      	movs	r2, #0
 8007256:	2100      	movs	r1, #0
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 fae8 	bl	800882e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2240      	movs	r2, #64	; 0x40
 800726a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800726e:	2340      	movs	r3, #64	; 0x40
 8007270:	2200      	movs	r2, #0
 8007272:	2180      	movs	r1, #128	; 0x80
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 fada 	bl	800882e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2240      	movs	r2, #64	; 0x40
 8007284:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	78fa      	ldrb	r2, [r7, #3]
 80072a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2204      	movs	r2, #4
 80072ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d106      	bne.n	80072fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800731e:	2303      	movs	r3, #3
 8007320:	e012      	b.n	8007348 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b03      	cmp	r3, #3
 800732c:	d10b      	bne.n	8007346 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d005      	beq.n	8007346 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007366:	2303      	movs	r3, #3
 8007368:	e014      	b.n	8007394 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b03      	cmp	r3, #3
 8007374:	d10d      	bne.n	8007392 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d007      	beq.n	8007392 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	78fa      	ldrb	r2, [r7, #3]
 800738c:	4611      	mov	r1, r2
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e014      	b.n	80073e0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d10d      	bne.n	80073de <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	78fa      	ldrb	r2, [r7, #3]
 80073d8:	4611      	mov	r1, r2
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007414:	2b00      	cmp	r3, #0
 8007416:	d009      	beq.n	800742c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6852      	ldr	r2, [r2, #4]
 8007424:	b2d2      	uxtb	r2, r2
 8007426:	4611      	mov	r1, r2
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
  }

  return USBD_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007436:	b480      	push	{r7}
 8007438:	b087      	sub	sp, #28
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	3301      	adds	r3, #1
 800744c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007454:	8a3b      	ldrh	r3, [r7, #16]
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	b21a      	sxth	r2, r3
 800745a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800745e:	4313      	orrs	r3, r2
 8007460:	b21b      	sxth	r3, r3
 8007462:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007464:	89fb      	ldrh	r3, [r7, #14]
}
 8007466:	4618      	mov	r0, r3
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d005      	beq.n	800749a <USBD_StdDevReq+0x26>
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d853      	bhi.n	800753a <USBD_StdDevReq+0xc6>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <USBD_StdDevReq+0x3a>
 8007496:	2b20      	cmp	r3, #32
 8007498:	d14f      	bne.n	800753a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]
      break;
 80074ac:	e04a      	b.n	8007544 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b09      	cmp	r3, #9
 80074b4:	d83b      	bhi.n	800752e <USBD_StdDevReq+0xba>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <USBD_StdDevReq+0x48>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	08007511 	.word	0x08007511
 80074c0:	08007525 	.word	0x08007525
 80074c4:	0800752f 	.word	0x0800752f
 80074c8:	0800751b 	.word	0x0800751b
 80074cc:	0800752f 	.word	0x0800752f
 80074d0:	080074ef 	.word	0x080074ef
 80074d4:	080074e5 	.word	0x080074e5
 80074d8:	0800752f 	.word	0x0800752f
 80074dc:	08007507 	.word	0x08007507
 80074e0:	080074f9 	.word	0x080074f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f9de 	bl	80078a8 <USBD_GetDescriptor>
          break;
 80074ec:	e024      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fb43 	bl	8007b7c <USBD_SetAddress>
          break;
 80074f6:	e01f      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fb82 	bl	8007c04 <USBD_SetConfig>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
          break;
 8007504:	e018      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fc21 	bl	8007d50 <USBD_GetConfig>
          break;
 800750e:	e013      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fc52 	bl	8007dbc <USBD_GetStatus>
          break;
 8007518:	e00e      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fc81 	bl	8007e24 <USBD_SetFeature>
          break;
 8007522:	e009      	b.n	8007538 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fc90 	bl	8007e4c <USBD_ClrFeature>
          break;
 800752c:	e004      	b.n	8007538 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fce7 	bl	8007f04 <USBD_CtlError>
          break;
 8007536:	bf00      	nop
      }
      break;
 8007538:	e004      	b.n	8007544 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fce1 	bl	8007f04 <USBD_CtlError>
      break;
 8007542:	bf00      	nop
  }

  return ret;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop

08007550 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007566:	2b40      	cmp	r3, #64	; 0x40
 8007568:	d005      	beq.n	8007576 <USBD_StdItfReq+0x26>
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d82f      	bhi.n	80075ce <USBD_StdItfReq+0x7e>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <USBD_StdItfReq+0x26>
 8007572:	2b20      	cmp	r3, #32
 8007574:	d12b      	bne.n	80075ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757c:	b2db      	uxtb	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	2b02      	cmp	r3, #2
 8007582:	d81d      	bhi.n	80075c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	889b      	ldrh	r3, [r3, #4]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b01      	cmp	r3, #1
 800758c:	d813      	bhi.n	80075b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
 800759c:	4603      	mov	r3, r0
 800759e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	88db      	ldrh	r3, [r3, #6]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d110      	bne.n	80075ca <USBD_StdItfReq+0x7a>
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10d      	bne.n	80075ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fd73 	bl	800809a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075b4:	e009      	b.n	80075ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fca3 	bl	8007f04 <USBD_CtlError>
          break;
 80075be:	e004      	b.n	80075ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fc9e 	bl	8007f04 <USBD_CtlError>
          break;
 80075c8:	e000      	b.n	80075cc <USBD_StdItfReq+0x7c>
          break;
 80075ca:	bf00      	nop
      }
      break;
 80075cc:	e004      	b.n	80075d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fc97 	bl	8007f04 <USBD_CtlError>
      break;
 80075d6:	bf00      	nop
  }

  return ret;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	889b      	ldrh	r3, [r3, #4]
 80075f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075fe:	2b40      	cmp	r3, #64	; 0x40
 8007600:	d007      	beq.n	8007612 <USBD_StdEPReq+0x30>
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	f200 8145 	bhi.w	8007892 <USBD_StdEPReq+0x2b0>
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00c      	beq.n	8007626 <USBD_StdEPReq+0x44>
 800760c:	2b20      	cmp	r3, #32
 800760e:	f040 8140 	bne.w	8007892 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]
      break;
 8007624:	e13a      	b.n	800789c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	785b      	ldrb	r3, [r3, #1]
 800762a:	2b03      	cmp	r3, #3
 800762c:	d007      	beq.n	800763e <USBD_StdEPReq+0x5c>
 800762e:	2b03      	cmp	r3, #3
 8007630:	f300 8129 	bgt.w	8007886 <USBD_StdEPReq+0x2a4>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d07f      	beq.n	8007738 <USBD_StdEPReq+0x156>
 8007638:	2b01      	cmp	r3, #1
 800763a:	d03c      	beq.n	80076b6 <USBD_StdEPReq+0xd4>
 800763c:	e123      	b.n	8007886 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d002      	beq.n	8007650 <USBD_StdEPReq+0x6e>
 800764a:	2b03      	cmp	r3, #3
 800764c:	d016      	beq.n	800767c <USBD_StdEPReq+0x9a>
 800764e:	e02c      	b.n	80076aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00d      	beq.n	8007672 <USBD_StdEPReq+0x90>
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	2b80      	cmp	r3, #128	; 0x80
 800765a:	d00a      	beq.n	8007672 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 f929 	bl	80088b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007666:	2180      	movs	r1, #128	; 0x80
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 f925 	bl	80088b8 <USBD_LL_StallEP>
 800766e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007670:	e020      	b.n	80076b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fc45 	bl	8007f04 <USBD_CtlError>
              break;
 800767a:	e01b      	b.n	80076b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	885b      	ldrh	r3, [r3, #2]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10e      	bne.n	80076a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00b      	beq.n	80076a2 <USBD_StdEPReq+0xc0>
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	2b80      	cmp	r3, #128	; 0x80
 800768e:	d008      	beq.n	80076a2 <USBD_StdEPReq+0xc0>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	88db      	ldrh	r3, [r3, #6]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 f90b 	bl	80088b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fcf9 	bl	800809a <USBD_CtlSendStatus>

              break;
 80076a8:	e004      	b.n	80076b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fc29 	bl	8007f04 <USBD_CtlError>
              break;
 80076b2:	bf00      	nop
          }
          break;
 80076b4:	e0ec      	b.n	8007890 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d002      	beq.n	80076c8 <USBD_StdEPReq+0xe6>
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d016      	beq.n	80076f4 <USBD_StdEPReq+0x112>
 80076c6:	e030      	b.n	800772a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00d      	beq.n	80076ea <USBD_StdEPReq+0x108>
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	2b80      	cmp	r3, #128	; 0x80
 80076d2:	d00a      	beq.n	80076ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 f8ed 	bl	80088b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076de:	2180      	movs	r1, #128	; 0x80
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 f8e9 	bl	80088b8 <USBD_LL_StallEP>
 80076e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076e8:	e025      	b.n	8007736 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fc09 	bl	8007f04 <USBD_CtlError>
              break;
 80076f2:	e020      	b.n	8007736 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	885b      	ldrh	r3, [r3, #2]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d11b      	bne.n	8007734 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f001 f8f3 	bl	80088f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fcc2 	bl	800809a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007728:	e004      	b.n	8007734 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fbe9 	bl	8007f04 <USBD_CtlError>
              break;
 8007732:	e000      	b.n	8007736 <USBD_StdEPReq+0x154>
              break;
 8007734:	bf00      	nop
          }
          break;
 8007736:	e0ab      	b.n	8007890 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d002      	beq.n	800774a <USBD_StdEPReq+0x168>
 8007744:	2b03      	cmp	r3, #3
 8007746:	d032      	beq.n	80077ae <USBD_StdEPReq+0x1cc>
 8007748:	e097      	b.n	800787a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d007      	beq.n	8007760 <USBD_StdEPReq+0x17e>
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b80      	cmp	r3, #128	; 0x80
 8007754:	d004      	beq.n	8007760 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fbd3 	bl	8007f04 <USBD_CtlError>
                break;
 800775e:	e091      	b.n	8007884 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	da0b      	bge.n	8007780 <USBD_StdEPReq+0x19e>
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	3310      	adds	r3, #16
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	4413      	add	r3, r2
 800777c:	3304      	adds	r3, #4
 800777e:	e00b      	b.n	8007798 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	3304      	adds	r3, #4
 8007798:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2202      	movs	r2, #2
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fc1d 	bl	8007fe6 <USBD_CtlSendData>
              break;
 80077ac:	e06a      	b.n	8007884 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	da11      	bge.n	80077da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	f003 020f 	and.w	r2, r3, #15
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	3324      	adds	r3, #36	; 0x24
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d117      	bne.n	8007800 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fb96 	bl	8007f04 <USBD_CtlError>
                  break;
 80077d8:	e054      	b.n	8007884 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	f003 020f 	and.w	r2, r3, #15
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	4613      	mov	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	440b      	add	r3, r1
 80077ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d104      	bne.n	8007800 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fb83 	bl	8007f04 <USBD_CtlError>
                  break;
 80077fe:	e041      	b.n	8007884 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007800:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	da0b      	bge.n	8007820 <USBD_StdEPReq+0x23e>
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	3310      	adds	r3, #16
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	4413      	add	r3, r2
 800781c:	3304      	adds	r3, #4
 800781e:	e00b      	b.n	8007838 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	4413      	add	r3, r2
 8007836:	3304      	adds	r3, #4
 8007838:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <USBD_StdEPReq+0x264>
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	2b80      	cmp	r3, #128	; 0x80
 8007844:	d103      	bne.n	800784e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	e00e      	b.n	800786c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f86e 	bl	8008934 <USBD_LL_IsStallEP>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2201      	movs	r2, #1
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e002      	b.n	800786c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2202      	movs	r2, #2
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fbb7 	bl	8007fe6 <USBD_CtlSendData>
              break;
 8007878:	e004      	b.n	8007884 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fb41 	bl	8007f04 <USBD_CtlError>
              break;
 8007882:	bf00      	nop
          }
          break;
 8007884:	e004      	b.n	8007890 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fb3b 	bl	8007f04 <USBD_CtlError>
          break;
 800788e:	bf00      	nop
      }
      break;
 8007890:	e004      	b.n	800789c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fb35 	bl	8007f04 <USBD_CtlError>
      break;
 800789a:	bf00      	nop
  }

  return ret;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	885b      	ldrh	r3, [r3, #2]
 80078c2:	0a1b      	lsrs	r3, r3, #8
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	2b06      	cmp	r3, #6
 80078ca:	f200 8128 	bhi.w	8007b1e <USBD_GetDescriptor+0x276>
 80078ce:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <USBD_GetDescriptor+0x2c>)
 80078d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d4:	080078f1 	.word	0x080078f1
 80078d8:	08007909 	.word	0x08007909
 80078dc:	08007949 	.word	0x08007949
 80078e0:	08007b1f 	.word	0x08007b1f
 80078e4:	08007b1f 	.word	0x08007b1f
 80078e8:	08007abf 	.word	0x08007abf
 80078ec:	08007aeb 	.word	0x08007aeb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	7c12      	ldrb	r2, [r2, #16]
 80078fc:	f107 0108 	add.w	r1, r7, #8
 8007900:	4610      	mov	r0, r2
 8007902:	4798      	blx	r3
 8007904:	60f8      	str	r0, [r7, #12]
      break;
 8007906:	e112      	b.n	8007b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	7c1b      	ldrb	r3, [r3, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10d      	bne.n	800792c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007918:	f107 0208 	add.w	r2, r7, #8
 800791c:	4610      	mov	r0, r2
 800791e:	4798      	blx	r3
 8007920:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3301      	adds	r3, #1
 8007926:	2202      	movs	r2, #2
 8007928:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800792a:	e100      	b.n	8007b2e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	f107 0208 	add.w	r2, r7, #8
 8007938:	4610      	mov	r0, r2
 800793a:	4798      	blx	r3
 800793c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3301      	adds	r3, #1
 8007942:	2202      	movs	r2, #2
 8007944:	701a      	strb	r2, [r3, #0]
      break;
 8007946:	e0f2      	b.n	8007b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	885b      	ldrh	r3, [r3, #2]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b05      	cmp	r3, #5
 8007950:	f200 80ac 	bhi.w	8007aac <USBD_GetDescriptor+0x204>
 8007954:	a201      	add	r2, pc, #4	; (adr r2, 800795c <USBD_GetDescriptor+0xb4>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	08007975 	.word	0x08007975
 8007960:	080079a9 	.word	0x080079a9
 8007964:	080079dd 	.word	0x080079dd
 8007968:	08007a11 	.word	0x08007a11
 800796c:	08007a45 	.word	0x08007a45
 8007970:	08007a79 	.word	0x08007a79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	7c12      	ldrb	r2, [r2, #16]
 800798c:	f107 0108 	add.w	r1, r7, #8
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
 8007994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007996:	e091      	b.n	8007abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fab2 	bl	8007f04 <USBD_CtlError>
            err++;
 80079a0:	7afb      	ldrb	r3, [r7, #11]
 80079a2:	3301      	adds	r3, #1
 80079a4:	72fb      	strb	r3, [r7, #11]
          break;
 80079a6:	e089      	b.n	8007abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00b      	beq.n	80079cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	7c12      	ldrb	r2, [r2, #16]
 80079c0:	f107 0108 	add.w	r1, r7, #8
 80079c4:	4610      	mov	r0, r2
 80079c6:	4798      	blx	r3
 80079c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ca:	e077      	b.n	8007abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa98 	bl	8007f04 <USBD_CtlError>
            err++;
 80079d4:	7afb      	ldrb	r3, [r7, #11]
 80079d6:	3301      	adds	r3, #1
 80079d8:	72fb      	strb	r3, [r7, #11]
          break;
 80079da:	e06f      	b.n	8007abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	7c12      	ldrb	r2, [r2, #16]
 80079f4:	f107 0108 	add.w	r1, r7, #8
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fe:	e05d      	b.n	8007abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa7e 	bl	8007f04 <USBD_CtlError>
            err++;
 8007a08:	7afb      	ldrb	r3, [r7, #11]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0e:	e055      	b.n	8007abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00b      	beq.n	8007a34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	7c12      	ldrb	r2, [r2, #16]
 8007a28:	f107 0108 	add.w	r1, r7, #8
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
 8007a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a32:	e043      	b.n	8007abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa64 	bl	8007f04 <USBD_CtlError>
            err++;
 8007a3c:	7afb      	ldrb	r3, [r7, #11]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	72fb      	strb	r3, [r7, #11]
          break;
 8007a42:	e03b      	b.n	8007abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	7c12      	ldrb	r2, [r2, #16]
 8007a5c:	f107 0108 	add.w	r1, r7, #8
 8007a60:	4610      	mov	r0, r2
 8007a62:	4798      	blx	r3
 8007a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a66:	e029      	b.n	8007abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa4a 	bl	8007f04 <USBD_CtlError>
            err++;
 8007a70:	7afb      	ldrb	r3, [r7, #11]
 8007a72:	3301      	adds	r3, #1
 8007a74:	72fb      	strb	r3, [r7, #11]
          break;
 8007a76:	e021      	b.n	8007abc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	7c12      	ldrb	r2, [r2, #16]
 8007a90:	f107 0108 	add.w	r1, r7, #8
 8007a94:	4610      	mov	r0, r2
 8007a96:	4798      	blx	r3
 8007a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a9a:	e00f      	b.n	8007abc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fa30 	bl	8007f04 <USBD_CtlError>
            err++;
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aaa:	e007      	b.n	8007abc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fa28 	bl	8007f04 <USBD_CtlError>
          err++;
 8007ab4:	7afb      	ldrb	r3, [r7, #11]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007aba:	bf00      	nop
      }
      break;
 8007abc:	e037      	b.n	8007b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	7c1b      	ldrb	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d109      	bne.n	8007ada <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ace:	f107 0208 	add.w	r2, r7, #8
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	4798      	blx	r3
 8007ad6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ad8:	e029      	b.n	8007b2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fa11 	bl	8007f04 <USBD_CtlError>
        err++;
 8007ae2:	7afb      	ldrb	r3, [r7, #11]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ae8:	e021      	b.n	8007b2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	7c1b      	ldrb	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10d      	bne.n	8007b0e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afa:	f107 0208 	add.w	r2, r7, #8
 8007afe:	4610      	mov	r0, r2
 8007b00:	4798      	blx	r3
 8007b02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3301      	adds	r3, #1
 8007b08:	2207      	movs	r2, #7
 8007b0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b0c:	e00f      	b.n	8007b2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f9f7 	bl	8007f04 <USBD_CtlError>
        err++;
 8007b16:	7afb      	ldrb	r3, [r7, #11]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b1c:	e007      	b.n	8007b2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f9ef 	bl	8007f04 <USBD_CtlError>
      err++;
 8007b26:	7afb      	ldrb	r3, [r7, #11]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b2c:	bf00      	nop
  }

  if (err != 0U)
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d11e      	bne.n	8007b72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	88db      	ldrh	r3, [r3, #6]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d016      	beq.n	8007b6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007b3c:	893b      	ldrh	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00e      	beq.n	8007b60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	88da      	ldrh	r2, [r3, #6]
 8007b46:	893b      	ldrh	r3, [r7, #8]
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	bf28      	it	cs
 8007b4c:	4613      	movcs	r3, r2
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b52:	893b      	ldrh	r3, [r7, #8]
 8007b54:	461a      	mov	r2, r3
 8007b56:	68f9      	ldr	r1, [r7, #12]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fa44 	bl	8007fe6 <USBD_CtlSendData>
 8007b5e:	e009      	b.n	8007b74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f9ce 	bl	8007f04 <USBD_CtlError>
 8007b68:	e004      	b.n	8007b74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa95 	bl	800809a <USBD_CtlSendStatus>
 8007b70:	e000      	b.n	8007b74 <USBD_GetDescriptor+0x2cc>
    return;
 8007b72:	bf00      	nop
  }
}
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop

08007b7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	889b      	ldrh	r3, [r3, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d131      	bne.n	8007bf2 <USBD_SetAddress+0x76>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	88db      	ldrh	r3, [r3, #6]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d12d      	bne.n	8007bf2 <USBD_SetAddress+0x76>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	885b      	ldrh	r3, [r3, #2]
 8007b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8007b9c:	d829      	bhi.n	8007bf2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	885b      	ldrh	r3, [r3, #2]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d104      	bne.n	8007bc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f9a3 	bl	8007f04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bbe:	e01d      	b.n	8007bfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	7bfa      	ldrb	r2, [r7, #15]
 8007bc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fedd 	bl	800898c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fa61 	bl	800809a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d004      	beq.n	8007be8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2202      	movs	r2, #2
 8007be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be6:	e009      	b.n	8007bfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf0:	e004      	b.n	8007bfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f985 	bl	8007f04 <USBD_CtlError>
  }
}
 8007bfa:	bf00      	nop
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	885b      	ldrh	r3, [r3, #2]
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	4b4c      	ldr	r3, [pc, #304]	; (8007d4c <USBD_SetConfig+0x148>)
 8007c1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c1c:	4b4b      	ldr	r3, [pc, #300]	; (8007d4c <USBD_SetConfig+0x148>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d905      	bls.n	8007c30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f96c 	bl	8007f04 <USBD_CtlError>
    return USBD_FAIL;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e088      	b.n	8007d42 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d002      	beq.n	8007c42 <USBD_SetConfig+0x3e>
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d025      	beq.n	8007c8c <USBD_SetConfig+0x88>
 8007c40:	e071      	b.n	8007d26 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c42:	4b42      	ldr	r3, [pc, #264]	; (8007d4c <USBD_SetConfig+0x148>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d01c      	beq.n	8007c84 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007c4a:	4b40      	ldr	r3, [pc, #256]	; (8007d4c <USBD_SetConfig+0x148>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c54:	4b3d      	ldr	r3, [pc, #244]	; (8007d4c <USBD_SetConfig+0x148>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff f948 	bl	8006ef0 <USBD_SetClassConfig>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f949 	bl	8007f04 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c72:	e065      	b.n	8007d40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fa10 	bl	800809a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c82:	e05d      	b.n	8007d40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fa08 	bl	800809a <USBD_CtlSendStatus>
      break;
 8007c8a:	e059      	b.n	8007d40 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c8c:	4b2f      	ldr	r3, [pc, #188]	; (8007d4c <USBD_SetConfig+0x148>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d112      	bne.n	8007cba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c9c:	4b2b      	ldr	r3, [pc, #172]	; (8007d4c <USBD_SetConfig+0x148>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ca6:	4b29      	ldr	r3, [pc, #164]	; (8007d4c <USBD_SetConfig+0x148>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff f93b 	bl	8006f28 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f9f1 	bl	800809a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cb8:	e042      	b.n	8007d40 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007cba:	4b24      	ldr	r3, [pc, #144]	; (8007d4c <USBD_SetConfig+0x148>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d02a      	beq.n	8007d1e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff f929 	bl	8006f28 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <USBD_SetConfig+0x148>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ce0:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <USBD_SetConfig+0x148>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff f902 	bl	8006ef0 <USBD_SetClassConfig>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00f      	beq.n	8007d16 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f903 	bl	8007f04 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff f90e 	bl	8006f28 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d14:	e014      	b.n	8007d40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f9bf 	bl	800809a <USBD_CtlSendStatus>
      break;
 8007d1c:	e010      	b.n	8007d40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f9bb 	bl	800809a <USBD_CtlSendStatus>
      break;
 8007d24:	e00c      	b.n	8007d40 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f8eb 	bl	8007f04 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d2e:	4b07      	ldr	r3, [pc, #28]	; (8007d4c <USBD_SetConfig+0x148>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff f8f7 	bl	8006f28 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d3e:	bf00      	nop
  }

  return ret;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	200005aa 	.word	0x200005aa

08007d50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	88db      	ldrh	r3, [r3, #6]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d004      	beq.n	8007d6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f8cd 	bl	8007f04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d6a:	e023      	b.n	8007db4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	dc02      	bgt.n	8007d7e <USBD_GetConfig+0x2e>
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	dc03      	bgt.n	8007d84 <USBD_GetConfig+0x34>
 8007d7c:	e015      	b.n	8007daa <USBD_GetConfig+0x5a>
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d00b      	beq.n	8007d9a <USBD_GetConfig+0x4a>
 8007d82:	e012      	b.n	8007daa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	2201      	movs	r2, #1
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f927 	bl	8007fe6 <USBD_CtlSendData>
        break;
 8007d98:	e00c      	b.n	8007db4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	2201      	movs	r2, #1
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f91f 	bl	8007fe6 <USBD_CtlSendData>
        break;
 8007da8:	e004      	b.n	8007db4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f8a9 	bl	8007f04 <USBD_CtlError>
        break;
 8007db2:	bf00      	nop
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d81e      	bhi.n	8007e12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	88db      	ldrh	r3, [r3, #6]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d004      	beq.n	8007de6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f890 	bl	8007f04 <USBD_CtlError>
        break;
 8007de4:	e01a      	b.n	8007e1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f043 0202 	orr.w	r2, r3, #2
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	330c      	adds	r3, #12
 8007e06:	2202      	movs	r2, #2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f8eb 	bl	8007fe6 <USBD_CtlSendData>
      break;
 8007e10:	e004      	b.n	8007e1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f875 	bl	8007f04 <USBD_CtlError>
      break;
 8007e1a:	bf00      	nop
  }
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	885b      	ldrh	r3, [r3, #2]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d106      	bne.n	8007e44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f92b 	bl	800809a <USBD_CtlSendStatus>
  }
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d80b      	bhi.n	8007e7c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	885b      	ldrh	r3, [r3, #2]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d10c      	bne.n	8007e86 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f910 	bl	800809a <USBD_CtlSendStatus>
      }
      break;
 8007e7a:	e004      	b.n	8007e86 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f840 	bl	8007f04 <USBD_CtlError>
      break;
 8007e84:	e000      	b.n	8007e88 <USBD_ClrFeature+0x3c>
      break;
 8007e86:	bf00      	nop
  }
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	781a      	ldrb	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	781a      	ldrb	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fabb 	bl	8007436 <SWAPBYTE>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff faae 	bl	8007436 <SWAPBYTE>
 8007eda:	4603      	mov	r3, r0
 8007edc:	461a      	mov	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f7ff faa1 	bl	8007436 <SWAPBYTE>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	80da      	strh	r2, [r3, #6]
}
 8007efc:	bf00      	nop
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f0e:	2180      	movs	r1, #128	; 0x80
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fcd1 	bl	80088b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f16:	2100      	movs	r1, #0
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fccd 	bl	80088b8 <USBD_LL_StallEP>
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b086      	sub	sp, #24
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d036      	beq.n	8007faa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f40:	6938      	ldr	r0, [r7, #16]
 8007f42:	f000 f836 	bl	8007fb2 <USBD_GetLen>
 8007f46:	4603      	mov	r3, r0
 8007f48:	3301      	adds	r3, #1
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	4413      	add	r3, r2
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	7812      	ldrb	r2, [r2, #0]
 8007f5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	3301      	adds	r3, #1
 8007f64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	2203      	movs	r2, #3
 8007f6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
 8007f72:	3301      	adds	r3, #1
 8007f74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f76:	e013      	b.n	8007fa0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	7812      	ldrb	r2, [r2, #0]
 8007f82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	3301      	adds	r3, #1
 8007f88:	613b      	str	r3, [r7, #16]
    idx++;
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	4413      	add	r3, r2
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e7      	bne.n	8007f78 <USBD_GetString+0x52>
 8007fa8:	e000      	b.n	8007fac <USBD_GetString+0x86>
    return;
 8007faa:	bf00      	nop
  }
}
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007fc2:	e005      	b.n	8007fd0 <USBD_GetLen+0x1e>
  {
    len++;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1f5      	bne.n	8007fc4 <USBD_GetLen+0x12>
  }

  return len;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	2100      	movs	r1, #0
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 fcdc 	bl	80089ca <USBD_LL_Transmit>

  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	2100      	movs	r1, #0
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 fccb 	bl	80089ca <USBD_LL_Transmit>

  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2203      	movs	r2, #3
 800804e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	2100      	movs	r1, #0
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 fccf 	bl	8008a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	2100      	movs	r1, #0
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 fcbe 	bl	8008a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2204      	movs	r2, #4
 80080a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080aa:	2300      	movs	r3, #0
 80080ac:	2200      	movs	r2, #0
 80080ae:	2100      	movs	r1, #0
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fc8a 	bl	80089ca <USBD_LL_Transmit>

  return USBD_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2205      	movs	r2, #5
 80080cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080d0:	2300      	movs	r3, #0
 80080d2:	2200      	movs	r2, #0
 80080d4:	2100      	movs	r1, #0
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fc98 	bl	8008a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080ec:	2200      	movs	r2, #0
 80080ee:	4912      	ldr	r1, [pc, #72]	; (8008138 <MX_USB_DEVICE_Init+0x50>)
 80080f0:	4812      	ldr	r0, [pc, #72]	; (800813c <MX_USB_DEVICE_Init+0x54>)
 80080f2:	f7fe fe8f 	bl	8006e14 <USBD_Init>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080fc:	f7f9 f808 	bl	8001110 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008100:	490f      	ldr	r1, [pc, #60]	; (8008140 <MX_USB_DEVICE_Init+0x58>)
 8008102:	480e      	ldr	r0, [pc, #56]	; (800813c <MX_USB_DEVICE_Init+0x54>)
 8008104:	f7fe feb6 	bl	8006e74 <USBD_RegisterClass>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800810e:	f7f8 ffff 	bl	8001110 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008112:	490c      	ldr	r1, [pc, #48]	; (8008144 <MX_USB_DEVICE_Init+0x5c>)
 8008114:	4809      	ldr	r0, [pc, #36]	; (800813c <MX_USB_DEVICE_Init+0x54>)
 8008116:	f7fe fe07 	bl	8006d28 <USBD_CDC_RegisterInterface>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008120:	f7f8 fff6 	bl	8001110 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008124:	4805      	ldr	r0, [pc, #20]	; (800813c <MX_USB_DEVICE_Init+0x54>)
 8008126:	f7fe fecc 	bl	8006ec2 <USBD_Start>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008130:	f7f8 ffee 	bl	8001110 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008134:	bf00      	nop
 8008136:	bd80      	pop	{r7, pc}
 8008138:	20000138 	.word	0x20000138
 800813c:	20000960 	.word	0x20000960
 8008140:	20000020 	.word	0x20000020
 8008144:	20000124 	.word	0x20000124

08008148 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800814c:	2200      	movs	r2, #0
 800814e:	4905      	ldr	r1, [pc, #20]	; (8008164 <CDC_Init_FS+0x1c>)
 8008150:	4805      	ldr	r0, [pc, #20]	; (8008168 <CDC_Init_FS+0x20>)
 8008152:	f7fe fdfe 	bl	8006d52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008156:	4905      	ldr	r1, [pc, #20]	; (800816c <CDC_Init_FS+0x24>)
 8008158:	4803      	ldr	r0, [pc, #12]	; (8008168 <CDC_Init_FS+0x20>)
 800815a:	f7fe fe18 	bl	8006d8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800815e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008160:	4618      	mov	r0, r3
 8008162:	bd80      	pop	{r7, pc}
 8008164:	20001430 	.word	0x20001430
 8008168:	20000960 	.word	0x20000960
 800816c:	20000c30 	.word	0x20000c30

08008170 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008174:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008176:	4618      	mov	r0, r3
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
 800818c:	4613      	mov	r3, r2
 800818e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008190:	79fb      	ldrb	r3, [r7, #7]
 8008192:	2b23      	cmp	r3, #35	; 0x23
 8008194:	d84a      	bhi.n	800822c <CDC_Control_FS+0xac>
 8008196:	a201      	add	r2, pc, #4	; (adr r2, 800819c <CDC_Control_FS+0x1c>)
 8008198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819c:	0800822d 	.word	0x0800822d
 80081a0:	0800822d 	.word	0x0800822d
 80081a4:	0800822d 	.word	0x0800822d
 80081a8:	0800822d 	.word	0x0800822d
 80081ac:	0800822d 	.word	0x0800822d
 80081b0:	0800822d 	.word	0x0800822d
 80081b4:	0800822d 	.word	0x0800822d
 80081b8:	0800822d 	.word	0x0800822d
 80081bc:	0800822d 	.word	0x0800822d
 80081c0:	0800822d 	.word	0x0800822d
 80081c4:	0800822d 	.word	0x0800822d
 80081c8:	0800822d 	.word	0x0800822d
 80081cc:	0800822d 	.word	0x0800822d
 80081d0:	0800822d 	.word	0x0800822d
 80081d4:	0800822d 	.word	0x0800822d
 80081d8:	0800822d 	.word	0x0800822d
 80081dc:	0800822d 	.word	0x0800822d
 80081e0:	0800822d 	.word	0x0800822d
 80081e4:	0800822d 	.word	0x0800822d
 80081e8:	0800822d 	.word	0x0800822d
 80081ec:	0800822d 	.word	0x0800822d
 80081f0:	0800822d 	.word	0x0800822d
 80081f4:	0800822d 	.word	0x0800822d
 80081f8:	0800822d 	.word	0x0800822d
 80081fc:	0800822d 	.word	0x0800822d
 8008200:	0800822d 	.word	0x0800822d
 8008204:	0800822d 	.word	0x0800822d
 8008208:	0800822d 	.word	0x0800822d
 800820c:	0800822d 	.word	0x0800822d
 8008210:	0800822d 	.word	0x0800822d
 8008214:	0800822d 	.word	0x0800822d
 8008218:	0800822d 	.word	0x0800822d
 800821c:	0800822d 	.word	0x0800822d
 8008220:	0800822d 	.word	0x0800822d
 8008224:	0800822d 	.word	0x0800822d
 8008228:	0800822d 	.word	0x0800822d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800822c:	bf00      	nop
  }

  return (USBD_OK);
 800822e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	480f      	ldr	r0, [pc, #60]	; (8008288 <CDC_Receive_FS+0x4c>)
 800824a:	f7fe fda0 	bl	8006d8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800824e:	480e      	ldr	r0, [pc, #56]	; (8008288 <CDC_Receive_FS+0x4c>)
 8008250:	f7fe fdb6 	bl	8006dc0 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 8008254:	2240      	movs	r2, #64	; 0x40
 8008256:	2100      	movs	r1, #0
 8008258:	480c      	ldr	r0, [pc, #48]	; (800828c <CDC_Receive_FS+0x50>)
 800825a:	f000 fc81 	bl	8008b60 <memset>
  uint8_t len = (uint8_t)*Len;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	461a      	mov	r2, r3
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	4808      	ldr	r0, [pc, #32]	; (800828c <CDC_Receive_FS+0x50>)
 800826c:	f000 fc6a 	bl	8008b44 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	461a      	mov	r2, r3
 8008274:	2100      	movs	r1, #0
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fc72 	bl	8008b60 <memset>

  return (USBD_OK);
 800827c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000960 	.word	0x20000960
 800828c:	2000091c 	.word	0x2000091c

08008290 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	4613      	mov	r3, r2
 800829c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80082a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	371c      	adds	r7, #28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
	...

080082b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	4603      	mov	r3, r0
 80082bc:	6039      	str	r1, [r7, #0]
 80082be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2212      	movs	r2, #18
 80082c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082c6:	4b03      	ldr	r3, [pc, #12]	; (80082d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	20000154 	.word	0x20000154

080082d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	6039      	str	r1, [r7, #0]
 80082e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2204      	movs	r2, #4
 80082e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082ea:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	20000168 	.word	0x20000168

080082fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	6039      	str	r1, [r7, #0]
 8008306:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d105      	bne.n	800831a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	4907      	ldr	r1, [pc, #28]	; (8008330 <USBD_FS_ProductStrDescriptor+0x34>)
 8008312:	4808      	ldr	r0, [pc, #32]	; (8008334 <USBD_FS_ProductStrDescriptor+0x38>)
 8008314:	f7ff fe07 	bl	8007f26 <USBD_GetString>
 8008318:	e004      	b.n	8008324 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	4904      	ldr	r1, [pc, #16]	; (8008330 <USBD_FS_ProductStrDescriptor+0x34>)
 800831e:	4805      	ldr	r0, [pc, #20]	; (8008334 <USBD_FS_ProductStrDescriptor+0x38>)
 8008320:	f7ff fe01 	bl	8007f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008324:	4b02      	ldr	r3, [pc, #8]	; (8008330 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20001c30 	.word	0x20001c30
 8008334:	08008b94 	.word	0x08008b94

08008338 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	6039      	str	r1, [r7, #0]
 8008342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	4904      	ldr	r1, [pc, #16]	; (8008358 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008348:	4804      	ldr	r0, [pc, #16]	; (800835c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800834a:	f7ff fdec 	bl	8007f26 <USBD_GetString>
  return USBD_StrDesc;
 800834e:	4b02      	ldr	r3, [pc, #8]	; (8008358 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20001c30 	.word	0x20001c30
 800835c:	08008ba8 	.word	0x08008ba8

08008360 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	6039      	str	r1, [r7, #0]
 800836a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	221a      	movs	r2, #26
 8008370:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008372:	f000 f843 	bl	80083fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008376:	4b02      	ldr	r3, [pc, #8]	; (8008380 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008378:	4618      	mov	r0, r3
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	2000016c 	.word	0x2000016c

08008384 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	6039      	str	r1, [r7, #0]
 800838e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d105      	bne.n	80083a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	4907      	ldr	r1, [pc, #28]	; (80083b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800839a:	4808      	ldr	r0, [pc, #32]	; (80083bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800839c:	f7ff fdc3 	bl	8007f26 <USBD_GetString>
 80083a0:	e004      	b.n	80083ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	4904      	ldr	r1, [pc, #16]	; (80083b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083a6:	4805      	ldr	r0, [pc, #20]	; (80083bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80083a8:	f7ff fdbd 	bl	8007f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20001c30 	.word	0x20001c30
 80083bc:	08008bbc 	.word	0x08008bbc

080083c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	6039      	str	r1, [r7, #0]
 80083ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d105      	bne.n	80083de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	4907      	ldr	r1, [pc, #28]	; (80083f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083d6:	4808      	ldr	r0, [pc, #32]	; (80083f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083d8:	f7ff fda5 	bl	8007f26 <USBD_GetString>
 80083dc:	e004      	b.n	80083e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	4904      	ldr	r1, [pc, #16]	; (80083f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083e2:	4805      	ldr	r0, [pc, #20]	; (80083f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083e4:	f7ff fd9f 	bl	8007f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083e8:	4b02      	ldr	r3, [pc, #8]	; (80083f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20001c30 	.word	0x20001c30
 80083f8:	08008bc8 	.word	0x08008bc8

080083fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008402:	4b0f      	ldr	r3, [pc, #60]	; (8008440 <Get_SerialNum+0x44>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008408:	4b0e      	ldr	r3, [pc, #56]	; (8008444 <Get_SerialNum+0x48>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800840e:	4b0e      	ldr	r3, [pc, #56]	; (8008448 <Get_SerialNum+0x4c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4413      	add	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d009      	beq.n	8008436 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008422:	2208      	movs	r2, #8
 8008424:	4909      	ldr	r1, [pc, #36]	; (800844c <Get_SerialNum+0x50>)
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f814 	bl	8008454 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800842c:	2204      	movs	r2, #4
 800842e:	4908      	ldr	r1, [pc, #32]	; (8008450 <Get_SerialNum+0x54>)
 8008430:	68b8      	ldr	r0, [r7, #8]
 8008432:	f000 f80f 	bl	8008454 <IntToUnicode>
  }
}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	1fff7a10 	.word	0x1fff7a10
 8008444:	1fff7a14 	.word	0x1fff7a14
 8008448:	1fff7a18 	.word	0x1fff7a18
 800844c:	2000016e 	.word	0x2000016e
 8008450:	2000017e 	.word	0x2000017e

08008454 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	4613      	mov	r3, r2
 8008460:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008466:	2300      	movs	r3, #0
 8008468:	75fb      	strb	r3, [r7, #23]
 800846a:	e027      	b.n	80084bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	0f1b      	lsrs	r3, r3, #28
 8008470:	2b09      	cmp	r3, #9
 8008472:	d80b      	bhi.n	800848c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	0f1b      	lsrs	r3, r3, #28
 8008478:	b2da      	uxtb	r2, r3
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	4619      	mov	r1, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	440b      	add	r3, r1
 8008484:	3230      	adds	r2, #48	; 0x30
 8008486:	b2d2      	uxtb	r2, r2
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	e00a      	b.n	80084a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	0f1b      	lsrs	r3, r3, #28
 8008490:	b2da      	uxtb	r2, r3
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	4619      	mov	r1, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	440b      	add	r3, r1
 800849c:	3237      	adds	r2, #55	; 0x37
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	011b      	lsls	r3, r3, #4
 80084a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	3301      	adds	r3, #1
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	4413      	add	r3, r2
 80084b2:	2200      	movs	r2, #0
 80084b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
 80084b8:	3301      	adds	r3, #1
 80084ba:	75fb      	strb	r3, [r7, #23]
 80084bc:	7dfa      	ldrb	r2, [r7, #23]
 80084be:	79fb      	ldrb	r3, [r7, #7]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d3d3      	bcc.n	800846c <IntToUnicode+0x18>
  }
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop
 80084c8:	371c      	adds	r7, #28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
	...

080084d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08a      	sub	sp, #40	; 0x28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084dc:	f107 0314 	add.w	r3, r7, #20
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	609a      	str	r2, [r3, #8]
 80084e8:	60da      	str	r2, [r3, #12]
 80084ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084f4:	d13a      	bne.n	800856c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084f6:	2300      	movs	r3, #0
 80084f8:	613b      	str	r3, [r7, #16]
 80084fa:	4b1e      	ldr	r3, [pc, #120]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 8008500:	f043 0301 	orr.w	r3, r3, #1
 8008504:	6313      	str	r3, [r2, #48]	; 0x30
 8008506:	4b1b      	ldr	r3, [pc, #108]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 8008508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	613b      	str	r3, [r7, #16]
 8008510:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008512:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008518:	2302      	movs	r3, #2
 800851a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800851c:	2300      	movs	r3, #0
 800851e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008520:	2303      	movs	r3, #3
 8008522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008524:	230a      	movs	r3, #10
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008528:	f107 0314 	add.w	r3, r7, #20
 800852c:	4619      	mov	r1, r3
 800852e:	4812      	ldr	r0, [pc, #72]	; (8008578 <HAL_PCD_MspInit+0xa4>)
 8008530:	f7f9 fd84 	bl	800203c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008534:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 8008536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008538:	4a0e      	ldr	r2, [pc, #56]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 800853a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853e:	6353      	str	r3, [r2, #52]	; 0x34
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 8008546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008548:	4a0a      	ldr	r2, [pc, #40]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 800854a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800854e:	6453      	str	r3, [r2, #68]	; 0x44
 8008550:	4b08      	ldr	r3, [pc, #32]	; (8008574 <HAL_PCD_MspInit+0xa0>)
 8008552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800855c:	2200      	movs	r2, #0
 800855e:	2100      	movs	r1, #0
 8008560:	2043      	movs	r0, #67	; 0x43
 8008562:	f7f9 fd34 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008566:	2043      	movs	r0, #67	; 0x43
 8008568:	f7f9 fd4d 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800856c:	bf00      	nop
 800856e:	3728      	adds	r7, #40	; 0x28
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	40023800 	.word	0x40023800
 8008578:	40020000 	.word	0x40020000

0800857c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe fce0 	bl	8006f58 <USBD_LL_SetupStage>
}
 8008598:	bf00      	nop
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80085b2:	78fa      	ldrb	r2, [r7, #3]
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	1a9b      	subs	r3, r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	440b      	add	r3, r1
 80085c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	4619      	mov	r1, r3
 80085ca:	f7fe fd1a 	bl	8007002 <USBD_LL_DataOutStage>
}
 80085ce:	bf00      	nop
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4613      	mov	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	3348      	adds	r3, #72	; 0x48
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	4619      	mov	r1, r3
 80085fe:	f7fe fd63 	bl	80070c8 <USBD_LL_DataInStage>
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fe77 	bl	800730c <USBD_LL_SOF>
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800862e:	2301      	movs	r3, #1
 8008630:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
 800863e:	e008      	b.n	8008652 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d102      	bne.n	800864e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008648:	2301      	movs	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
 800864c:	e001      	b.n	8008652 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800864e:	f7f8 fd5f 	bl	8001110 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008658:	7bfa      	ldrb	r2, [r7, #15]
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fe17 	bl	8007290 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe fdc3 	bl	80071f4 <USBD_LL_Reset>
}
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe fe12 	bl	80072b0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6812      	ldr	r2, [r2, #0]
 800869a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800869e:	f043 0301 	orr.w	r3, r3, #1
 80086a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d005      	beq.n	80086b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <HAL_PCD_SuspendCallback+0x48>)
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	4a03      	ldr	r2, [pc, #12]	; (80086c0 <HAL_PCD_SuspendCallback+0x48>)
 80086b2:	f043 0306 	orr.w	r3, r3, #6
 80086b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	e000ed00 	.word	0xe000ed00

080086c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fe02 	bl	80072dc <USBD_LL_Resume>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fe50 	bl	800739c <USBD_LL_IsoOUTIncomplete>
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fe18 	bl	8007350 <USBD_LL_IsoINIncomplete>
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fe56 	bl	80073e8 <USBD_LL_DevConnected>
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe fe53 	bl	80073fe <USBD_LL_DevDisconnected>
}
 8008758:	bf00      	nop
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d13c      	bne.n	80087ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008770:	4a20      	ldr	r2, [pc, #128]	; (80087f4 <USBD_LL_Init+0x94>)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <USBD_LL_Init+0x94>)
 800877c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008780:	4b1c      	ldr	r3, [pc, #112]	; (80087f4 <USBD_LL_Init+0x94>)
 8008782:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008786:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008788:	4b1a      	ldr	r3, [pc, #104]	; (80087f4 <USBD_LL_Init+0x94>)
 800878a:	2204      	movs	r2, #4
 800878c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800878e:	4b19      	ldr	r3, [pc, #100]	; (80087f4 <USBD_LL_Init+0x94>)
 8008790:	2202      	movs	r2, #2
 8008792:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008794:	4b17      	ldr	r3, [pc, #92]	; (80087f4 <USBD_LL_Init+0x94>)
 8008796:	2200      	movs	r2, #0
 8008798:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800879a:	4b16      	ldr	r3, [pc, #88]	; (80087f4 <USBD_LL_Init+0x94>)
 800879c:	2202      	movs	r2, #2
 800879e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80087a0:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <USBD_LL_Init+0x94>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80087a6:	4b13      	ldr	r3, [pc, #76]	; (80087f4 <USBD_LL_Init+0x94>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087ac:	4b11      	ldr	r3, [pc, #68]	; (80087f4 <USBD_LL_Init+0x94>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80087b2:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <USBD_LL_Init+0x94>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087b8:	4b0e      	ldr	r3, [pc, #56]	; (80087f4 <USBD_LL_Init+0x94>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087be:	480d      	ldr	r0, [pc, #52]	; (80087f4 <USBD_LL_Init+0x94>)
 80087c0:	f7fa ff01 	bl	80035c6 <HAL_PCD_Init>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80087ca:	f7f8 fca1 	bl	8001110 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087ce:	2180      	movs	r1, #128	; 0x80
 80087d0:	4808      	ldr	r0, [pc, #32]	; (80087f4 <USBD_LL_Init+0x94>)
 80087d2:	f7fc f85e 	bl	8004892 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087d6:	2240      	movs	r2, #64	; 0x40
 80087d8:	2100      	movs	r1, #0
 80087da:	4806      	ldr	r0, [pc, #24]	; (80087f4 <USBD_LL_Init+0x94>)
 80087dc:	f7fc f812 	bl	8004804 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087e0:	2280      	movs	r2, #128	; 0x80
 80087e2:	2101      	movs	r1, #1
 80087e4:	4803      	ldr	r0, [pc, #12]	; (80087f4 <USBD_LL_Init+0x94>)
 80087e6:	f7fc f80d 	bl	8004804 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20001e30 	.word	0x20001e30

080087f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800880e:	4618      	mov	r0, r3
 8008810:	f7fa fff6 	bl	8003800 <HAL_PCD_Start>
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	4618      	mov	r0, r3
 800881c:	f000 f942 	bl	8008aa4 <USBD_Get_USB_Status>
 8008820:	4603      	mov	r3, r0
 8008822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008824:	7bbb      	ldrb	r3, [r7, #14]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	4608      	mov	r0, r1
 8008838:	4611      	mov	r1, r2
 800883a:	461a      	mov	r2, r3
 800883c:	4603      	mov	r3, r0
 800883e:	70fb      	strb	r3, [r7, #3]
 8008840:	460b      	mov	r3, r1
 8008842:	70bb      	strb	r3, [r7, #2]
 8008844:	4613      	mov	r3, r2
 8008846:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008856:	78bb      	ldrb	r3, [r7, #2]
 8008858:	883a      	ldrh	r2, [r7, #0]
 800885a:	78f9      	ldrb	r1, [r7, #3]
 800885c:	f7fb fbda 	bl	8004014 <HAL_PCD_EP_Open>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f91c 	bl	8008aa4 <USBD_Get_USB_Status>
 800886c:	4603      	mov	r3, r0
 800886e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008870:	7bbb      	ldrb	r3, [r7, #14]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f7fb fc23 	bl	80040e4 <HAL_PCD_EP_Close>
 800889e:	4603      	mov	r3, r0
 80088a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 f8fd 	bl	8008aa4 <USBD_Get_USB_Status>
 80088aa:	4603      	mov	r3, r0
 80088ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088d2:	78fa      	ldrb	r2, [r7, #3]
 80088d4:	4611      	mov	r1, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fb fcfb 	bl	80042d2 <HAL_PCD_EP_SetStall>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f8de 	bl	8008aa4 <USBD_Get_USB_Status>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008910:	78fa      	ldrb	r2, [r7, #3]
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f7fb fd40 	bl	800439a <HAL_PCD_EP_ClrStall>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	4618      	mov	r0, r3
 8008922:	f000 f8bf 	bl	8008aa4 <USBD_Get_USB_Status>
 8008926:	4603      	mov	r3, r0
 8008928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800892a:	7bbb      	ldrb	r3, [r7, #14]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008946:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800894c:	2b00      	cmp	r3, #0
 800894e:	da0b      	bge.n	8008968 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008956:	68f9      	ldr	r1, [r7, #12]
 8008958:	4613      	mov	r3, r2
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	1a9b      	subs	r3, r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	333e      	adds	r3, #62	; 0x3e
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	e00b      	b.n	8008980 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800896e:	68f9      	ldr	r1, [r7, #12]
 8008970:	4613      	mov	r3, r2
 8008972:	00db      	lsls	r3, r3, #3
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800897e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089a6:	78fa      	ldrb	r2, [r7, #3]
 80089a8:	4611      	mov	r1, r2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fb fb0d 	bl	8003fca <HAL_PCD_SetAddress>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f874 	bl	8008aa4 <USBD_Get_USB_Status>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b086      	sub	sp, #24
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
 80089d6:	460b      	mov	r3, r1
 80089d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80089e8:	7af9      	ldrb	r1, [r7, #11]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	f7fb fc26 	bl	800423e <HAL_PCD_EP_Transmit>
 80089f2:	4603      	mov	r3, r0
 80089f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 f853 	bl	8008aa4 <USBD_Get_USB_Status>
 80089fe:	4603      	mov	r3, r0
 8008a00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a02:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	607a      	str	r2, [r7, #4]
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a2a:	7af9      	ldrb	r1, [r7, #11]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	f7fb fba2 	bl	8004178 <HAL_PCD_EP_Receive>
 8008a34:	4603      	mov	r3, r0
 8008a36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f832 	bl	8008aa4 <USBD_Get_USB_Status>
 8008a40:	4603      	mov	r3, r0
 8008a42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a44:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a60:	78fa      	ldrb	r2, [r7, #3]
 8008a62:	4611      	mov	r1, r2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fb fbd2 	bl	800420e <HAL_PCD_EP_GetRxCount>
 8008a6a:	4603      	mov	r3, r0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a7c:	4b03      	ldr	r3, [pc, #12]	; (8008a8c <USBD_static_malloc+0x18>)
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	200005ac 	.word	0x200005ac

08008a90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]

}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d817      	bhi.n	8008ae8 <USBD_Get_USB_Status+0x44>
 8008ab8:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <USBD_Get_USB_Status+0x1c>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008ad1 	.word	0x08008ad1
 8008ac4:	08008ad7 	.word	0x08008ad7
 8008ac8:	08008add 	.word	0x08008add
 8008acc:	08008ae3 	.word	0x08008ae3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad4:	e00b      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8008ada:	e008      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008adc:	2301      	movs	r3, #1
 8008ade:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae0:	e005      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae6:	e002      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	73fb      	strb	r3, [r7, #15]
    break;
 8008aec:	bf00      	nop
  }
  return usb_status;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <__libc_init_array>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	4d0d      	ldr	r5, [pc, #52]	; (8008b34 <__libc_init_array+0x38>)
 8008b00:	4c0d      	ldr	r4, [pc, #52]	; (8008b38 <__libc_init_array+0x3c>)
 8008b02:	1b64      	subs	r4, r4, r5
 8008b04:	10a4      	asrs	r4, r4, #2
 8008b06:	2600      	movs	r6, #0
 8008b08:	42a6      	cmp	r6, r4
 8008b0a:	d109      	bne.n	8008b20 <__libc_init_array+0x24>
 8008b0c:	4d0b      	ldr	r5, [pc, #44]	; (8008b3c <__libc_init_array+0x40>)
 8008b0e:	4c0c      	ldr	r4, [pc, #48]	; (8008b40 <__libc_init_array+0x44>)
 8008b10:	f000 f82e 	bl	8008b70 <_init>
 8008b14:	1b64      	subs	r4, r4, r5
 8008b16:	10a4      	asrs	r4, r4, #2
 8008b18:	2600      	movs	r6, #0
 8008b1a:	42a6      	cmp	r6, r4
 8008b1c:	d105      	bne.n	8008b2a <__libc_init_array+0x2e>
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b24:	4798      	blx	r3
 8008b26:	3601      	adds	r6, #1
 8008b28:	e7ee      	b.n	8008b08 <__libc_init_array+0xc>
 8008b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2e:	4798      	blx	r3
 8008b30:	3601      	adds	r6, #1
 8008b32:	e7f2      	b.n	8008b1a <__libc_init_array+0x1e>
 8008b34:	08009954 	.word	0x08009954
 8008b38:	08009954 	.word	0x08009954
 8008b3c:	08009954 	.word	0x08009954
 8008b40:	08009958 	.word	0x08009958

08008b44 <memcpy>:
 8008b44:	440a      	add	r2, r1
 8008b46:	4291      	cmp	r1, r2
 8008b48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b4c:	d100      	bne.n	8008b50 <memcpy+0xc>
 8008b4e:	4770      	bx	lr
 8008b50:	b510      	push	{r4, lr}
 8008b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b5a:	4291      	cmp	r1, r2
 8008b5c:	d1f9      	bne.n	8008b52 <memcpy+0xe>
 8008b5e:	bd10      	pop	{r4, pc}

08008b60 <memset>:
 8008b60:	4402      	add	r2, r0
 8008b62:	4603      	mov	r3, r0
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d100      	bne.n	8008b6a <memset+0xa>
 8008b68:	4770      	bx	lr
 8008b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b6e:	e7f9      	b.n	8008b64 <memset+0x4>

08008b70 <_init>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	bf00      	nop
 8008b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b76:	bc08      	pop	{r3}
 8008b78:	469e      	mov	lr, r3
 8008b7a:	4770      	bx	lr

08008b7c <_fini>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr
