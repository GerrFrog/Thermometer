
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a394  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  0800a51c  0800a51c  0001a51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2e0  0800b2e0  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2e0  0800b2e0  0001b2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2e8  0800b2e8  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2e8  0800b2e8  0001b2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2ec  0800b2ec  0001b2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800b2f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002021c  2**0
                  CONTENTS
 10 .bss          000020f4  20000220  20000220  00020220  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002314  20002314  00020220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020f6f  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040be  00000000  00000000  000411bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00045280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f28  00000000  00000000  00046318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000065fb  00000000  00000000  00047240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d63  00000000  00000000  0004d83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c906b  00000000  00000000  0006459e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012d609  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004844  00000000  00000000  0012d65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000220 	.word	0x20000220
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a504 	.word	0x0800a504

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000224 	.word	0x20000224
 80001c4:	0800a504 	.word	0x0800a504

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <float_temp_to_char_temp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#if defined(MLX90614) || defined(MLX90632)
void float_temp_to_char_temp(double digit, char* arr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000e92:	6078      	str	r0, [r7, #4]
    int l_digit = digit * 100.0;
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	4b3f      	ldr	r3, [pc, #252]	; (8000f98 <float_temp_to_char_temp+0x110>)
 8000e9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e9e:	f7ff fb4f 	bl	8000540 <__aeabi_dmul>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fdf9 	bl	8000aa0 <__aeabi_d2iz>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	617b      	str	r3, [r7, #20]
    arr[7] = '\0';
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3307      	adds	r3, #7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
    arr[6] = '\0';
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3306      	adds	r3, #6
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
    arr[5] = '\0';
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3305      	adds	r3, #5
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
    arr[4] = l_digit % 10 + '0';
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000ece:	fb83 1302 	smull	r1, r3, r3, r2
 8000ed2:	1099      	asrs	r1, r3, #2
 8000ed4:	17d3      	asrs	r3, r2, #31
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	440b      	add	r3, r1
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	1ad1      	subs	r1, r2, r3
 8000ee2:	b2ca      	uxtb	r2, r1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	3230      	adds	r2, #48	; 0x30
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef6:	1092      	asrs	r2, r2, #2
 8000ef8:	17db      	asrs	r3, r3, #31
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    arr[3] = l_digit % 10 + '0';
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f02:	fb83 1302 	smull	r1, r3, r3, r2
 8000f06:	1099      	asrs	r1, r3, #2
 8000f08:	17d3      	asrs	r3, r2, #31
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	1ad1      	subs	r1, r2, r3
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3303      	adds	r3, #3
 8000f1c:	3230      	adds	r2, #48	; 0x30
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f26:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2a:	1092      	asrs	r2, r2, #2
 8000f2c:	17db      	asrs	r3, r3, #31
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
    arr[2] = ',';
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3302      	adds	r3, #2
 8000f36:	222c      	movs	r2, #44	; 0x2c
 8000f38:	701a      	strb	r2, [r3, #0]
    arr[1] = l_digit % 10 + '0';
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f3e:	fb83 1302 	smull	r1, r3, r3, r2
 8000f42:	1099      	asrs	r1, r3, #2
 8000f44:	17d3      	asrs	r3, r2, #31
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	460b      	mov	r3, r1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	1ad1      	subs	r1, r2, r3
 8000f52:	b2ca      	uxtb	r2, r1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	3230      	adds	r2, #48	; 0x30
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	701a      	strb	r2, [r3, #0]
    l_digit /= 10;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f62:	fb82 1203 	smull	r1, r2, r2, r3
 8000f66:	1092      	asrs	r2, r2, #2
 8000f68:	17db      	asrs	r3, r3, #31
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    arr[0] = l_digit % 10 + '0';
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <float_temp_to_char_temp+0x114>)
 8000f72:	fb83 1302 	smull	r1, r3, r3, r2
 8000f76:	1099      	asrs	r1, r3, #2
 8000f78:	17d3      	asrs	r3, r2, #31
 8000f7a:	1ac9      	subs	r1, r1, r3
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	1ad1      	subs	r1, r2, r3
 8000f86:	b2cb      	uxtb	r3, r1
 8000f88:	3330      	adds	r3, #48	; 0x30
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	701a      	strb	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40590000 	.word	0x40590000
 8000f9c:	66666667 	.word	0x66666667

08000fa0 <mlx90632_read_eeprom>:
#endif

#if defined(MLX90632)
static int mlx90632_read_eeprom(int32_t *PR, int32_t *PG, int32_t *PO, int32_t *PT, int32_t *Ea, int32_t *Eb, int32_t *Fa, int32_t *Fb, int32_t *Ga, int16_t *Gb, int16_t *Ha, int16_t *Hb, int16_t *Ka, I2C_HandleTypeDef hi2c)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09a      	sub	sp, #104	; 0x68
 8000fa4:	af14      	add	r7, sp, #80	; 0x50
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
    int32_t ret;
    ret = mlx90632_i2c_read32(MLX90632_EE_P_R, (uint32_t *) PR, hi2c);
 8000fae:	4668      	mov	r0, sp
 8000fb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb4:	224c      	movs	r2, #76	; 0x4c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f009 f9a6 	bl	800a308 <memcpy>
 8000fbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fc0:	cb0c      	ldmia	r3, {r2, r3}
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f242 400c 	movw	r0, #9228	; 0x240c
 8000fc8:	f000 fd83 	bl	8001ad2 <mlx90632_i2c_read32>
 8000fcc:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	da01      	bge.n	8000fd8 <mlx90632_read_eeprom+0x38>
        return ret;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	e0fc      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_G, (uint32_t *) PG, hi2c);
 8000fd8:	4668      	mov	r0, sp
 8000fda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fde:	224c      	movs	r2, #76	; 0x4c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f009 f991 	bl	800a308 <memcpy>
 8000fe6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fea:	cb0c      	ldmia	r3, {r2, r3}
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	f242 400e 	movw	r0, #9230	; 0x240e
 8000ff2:	f000 fd6e 	bl	8001ad2 <mlx90632_i2c_read32>
 8000ff6:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da01      	bge.n	8001002 <mlx90632_read_eeprom+0x62>
        return ret;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	e0e7      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_O, (uint32_t *) PO, hi2c);
 8001002:	4668      	mov	r0, sp
 8001004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001008:	224c      	movs	r2, #76	; 0x4c
 800100a:	4619      	mov	r1, r3
 800100c:	f009 f97c 	bl	800a308 <memcpy>
 8001010:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001014:	cb0c      	ldmia	r3, {r2, r3}
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f242 4012 	movw	r0, #9234	; 0x2412
 800101c:	f000 fd59 	bl	8001ad2 <mlx90632_i2c_read32>
 8001020:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	da01      	bge.n	800102c <mlx90632_read_eeprom+0x8c>
        return ret;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	e0d2      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_P_T, (uint32_t *) PT, hi2c);
 800102c:	4668      	mov	r0, sp
 800102e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001032:	224c      	movs	r2, #76	; 0x4c
 8001034:	4619      	mov	r1, r3
 8001036:	f009 f967 	bl	800a308 <memcpy>
 800103a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800103e:	cb0c      	ldmia	r3, {r2, r3}
 8001040:	6839      	ldr	r1, [r7, #0]
 8001042:	f242 4010 	movw	r0, #9232	; 0x2410
 8001046:	f000 fd44 	bl	8001ad2 <mlx90632_i2c_read32>
 800104a:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	da01      	bge.n	8001056 <mlx90632_read_eeprom+0xb6>
        return ret;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	e0bd      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ea, (uint32_t *) Ea, hi2c);
 8001056:	4668      	mov	r0, sp
 8001058:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800105c:	224c      	movs	r2, #76	; 0x4c
 800105e:	4619      	mov	r1, r3
 8001060:	f009 f952 	bl	800a308 <memcpy>
 8001064:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001068:	cb0c      	ldmia	r3, {r2, r3}
 800106a:	6a39      	ldr	r1, [r7, #32]
 800106c:	f242 4024 	movw	r0, #9252	; 0x2424
 8001070:	f000 fd2f 	bl	8001ad2 <mlx90632_i2c_read32>
 8001074:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	da01      	bge.n	8001080 <mlx90632_read_eeprom+0xe0>
        return ret;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	e0a8      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Eb, (uint32_t *) Eb, hi2c);
 8001080:	4668      	mov	r0, sp
 8001082:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001086:	224c      	movs	r2, #76	; 0x4c
 8001088:	4619      	mov	r1, r3
 800108a:	f009 f93d 	bl	800a308 <memcpy>
 800108e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001092:	cb0c      	ldmia	r3, {r2, r3}
 8001094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001096:	f242 4026 	movw	r0, #9254	; 0x2426
 800109a:	f000 fd1a 	bl	8001ad2 <mlx90632_i2c_read32>
 800109e:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	da01      	bge.n	80010aa <mlx90632_read_eeprom+0x10a>
        return ret;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	e093      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fa, (uint32_t *) Fa, hi2c);
 80010aa:	4668      	mov	r0, sp
 80010ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b0:	224c      	movs	r2, #76	; 0x4c
 80010b2:	4619      	mov	r1, r3
 80010b4:	f009 f928 	bl	800a308 <memcpy>
 80010b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010bc:	cb0c      	ldmia	r3, {r2, r3}
 80010be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010c0:	f242 4028 	movw	r0, #9256	; 0x2428
 80010c4:	f000 fd05 	bl	8001ad2 <mlx90632_i2c_read32>
 80010c8:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	da01      	bge.n	80010d4 <mlx90632_read_eeprom+0x134>
        return ret;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	e07e      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Fb, (uint32_t *) Fb, hi2c);
 80010d4:	4668      	mov	r0, sp
 80010d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010da:	224c      	movs	r2, #76	; 0x4c
 80010dc:	4619      	mov	r1, r3
 80010de:	f009 f913 	bl	800a308 <memcpy>
 80010e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010e6:	cb0c      	ldmia	r3, {r2, r3}
 80010e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010ea:	f242 402a 	movw	r0, #9258	; 0x242a
 80010ee:	f000 fcf0 	bl	8001ad2 <mlx90632_i2c_read32>
 80010f2:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da01      	bge.n	80010fe <mlx90632_read_eeprom+0x15e>
        return ret;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	e069      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read32(MLX90632_EE_Ga, (uint32_t *) Ga, hi2c);
 80010fe:	4668      	mov	r0, sp
 8001100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001104:	224c      	movs	r2, #76	; 0x4c
 8001106:	4619      	mov	r1, r3
 8001108:	f009 f8fe 	bl	800a308 <memcpy>
 800110c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001110:	cb0c      	ldmia	r3, {r2, r3}
 8001112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001114:	f242 402c 	movw	r0, #9260	; 0x242c
 8001118:	f000 fcdb 	bl	8001ad2 <mlx90632_i2c_read32>
 800111c:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2b00      	cmp	r3, #0
 8001122:	da01      	bge.n	8001128 <mlx90632_read_eeprom+0x188>
        return ret;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	e054      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Gb, (uint16_t *) Gb, hi2c);
 8001128:	4668      	mov	r0, sp
 800112a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800112e:	224c      	movs	r2, #76	; 0x4c
 8001130:	4619      	mov	r1, r3
 8001132:	f009 f8e9 	bl	800a308 <memcpy>
 8001136:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800113a:	cb0c      	ldmia	r3, {r2, r3}
 800113c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800113e:	f242 402e 	movw	r0, #9262	; 0x242e
 8001142:	f000 fc99 	bl	8001a78 <mlx90632_i2c_read>
 8001146:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b00      	cmp	r3, #0
 800114c:	da01      	bge.n	8001152 <mlx90632_read_eeprom+0x1b2>
        return ret;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	e03f      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Ha, (uint16_t *) Ha, hi2c);
 8001152:	4668      	mov	r0, sp
 8001154:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001158:	224c      	movs	r2, #76	; 0x4c
 800115a:	4619      	mov	r1, r3
 800115c:	f009 f8d4 	bl	800a308 <memcpy>
 8001160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001164:	cb0c      	ldmia	r3, {r2, r3}
 8001166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001168:	f242 4081 	movw	r0, #9345	; 0x2481
 800116c:	f000 fc84 	bl	8001a78 <mlx90632_i2c_read>
 8001170:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	da01      	bge.n	800117c <mlx90632_read_eeprom+0x1dc>
        return ret;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	e02a      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Hb, (uint16_t *) Hb, hi2c);
 800117c:	4668      	mov	r0, sp
 800117e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001182:	224c      	movs	r2, #76	; 0x4c
 8001184:	4619      	mov	r1, r3
 8001186:	f009 f8bf 	bl	800a308 <memcpy>
 800118a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800118e:	cb0c      	ldmia	r3, {r2, r3}
 8001190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001192:	f242 4082 	movw	r0, #9346	; 0x2482
 8001196:	f000 fc6f 	bl	8001a78 <mlx90632_i2c_read>
 800119a:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	da01      	bge.n	80011a6 <mlx90632_read_eeprom+0x206>
        return ret;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	e015      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    ret = mlx90632_i2c_read(MLX90632_EE_Ka, (uint16_t *) Ka, hi2c);
 80011a6:	4668      	mov	r0, sp
 80011a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ac:	224c      	movs	r2, #76	; 0x4c
 80011ae:	4619      	mov	r1, r3
 80011b0:	f009 f8aa 	bl	800a308 <memcpy>
 80011b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011b8:	cb0c      	ldmia	r3, {r2, r3}
 80011ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80011bc:	f242 402f 	movw	r0, #9263	; 0x242f
 80011c0:	f000 fc5a 	bl	8001a78 <mlx90632_i2c_read>
 80011c4:	6178      	str	r0, [r7, #20]
    if(ret < 0)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da01      	bge.n	80011d0 <mlx90632_read_eeprom+0x230>
        return ret;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	e000      	b.n	80011d2 <mlx90632_read_eeprom+0x232>
    return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	0000      	movs	r0, r0
 80011dc:	0000      	movs	r0, r0
	...

080011e0 <mlx90632_start_extended_mode>:
#	    endif
    }
}

void mlx90632_start_extended_mode()
{
 80011e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011e4:	ed2d 8b02 	vpush	{d8}
 80011e8:	b0a1      	sub	sp, #132	; 0x84
 80011ea:	af1e      	add	r7, sp, #120	; 0x78
	HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, 0x3a << 1, 1, 100);
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	2201      	movs	r2, #1
 80011f0:	2174      	movs	r1, #116	; 0x74
 80011f2:	48a7      	ldr	r0, [pc, #668]	; (8001490 <mlx90632_start_extended_mode+0x2b0>)
 80011f4:	f003 f8b8 	bl	8004368 <HAL_I2C_IsDeviceReady>
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
	if (result == HAL_OK) {
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d120      	bne.n	8001244 <mlx90632_start_extended_mode+0x64>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001206:	48a3      	ldr	r0, [pc, #652]	; (8001494 <mlx90632_start_extended_mode+0x2b4>)
 8001208:	f002 fb31 	bl	800386e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800120c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001210:	f002 f82a 	bl	8003268 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001218:	489e      	ldr	r0, [pc, #632]	; (8001494 <mlx90632_start_extended_mode+0x2b4>)
 800121a:	f002 fb28 	bl	800386e <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800121e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001222:	f002 f821 	bl	8003268 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122a:	489a      	ldr	r0, [pc, #616]	; (8001494 <mlx90632_start_extended_mode+0x2b4>)
 800122c:	f002 fb1f 	bl	800386e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001234:	f002 f818 	bl	8003268 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123c:	4895      	ldr	r0, [pc, #596]	; (8001494 <mlx90632_start_extended_mode+0x2b4>)
 800123e:	f002 fb16 	bl	800386e <HAL_GPIO_TogglePin>
 8001242:	e01f      	b.n	8001284 <mlx90632_start_extended_mode+0xa4>
	} else {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001248:	4892      	ldr	r0, [pc, #584]	; (8001494 <mlx90632_start_extended_mode+0x2b4>)
 800124a:	f002 fb10 	bl	800386e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800124e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001252:	f002 f809 	bl	8003268 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800125a:	488e      	ldr	r0, [pc, #568]	; (8001494 <mlx90632_start_extended_mode+0x2b4>)
 800125c:	f002 fb07 	bl	800386e <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001260:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001264:	f002 f800 	bl	8003268 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001268:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126c:	4889      	ldr	r0, [pc, #548]	; (8001494 <mlx90632_start_extended_mode+0x2b4>)
 800126e:	f002 fafe 	bl	800386e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001276:	f001 fff7 	bl	8003268 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800127a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127e:	4885      	ldr	r0, [pc, #532]	; (8001494 <mlx90632_start_extended_mode+0x2b4>)
 8001280:	f002 faf5 	bl	800386e <HAL_GPIO_TogglePin>
	}

    mlx90632_set_meas_type(MLX90632_MTYP_EXTENDED, hi2c1);
 8001284:	4c82      	ldr	r4, [pc, #520]	; (8001490 <mlx90632_start_extended_mode+0x2b0>)
 8001286:	4668      	mov	r0, sp
 8001288:	f104 030c 	add.w	r3, r4, #12
 800128c:	2248      	movs	r2, #72	; 0x48
 800128e:	4619      	mov	r1, r3
 8001290:	f009 f83a 	bl	800a308 <memcpy>
 8001294:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001298:	2011      	movs	r0, #17
 800129a:	f001 f92f 	bl	80024fc <mlx90632_set_meas_type>

    mlx90632_read_eeprom(&PR, &PG, &PO, &PT, &Ea, &Eb, &Fa, &Fb, &Ga, &Gb, &Ha, &Hb, &Ka, hi2c1);
 800129e:	4a7c      	ldr	r2, [pc, #496]	; (8001490 <mlx90632_start_extended_mode+0x2b0>)
 80012a0:	ab09      	add	r3, sp, #36	; 0x24
 80012a2:	4611      	mov	r1, r2
 80012a4:	2254      	movs	r2, #84	; 0x54
 80012a6:	4618      	mov	r0, r3
 80012a8:	f009 f82e 	bl	800a308 <memcpy>
 80012ac:	4b7a      	ldr	r3, [pc, #488]	; (8001498 <mlx90632_start_extended_mode+0x2b8>)
 80012ae:	9308      	str	r3, [sp, #32]
 80012b0:	4b7a      	ldr	r3, [pc, #488]	; (800149c <mlx90632_start_extended_mode+0x2bc>)
 80012b2:	9307      	str	r3, [sp, #28]
 80012b4:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <mlx90632_start_extended_mode+0x2c0>)
 80012b6:	9306      	str	r3, [sp, #24]
 80012b8:	4b7a      	ldr	r3, [pc, #488]	; (80014a4 <mlx90632_start_extended_mode+0x2c4>)
 80012ba:	9305      	str	r3, [sp, #20]
 80012bc:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <mlx90632_start_extended_mode+0x2c8>)
 80012be:	9304      	str	r3, [sp, #16]
 80012c0:	4b7a      	ldr	r3, [pc, #488]	; (80014ac <mlx90632_start_extended_mode+0x2cc>)
 80012c2:	9303      	str	r3, [sp, #12]
 80012c4:	4b7a      	ldr	r3, [pc, #488]	; (80014b0 <mlx90632_start_extended_mode+0x2d0>)
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <mlx90632_start_extended_mode+0x2d4>)
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	4b7a      	ldr	r3, [pc, #488]	; (80014b8 <mlx90632_start_extended_mode+0x2d8>)
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	4b7a      	ldr	r3, [pc, #488]	; (80014bc <mlx90632_start_extended_mode+0x2dc>)
 80012d2:	4a7b      	ldr	r2, [pc, #492]	; (80014c0 <mlx90632_start_extended_mode+0x2e0>)
 80012d4:	497b      	ldr	r1, [pc, #492]	; (80014c4 <mlx90632_start_extended_mode+0x2e4>)
 80012d6:	487c      	ldr	r0, [pc, #496]	; (80014c8 <mlx90632_start_extended_mode+0x2e8>)
 80012d8:	f7ff fe62 	bl	8000fa0 <mlx90632_read_eeprom>

    while(1)
    {
    	mlx90632_set_emissivity(0.5);
 80012dc:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 8001488 <mlx90632_start_extended_mode+0x2a8>
 80012e0:	f000 fb36 	bl	8001950 <mlx90632_set_emissivity>

    	mlx90632_read_temp_raw_extended(&ambient_new_raw, &ambient_old_raw, &object_new_raw, hi2c1);
 80012e4:	4c6a      	ldr	r4, [pc, #424]	; (8001490 <mlx90632_start_extended_mode+0x2b0>)
 80012e6:	4668      	mov	r0, sp
 80012e8:	1d23      	adds	r3, r4, #4
 80012ea:	2250      	movs	r2, #80	; 0x50
 80012ec:	4619      	mov	r1, r3
 80012ee:	f009 f80b 	bl	800a308 <memcpy>
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	4a75      	ldr	r2, [pc, #468]	; (80014cc <mlx90632_start_extended_mode+0x2ec>)
 80012f6:	4976      	ldr	r1, [pc, #472]	; (80014d0 <mlx90632_start_extended_mode+0x2f0>)
 80012f8:	4876      	ldr	r0, [pc, #472]	; (80014d4 <mlx90632_start_extended_mode+0x2f4>)
 80012fa:	f000 fd6c 	bl	8001dd6 <mlx90632_read_temp_raw_extended>

        ambient = mlx90632_calc_temp_ambient_extended(ambient_new_raw, ambient_old_raw,
 80012fe:	4b75      	ldr	r3, [pc, #468]	; (80014d4 <mlx90632_start_extended_mode+0x2f4>)
 8001300:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001304:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <mlx90632_start_extended_mode+0x2f0>)
 8001306:	f9b3 4000 	ldrsh.w	r4, [r3]
 800130a:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <mlx90632_start_extended_mode+0x2dc>)
 800130c:	681d      	ldr	r5, [r3, #0]
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <mlx90632_start_extended_mode+0x2e8>)
 8001310:	681e      	ldr	r6, [r3, #0]
 8001312:	4b6c      	ldr	r3, [pc, #432]	; (80014c4 <mlx90632_start_extended_mode+0x2e4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6a      	ldr	r2, [pc, #424]	; (80014c0 <mlx90632_start_extended_mode+0x2e0>)
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	4962      	ldr	r1, [pc, #392]	; (80014a4 <mlx90632_start_extended_mode+0x2c4>)
 800131c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001320:	9102      	str	r1, [sp, #8]
 8001322:	9201      	str	r2, [sp, #4]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	4633      	mov	r3, r6
 8001328:	462a      	mov	r2, r5
 800132a:	4621      	mov	r1, r4
 800132c:	f000 fe76 	bl	800201c <mlx90632_calc_temp_ambient_extended>
 8001330:	ec53 2b10 	vmov	r2, r3, d0
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fbda 	bl	8000af0 <__aeabi_d2f>
 800133c:	4603      	mov	r3, r0
 800133e:	4a66      	ldr	r2, [pc, #408]	; (80014d8 <mlx90632_start_extended_mode+0x2f8>)
 8001340:	6013      	str	r3, [r2, #0]
                                                      PT, PR, PG, PO, Gb);

        pre_ambient = mlx90632_preprocess_temp_ambient_extended(ambient_new_raw,
 8001342:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <mlx90632_start_extended_mode+0x2f4>)
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	4a61      	ldr	r2, [pc, #388]	; (80014d0 <mlx90632_start_extended_mode+0x2f0>)
 800134a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800134e:	4a55      	ldr	r2, [pc, #340]	; (80014a4 <mlx90632_start_extended_mode+0x2c4>)
 8001350:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fd8f 	bl	8001e78 <mlx90632_preprocess_temp_ambient_extended>
 800135a:	ec53 2b10 	vmov	r2, r3, d0
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fbc5 	bl	8000af0 <__aeabi_d2f>
 8001366:	4603      	mov	r3, r0
 8001368:	4a5c      	ldr	r2, [pc, #368]	; (80014dc <mlx90632_start_extended_mode+0x2fc>)
 800136a:	6013      	str	r3, [r2, #0]
                                                                       ambient_old_raw, Gb);
        pre_object = mlx90632_preprocess_temp_object_extended(object_new_raw, ambient_new_raw,
 800136c:	4b57      	ldr	r3, [pc, #348]	; (80014cc <mlx90632_start_extended_mode+0x2ec>)
 800136e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001372:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <mlx90632_start_extended_mode+0x2f4>)
 8001374:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001378:	4b55      	ldr	r3, [pc, #340]	; (80014d0 <mlx90632_start_extended_mode+0x2f0>)
 800137a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <mlx90632_start_extended_mode+0x2b8>)
 8001380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001384:	f000 fdde 	bl	8001f44 <mlx90632_preprocess_temp_object_extended>
 8001388:	ec53 2b10 	vmov	r2, r3, d0
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fbae 	bl	8000af0 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	4a52      	ldr	r2, [pc, #328]	; (80014e0 <mlx90632_start_extended_mode+0x300>)
 8001398:	6013      	str	r3, [r2, #0]
                                                                     ambient_old_raw, Ka);

        object = mlx90632_calc_temp_object_extended(pre_object, pre_ambient, ambient, Ea, Eb, Ga, Fa, Fb, Ha, Hb);
 800139a:	4b51      	ldr	r3, [pc, #324]	; (80014e0 <mlx90632_start_extended_mode+0x300>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80013a4:	4b4d      	ldr	r3, [pc, #308]	; (80014dc <mlx90632_start_extended_mode+0x2fc>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <mlx90632_start_extended_mode+0x2f8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f86c 	bl	8000490 <__aeabi_f2d>
 80013b8:	4680      	mov	r8, r0
 80013ba:	4689      	mov	r9, r1
 80013bc:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <mlx90632_start_extended_mode+0x2d8>)
 80013be:	681d      	ldr	r5, [r3, #0]
 80013c0:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <mlx90632_start_extended_mode+0x2d4>)
 80013c2:	681e      	ldr	r6, [r3, #0]
 80013c4:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <mlx90632_start_extended_mode+0x2c8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a39      	ldr	r2, [pc, #228]	; (80014b0 <mlx90632_start_extended_mode+0x2d0>)
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	4937      	ldr	r1, [pc, #220]	; (80014ac <mlx90632_start_extended_mode+0x2cc>)
 80013ce:	6809      	ldr	r1, [r1, #0]
 80013d0:	4833      	ldr	r0, [pc, #204]	; (80014a0 <mlx90632_start_extended_mode+0x2c0>)
 80013d2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80013d6:	4c31      	ldr	r4, [pc, #196]	; (800149c <mlx90632_start_extended_mode+0x2bc>)
 80013d8:	f9b4 4000 	ldrsh.w	r4, [r4]
 80013dc:	9404      	str	r4, [sp, #16]
 80013de:	9003      	str	r0, [sp, #12]
 80013e0:	9102      	str	r1, [sp, #8]
 80013e2:	9201      	str	r2, [sp, #4]
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	4633      	mov	r3, r6
 80013e8:	462a      	mov	r2, r5
 80013ea:	ec49 8b10 	vmov	d0, r8, r9
 80013ee:	ee18 1a90 	vmov	r1, s17
 80013f2:	ee18 0a10 	vmov	r0, s16
 80013f6:	f000 ffa7 	bl	8002348 <mlx90632_calc_temp_object_extended>
 80013fa:	ec53 2b10 	vmov	r2, r3, d0
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fb75 	bl	8000af0 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	4a36      	ldr	r2, [pc, #216]	; (80014e4 <mlx90632_start_extended_mode+0x304>)
 800140a:	6013      	str	r3, [r2, #0]

        float_temp_1 = object;
 800140c:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <mlx90632_start_extended_mode+0x304>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a35      	ldr	r2, [pc, #212]	; (80014e8 <mlx90632_start_extended_mode+0x308>)
 8001412:	6013      	str	r3, [r2, #0]
        float_temp_to_char_temp(float_temp_1, char_temp_1);
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <mlx90632_start_extended_mode+0x308>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f839 	bl	8000490 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4832      	ldr	r0, [pc, #200]	; (80014ec <mlx90632_start_extended_mode+0x30c>)
 8001424:	ec43 2b10 	vmov	d0, r2, r3
 8001428:	f7ff fd2e 	bl	8000e88 <float_temp_to_char_temp>

        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 800142c:	2101      	movs	r1, #1
 800142e:	4830      	ldr	r0, [pc, #192]	; (80014f0 <mlx90632_start_extended_mode+0x310>)
 8001430:	f002 f9ec 	bl	800380c <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d111      	bne.n	800145e <mlx90632_start_extended_mode+0x27e>
        {
#	        ifdef SSD1306_DISPLAY
            SSD1306_GotoXY(0, 0);
 800143a:	2100      	movs	r1, #0
 800143c:	2000      	movs	r0, #0
 800143e:	f001 fbf7 	bl	8002c30 <SSD1306_GotoXY>
            SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 8001442:	2201      	movs	r2, #1
 8001444:	492b      	ldr	r1, [pc, #172]	; (80014f4 <mlx90632_start_extended_mode+0x314>)
 8001446:	4829      	ldr	r0, [pc, #164]	; (80014ec <mlx90632_start_extended_mode+0x30c>)
 8001448:	f001 fc88 	bl	8002d5c <SSD1306_Puts>

            SSD1306_GotoXY(70, 0);
 800144c:	2100      	movs	r1, #0
 800144e:	2046      	movs	r0, #70	; 0x46
 8001450:	f001 fbee 	bl	8002c30 <SSD1306_GotoXY>
            SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8001454:	2201      	movs	r2, #1
 8001456:	4927      	ldr	r1, [pc, #156]	; (80014f4 <mlx90632_start_extended_mode+0x314>)
 8001458:	4827      	ldr	r0, [pc, #156]	; (80014f8 <mlx90632_start_extended_mode+0x318>)
 800145a:	f001 fc7f 	bl	8002d5c <SSD1306_Puts>
            CDC_Transmit_FS(end, strlen(end));
#  		    endif
        }

#       ifdef SSD1306_DISPLAY
        SSD1306_GotoXY(0, 29);
 800145e:	211d      	movs	r1, #29
 8001460:	2000      	movs	r0, #0
 8001462:	f001 fbe5 	bl	8002c30 <SSD1306_GotoXY>
        SSD1306_Puts(char_temp_1, &Font_11x18, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	4922      	ldr	r1, [pc, #136]	; (80014f4 <mlx90632_start_extended_mode+0x314>)
 800146a:	4820      	ldr	r0, [pc, #128]	; (80014ec <mlx90632_start_extended_mode+0x30c>)
 800146c:	f001 fc76 	bl	8002d5c <SSD1306_Puts>

        SSD1306_GotoXY(70, 29);
 8001470:	211d      	movs	r1, #29
 8001472:	2046      	movs	r0, #70	; 0x46
 8001474:	f001 fbdc 	bl	8002c30 <SSD1306_GotoXY>
        SSD1306_Puts(char_temp_2, &Font_11x18, 1);
 8001478:	2201      	movs	r2, #1
 800147a:	491e      	ldr	r1, [pc, #120]	; (80014f4 <mlx90632_start_extended_mode+0x314>)
 800147c:	481e      	ldr	r0, [pc, #120]	; (80014f8 <mlx90632_start_extended_mode+0x318>)
 800147e:	f001 fc6d 	bl	8002d5c <SSD1306_Puts>

        SSD1306_UpdateScreen();
 8001482:	f001 fb0d 	bl	8002aa0 <SSD1306_UpdateScreen>
    	mlx90632_set_emissivity(0.5);
 8001486:	e729      	b.n	80012dc <mlx90632_start_extended_mode+0xfc>
 8001488:	00000000 	.word	0x00000000
 800148c:	3fe00000 	.word	0x3fe00000
 8001490:	200008d0 	.word	0x200008d0
 8001494:	40020c00 	.word	0x40020c00
 8001498:	20000028 	.word	0x20000028
 800149c:	20000240 	.word	0x20000240
 80014a0:	20000026 	.word	0x20000026
 80014a4:	20000024 	.word	0x20000024
 80014a8:	20000020 	.word	0x20000020
 80014ac:	2000001c 	.word	0x2000001c
 80014b0:	20000018 	.word	0x20000018
 80014b4:	20000014 	.word	0x20000014
 80014b8:	20000010 	.word	0x20000010
 80014bc:	20000008 	.word	0x20000008
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	20000004 	.word	0x20000004
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000924 	.word	0x20000924
 80014d0:	20000980 	.word	0x20000980
 80014d4:	200009c4 	.word	0x200009c4
 80014d8:	200009d4 	.word	0x200009d4
 80014dc:	20000a2c 	.word	0x20000a2c
 80014e0:	2000097c 	.word	0x2000097c
 80014e4:	200009d0 	.word	0x200009d0
 80014e8:	2000023c 	.word	0x2000023c
 80014ec:	200009c8 	.word	0x200009c8
 80014f0:	40020000 	.word	0x40020000
 80014f4:	2000002c 	.word	0x2000002c
 80014f8:	20000a30 	.word	0x20000a30

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b093      	sub	sp, #76	; 0x4c
 8001500:	af12      	add	r7, sp, #72	; 0x48
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001502:	f001 fe3f 	bl	8003184 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001506:	f000 f841 	bl	800158c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800150a:	f000 f931 	bl	8001770 <MX_GPIO_Init>
    MX_I2C1_Init();
 800150e:	f000 f8a5 	bl	800165c <MX_I2C1_Init>
    MX_I2C2_Init();
 8001512:	f000 f8d1 	bl	80016b8 <MX_I2C2_Init>
    MX_USB_DEVICE_Init();
 8001516:	f008 f9c3 	bl	80098a0 <MX_USB_DEVICE_Init>
    MX_I2C3_Init();
 800151a:	f000 f8fb 	bl	8001714 <MX_I2C3_Init>
     * Temp sensor 1 - I2C1, temp sensor 2 - I2C2, Display - I2C3
     */

  // Initialize Display
#ifdef SSD1306_DISPLAY
    if (SSD1306_Init(hi2c3) != 1)
 800151e:	4c17      	ldr	r4, [pc, #92]	; (800157c <main+0x80>)
 8001520:	4668      	mov	r0, sp
 8001522:	f104 0310 	add.w	r3, r4, #16
 8001526:	2244      	movs	r2, #68	; 0x44
 8001528:	4619      	mov	r1, r3
 800152a:	f008 feed 	bl	800a308 <memcpy>
 800152e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001532:	f001 f89f 	bl	8002674 <SSD1306_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b01      	cmp	r3, #1
 800153a:	d00d      	beq.n	8001558 <main+0x5c>
    {
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800153c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001540:	480f      	ldr	r0, [pc, #60]	; (8001580 <main+0x84>)
 8001542:	f002 f994 	bl	800386e <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 8001546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800154a:	f001 fe8d 	bl	8003268 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800154e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <main+0x84>)
 8001554:	f002 f98b 	bl	800386e <HAL_GPIO_TogglePin>
    }

    SSD1306_GotoXY (0,0);
 8001558:	2100      	movs	r1, #0
 800155a:	2000      	movs	r0, #0
 800155c:	f001 fb68 	bl	8002c30 <SSD1306_GotoXY>
    SSD1306_Puts ("initialize", &Font_11x18, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <main+0x88>)
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <main+0x8c>)
 8001566:	f001 fbf9 	bl	8002d5c <SSD1306_Puts>
    SSD1306_UpdateScreen();
 800156a:	f001 fa99 	bl	8002aa0 <SSD1306_UpdateScreen>

#if defined(MLX90614)
    mlx90614_start_standard_mode();
#elif defined(MLX90632)
//    mlx90632_start_standard_mode();
    mlx90632_start_extended_mode();
 800156e:	f7ff fe37 	bl	80011e0 <mlx90632_start_extended_mode>
 8001572:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8001574:	4618      	mov	r0, r3
 8001576:	3704      	adds	r7, #4
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	20000878 	.word	0x20000878
 8001580:	40020c00 	.word	0x40020c00
 8001584:	2000002c 	.word	0x2000002c
 8001588:	0800a51c 	.word	0x0800a51c

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b094      	sub	sp, #80	; 0x50
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0320 	add.w	r3, r7, #32
 8001596:	2230      	movs	r2, #48	; 0x30
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f008 fec2 	bl	800a324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <SystemClock_Config+0xc8>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a26      	ldr	r2, [pc, #152]	; (8001654 <SystemClock_Config+0xc8>)
 80015ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
 80015c0:	4b24      	ldr	r3, [pc, #144]	; (8001654 <SystemClock_Config+0xc8>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <SystemClock_Config+0xcc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a20      	ldr	r2, [pc, #128]	; (8001658 <SystemClock_Config+0xcc>)
 80015d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <SystemClock_Config+0xcc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015e8:	2302      	movs	r3, #2
 80015ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f0:	2310      	movs	r3, #16
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f4:	2302      	movs	r3, #2
 80015f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015f8:	2300      	movs	r3, #0
 80015fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015fc:	2310      	movs	r3, #16
 80015fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001600:	23c0      	movs	r3, #192	; 0xc0
 8001602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001604:	2302      	movs	r3, #2
 8001606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001608:	2304      	movs	r3, #4
 800160a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160c:	f107 0320 	add.w	r3, r7, #32
 8001610:	4618      	mov	r0, r3
 8001612:	f004 fd37 	bl	8006084 <HAL_RCC_OscConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800161c:	f000 f924 	bl	8001868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001620:	230f      	movs	r3, #15
 8001622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f004 ff9a 	bl	8006574 <HAL_RCC_ClockConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001646:	f000 f90f 	bl	8001868 <Error_Handler>
  }
}
 800164a:	bf00      	nop
 800164c:	3750      	adds	r7, #80	; 0x50
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000

0800165c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_I2C1_Init+0x50>)
 8001662:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <MX_I2C1_Init+0x54>)
 8001664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_I2C1_Init+0x50>)
 8001668:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <MX_I2C1_Init+0x58>)
 800166a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_I2C1_Init+0x50>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_I2C1_Init+0x50>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_I2C1_Init+0x50>)
 800167a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_I2C1_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_I2C1_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_I2C1_Init+0x50>)
 800169a:	f002 f903 	bl	80038a4 <HAL_I2C_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016a4:	f000 f8e0 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200008d0 	.word	0x200008d0
 80016b0:	40005400 	.word	0x40005400
 80016b4:	000186a0 	.word	0x000186a0

080016b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_I2C2_Init+0x50>)
 80016be:	4a13      	ldr	r2, [pc, #76]	; (800170c <MX_I2C2_Init+0x54>)
 80016c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_I2C2_Init+0x50>)
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <MX_I2C2_Init+0x58>)
 80016c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_I2C2_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_I2C2_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_I2C2_Init+0x50>)
 80016d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <MX_I2C2_Init+0x50>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_I2C2_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <MX_I2C2_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_I2C2_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_I2C2_Init+0x50>)
 80016f6:	f002 f8d5 	bl	80038a4 <HAL_I2C_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001700:	f000 f8b2 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000928 	.word	0x20000928
 800170c:	40005800 	.word	0x40005800
 8001710:	000186a0 	.word	0x000186a0

08001714 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_I2C3_Init+0x50>)
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <MX_I2C3_Init+0x54>)
 800171c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_I2C3_Init+0x50>)
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <MX_I2C3_Init+0x58>)
 8001722:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_I2C3_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_I2C3_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_I2C3_Init+0x50>)
 8001732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001736:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <MX_I2C3_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_I2C3_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_I2C3_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_I2C3_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_I2C3_Init+0x50>)
 8001752:	f002 f8a7 	bl	80038a4 <HAL_I2C_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800175c:	f000 f884 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000878 	.word	0x20000878
 8001768:	40005c00 	.word	0x40005c00
 800176c:	00061a80 	.word	0x00061a80

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <MX_GPIO_Init+0xec>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a33      	ldr	r2, [pc, #204]	; (800185c <MX_GPIO_Init+0xec>)
 8001790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b31      	ldr	r3, [pc, #196]	; (800185c <MX_GPIO_Init+0xec>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <MX_GPIO_Init+0xec>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a2c      	ldr	r2, [pc, #176]	; (800185c <MX_GPIO_Init+0xec>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <MX_GPIO_Init+0xec>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <MX_GPIO_Init+0xec>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a25      	ldr	r2, [pc, #148]	; (800185c <MX_GPIO_Init+0xec>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <MX_GPIO_Init+0xec>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <MX_GPIO_Init+0xec>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <MX_GPIO_Init+0xec>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <MX_GPIO_Init+0xec>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_GPIO_Init+0xec>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <MX_GPIO_Init+0xec>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_GPIO_Init+0xec>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001818:	4811      	ldr	r0, [pc, #68]	; (8001860 <MX_GPIO_Init+0xf0>)
 800181a:	f002 f80f 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800181e:	2301      	movs	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <MX_GPIO_Init+0xf4>)
 8001832:	f001 fe4f 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001836:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_GPIO_Init+0xf0>)
 8001850:	f001 fe40 	bl	80034d4 <HAL_GPIO_Init>

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40020c00 	.word	0x40020c00
 8001864:	40020000 	.word	0x40020000

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>

08001872 <mlx90632_start_measurement>:
#ifndef STATIC
#define STATIC static
#endif

int mlx90632_start_measurement(I2C_HandleTypeDef hi2c)
{
 8001872:	b084      	sub	sp, #16
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b099      	sub	sp, #100	; 0x64
 8001878:	af14      	add	r7, sp, #80	; 0x50
 800187a:	f107 0420 	add.w	r4, r7, #32
 800187e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int ret, tries = MLX90632_MAX_NUMBER_MESUREMENT_READ_TRIES;
 8001882:	2364      	movs	r3, #100	; 0x64
 8001884:	60fb      	str	r3, [r7, #12]
    uint16_t reg_status;

    ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status, hi2c);
 8001886:	1dbc      	adds	r4, r7, #6
 8001888:	4668      	mov	r0, sp
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	224c      	movs	r2, #76	; 0x4c
 8001890:	4619      	mov	r1, r3
 8001892:	f008 fd39 	bl	800a308 <memcpy>
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	cb0c      	ldmia	r3, {r2, r3}
 800189c:	4621      	mov	r1, r4
 800189e:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80018a2:	f000 f8e9 	bl	8001a78 <mlx90632_i2c_read>
 80018a6:	60b8      	str	r0, [r7, #8]
    if (ret < 0) {
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da01      	bge.n	80018b2 <mlx90632_start_measurement+0x40>
    	  return ret;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	e047      	b.n	8001942 <mlx90632_start_measurement+0xd0>
    }


    ret = mlx90632_i2c_write(MLX90632_REG_STATUS, reg_status & (~MLX90632_STAT_DATA_RDY), hi2c);
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	b29c      	uxth	r4, r3
 80018ba:	4668      	mov	r0, sp
 80018bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c0:	224c      	movs	r2, #76	; 0x4c
 80018c2:	4619      	mov	r1, r3
 80018c4:	f008 fd20 	bl	800a308 <memcpy>
 80018c8:	f107 0320 	add.w	r3, r7, #32
 80018cc:	cb0c      	ldmia	r3, {r2, r3}
 80018ce:	4621      	mov	r1, r4
 80018d0:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80018d4:	f000 f92d 	bl	8001b32 <mlx90632_i2c_write>
 80018d8:	60b8      	str	r0, [r7, #8]
    if (ret < 0){
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da22      	bge.n	8001926 <mlx90632_start_measurement+0xb4>
  	  return ret;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	e02e      	b.n	8001942 <mlx90632_start_measurement+0xd0>
  }

    while (tries-- > 0)
    {
        ret = mlx90632_i2c_read(MLX90632_REG_STATUS, &reg_status, hi2c);
 80018e4:	1dbc      	adds	r4, r7, #6
 80018e6:	4668      	mov	r0, sp
 80018e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ec:	224c      	movs	r2, #76	; 0x4c
 80018ee:	4619      	mov	r1, r3
 80018f0:	f008 fd0a 	bl	800a308 <memcpy>
 80018f4:	f107 0320 	add.w	r3, r7, #32
 80018f8:	cb0c      	ldmia	r3, {r2, r3}
 80018fa:	4621      	mov	r1, r4
 80018fc:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001900:	f000 f8ba 	bl	8001a78 <mlx90632_i2c_read>
 8001904:	60b8      	str	r0, [r7, #8]
        if (ret < 0)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	da01      	bge.n	8001910 <mlx90632_start_measurement+0x9e>
            return ret;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	e018      	b.n	8001942 <mlx90632_start_measurement+0xd0>
        if (reg_status & MLX90632_STAT_DATA_RDY)
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10b      	bne.n	8001932 <mlx90632_start_measurement+0xc0>
            break;
        /* minimum wait time to complete measurement
         * should be calculated according to refresh rate
         * atm 10ms - 11ms
         */
        usleep(10000, 11000);
 800191a:	f642 21f8 	movw	r1, #11000	; 0x2af8
 800191e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001922:	f000 f930 	bl	8001b86 <usleep>
    while (tries-- > 0)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1e5a      	subs	r2, r3, #1
 800192a:	60fa      	str	r2, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	dcd9      	bgt.n	80018e4 <mlx90632_start_measurement+0x72>
 8001930:	e000      	b.n	8001934 <mlx90632_start_measurement+0xc2>
            break;
 8001932:	bf00      	nop
    }

    if (tries < 0)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	da02      	bge.n	8001940 <mlx90632_start_measurement+0xce>
    {
        // data not ready
        return -ETIMEDOUT;
 800193a:	f06f 0373 	mvn.w	r3, #115	; 0x73
 800193e:	e000      	b.n	8001942 <mlx90632_start_measurement+0xd0>
    }

    return (reg_status & MLX90632_STAT_CYCLE_POS) >> 2;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800194c:	b004      	add	sp, #16
 800194e:	4770      	bx	lr

08001950 <mlx90632_set_emissivity>:
    return sqrt(first_sqrt) - 273.15 - Hb_customer;
}

static double emissivity = 0.0;
void mlx90632_set_emissivity(double value)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	ed87 0b00 	vstr	d0, [r7]
    emissivity = value;
 800195a:	4905      	ldr	r1, [pc, #20]	; (8001970 <mlx90632_set_emissivity+0x20>)
 800195c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001960:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	20000248 	.word	0x20000248

08001974 <mlx90632_get_emissivity>:

double mlx90632_get_emissivity(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    if (emissivity == 0.0)
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <mlx90632_get_emissivity+0x38>)
 800197a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	f7ff f843 	bl	8000a10 <__aeabi_dcmpeq>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <mlx90632_get_emissivity+0x24>
    {
        return 1.0;
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <mlx90632_get_emissivity+0x3c>)
 8001996:	e002      	b.n	800199e <mlx90632_get_emissivity+0x2a>
    }
    else
    {
        return emissivity;
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <mlx90632_get_emissivity+0x38>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	ec43 2b17 	vmov	d7, r2, r3
    }
}
 80019a2:	eeb0 0a47 	vmov.f32	s0, s14
 80019a6:	eef0 0a67 	vmov.f32	s1, s15
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000248 	.word	0x20000248
 80019b0:	3ff00000 	.word	0x3ff00000

080019b4 <mlx90632_addressed_reset>:

    return 0;
}

int32_t mlx90632_addressed_reset(I2C_HandleTypeDef hi2c)
{
 80019b4:	b084      	sub	sp, #16
 80019b6:	b590      	push	{r4, r7, lr}
 80019b8:	b097      	sub	sp, #92	; 0x5c
 80019ba:	af14      	add	r7, sp, #80	; 0x50
 80019bc:	f107 0418 	add.w	r4, r7, #24
 80019c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int32_t ret;
    uint16_t reg_ctrl;
    uint16_t reg_value;

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_value, hi2c);
 80019c4:	463c      	mov	r4, r7
 80019c6:	4668      	mov	r0, sp
 80019c8:	f107 0320 	add.w	r3, r7, #32
 80019cc:	224c      	movs	r2, #76	; 0x4c
 80019ce:	4619      	mov	r1, r3
 80019d0:	f008 fc9a 	bl	800a308 <memcpy>
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	cb0c      	ldmia	r3, {r2, r3}
 80019da:	4621      	mov	r1, r4
 80019dc:	f243 0001 	movw	r0, #12289	; 0x3001
 80019e0:	f000 f84a 	bl	8001a78 <mlx90632_i2c_read>
 80019e4:	6078      	str	r0, [r7, #4]
//    if (ret < 0)
//        return ret;

    reg_ctrl = reg_value & ~MLX90632_CFG_PWR_MASK;
 80019e6:	883b      	ldrh	r3, [r7, #0]
 80019e8:	807b      	strh	r3, [r7, #2]
    reg_ctrl |= MLX90632_PWR_STATUS_STEP;
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	807b      	strh	r3, [r7, #2]
    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 80019f2:	887c      	ldrh	r4, [r7, #2]
 80019f4:	4668      	mov	r0, sp
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	224c      	movs	r2, #76	; 0x4c
 80019fc:	4619      	mov	r1, r3
 80019fe:	f008 fc83 	bl	800a308 <memcpy>
 8001a02:	f107 0318 	add.w	r3, r7, #24
 8001a06:	cb0c      	ldmia	r3, {r2, r3}
 8001a08:	4621      	mov	r1, r4
 8001a0a:	f243 0001 	movw	r0, #12289	; 0x3001
 8001a0e:	f000 f890 	bl	8001b32 <mlx90632_i2c_write>
 8001a12:	6078      	str	r0, [r7, #4]
    if (ret < 0)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da01      	bge.n	8001a1e <mlx90632_addressed_reset+0x6a>
        return ret;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	e025      	b.n	8001a6a <mlx90632_addressed_reset+0xb6>

    ret = mlx90632_i2c_write(0x3005, MLX90632_RESET_CMD, hi2c);
 8001a1e:	4668      	mov	r0, sp
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	224c      	movs	r2, #76	; 0x4c
 8001a26:	4619      	mov	r1, r3
 8001a28:	f008 fc6e 	bl	800a308 <memcpy>
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	cb0c      	ldmia	r3, {r2, r3}
 8001a32:	2106      	movs	r1, #6
 8001a34:	f243 0005 	movw	r0, #12293	; 0x3005
 8001a38:	f000 f87b 	bl	8001b32 <mlx90632_i2c_write>
 8001a3c:	6078      	str	r0, [r7, #4]
//    if (ret < 0)
//        return ret;

    usleep(150, 200);
 8001a3e:	21c8      	movs	r1, #200	; 0xc8
 8001a40:	2096      	movs	r0, #150	; 0x96
 8001a42:	f000 f8a0 	bl	8001b86 <usleep>

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_value, hi2c);
 8001a46:	883c      	ldrh	r4, [r7, #0]
 8001a48:	4668      	mov	r0, sp
 8001a4a:	f107 0320 	add.w	r3, r7, #32
 8001a4e:	224c      	movs	r2, #76	; 0x4c
 8001a50:	4619      	mov	r1, r3
 8001a52:	f008 fc59 	bl	800a308 <memcpy>
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	cb0c      	ldmia	r3, {r2, r3}
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	f243 0001 	movw	r0, #12289	; 0x3001
 8001a62:	f000 f866 	bl	8001b32 <mlx90632_i2c_write>
 8001a66:	6078      	str	r0, [r7, #4]

    return ret;
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a74:	b004      	add	sp, #16
 8001a76:	4770      	bx	lr

08001a78 <mlx90632_i2c_read>:
#define CHIP_ADDRESS 0x3a << 1

/* HAL_I2C_Mem_Read()/Write() are used instead of Master_Transmit()/Receive() because repeated start condition is needed */
/* Implementation of I2C read for 16-bit values */
int32_t mlx90632_i2c_read(int16_t register_address, uint16_t *value, I2C_HandleTypeDef hi2c)
{
 8001a78:	b082      	sub	sp, #8
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b088      	sub	sp, #32
 8001a7e:	af04      	add	r7, sp, #16
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	f107 0118 	add.w	r1, r7, #24
 8001a86:	e881 000c 	stmia.w	r1, {r2, r3}
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 8001a8e:	88fa      	ldrh	r2, [r7, #6]
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	2302      	movs	r3, #2
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	2174      	movs	r1, #116	; 0x74
 8001aa2:	f107 0018 	add.w	r0, r7, #24
 8001aa6:	f002 fa39 	bl	8003f1c <HAL_I2C_Mem_Read>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[1]|(data[0]<<8);
 8001aae:	7a7b      	ldrb	r3, [r7, #9]
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	7a3b      	ldrb	r3, [r7, #8]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	801a      	strh	r2, [r3, #0]
	return ret;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ace:	b002      	add	sp, #8
 8001ad0:	4770      	bx	lr

08001ad2 <mlx90632_i2c_read32>:

/* Implementation of I2C read for 32-bit values */
int32_t mlx90632_i2c_read32(int16_t register_address, uint32_t *value, I2C_HandleTypeDef hi2c)
{
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af04      	add	r7, sp, #16
 8001ada:	6039      	str	r1, [r7, #0]
 8001adc:	f107 0118 	add.w	r1, r7, #24
 8001ae0:	e881 000c 	stmia.w	r1, {r2, r3}
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	80fb      	strh	r3, [r7, #6]
	uint8_t data[4];
	int32_t ret;
	ret = HAL_I2C_Mem_Read(&hi2c, CHIP_ADDRESS, register_address, 2, data, sizeof(data), 100);
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	2364      	movs	r3, #100	; 0x64
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	2304      	movs	r3, #4
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2302      	movs	r3, #2
 8001afa:	2174      	movs	r1, #116	; 0x74
 8001afc:	f107 0018 	add.w	r0, r7, #24
 8001b00:	f002 fa0c 	bl	8003f1c <HAL_I2C_Mem_Read>
 8001b04:	4603      	mov	r3, r0
 8001b06:	60fb      	str	r3, [r7, #12]
	//Endianness
	*value = data[2]<<24|data[3]<<16|data[0]<<8|data[1];
 8001b08:	7abb      	ldrb	r3, [r7, #10]
 8001b0a:	061a      	lsls	r2, r3, #24
 8001b0c:	7afb      	ldrb	r3, [r7, #11]
 8001b0e:	041b      	lsls	r3, r3, #16
 8001b10:	431a      	orrs	r2, r3
 8001b12:	7a3b      	ldrb	r3, [r7, #8]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	4313      	orrs	r3, r2
 8001b18:	7a7a      	ldrb	r2, [r7, #9]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	601a      	str	r2, [r3, #0]
	return ret;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b2e:	b002      	add	sp, #8
 8001b30:	4770      	bx	lr

08001b32 <mlx90632_i2c_write>:

/* Implementation of I2C write for 16-bit values */
int32_t mlx90632_i2c_write(int16_t register_address, uint16_t value, I2C_HandleTypeDef hi2c) {
 8001b32:	b082      	sub	sp, #8
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af04      	add	r7, sp, #16
 8001b3a:	f107 0c18 	add.w	ip, r7, #24
 8001b3e:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
 8001b46:	460b      	mov	r3, r1
 8001b48:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2];
	data[0] = value >> 8;
 8001b4a:	88bb      	ldrh	r3, [r7, #4]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(&hi2c, CHIP_ADDRESS, register_address, 2, data, 2, 100);
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	2364      	movs	r3, #100	; 0x64
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	2302      	movs	r3, #2
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	2174      	movs	r1, #116	; 0x74
 8001b6e:	f107 0018 	add.w	r0, r7, #24
 8001b72:	f002 f8d9 	bl	8003d28 <HAL_I2C_Mem_Write>
 8001b76:	4603      	mov	r3, r0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b82:	b002      	add	sp, #8
 8001b84:	4770      	bx	lr

08001b86 <usleep>:

void usleep(int min_range, int max_range) {
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
	while(--min_range);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f9      	bne.n	8001b90 <usleep+0xa>
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <mlx90632_read_temp_ambient_raw_extended>:
#ifndef STATIC
#define STATIC static
#endif

STATIC int32_t mlx90632_read_temp_ambient_raw_extended(int16_t *ambient_new_raw, int16_t *ambient_old_raw, I2C_HandleTypeDef hi2c)
{
 8001baa:	b082      	sub	sp, #8
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b099      	sub	sp, #100	; 0x64
 8001bb0:	af14      	add	r7, sp, #80	; 0x50
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	f107 0120 	add.w	r1, r7, #32
 8001bba:	e881 000c 	stmia.w	r1, {r2, r3}
    int32_t ret;
    uint16_t read_tmp;

    ret = mlx90632_i2c_read(MLX90632_RAM_3(17), &read_tmp, hi2c);
 8001bbe:	f107 040a 	add.w	r4, r7, #10
 8001bc2:	4668      	mov	r0, sp
 8001bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc8:	224c      	movs	r2, #76	; 0x4c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f008 fb9c 	bl	800a308 <memcpy>
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	cb0c      	ldmia	r3, {r2, r3}
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	f244 0035 	movw	r0, #16437	; 0x4035
 8001bdc:	f7ff ff4c 	bl	8001a78 <mlx90632_i2c_read>
 8001be0:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	da01      	bge.n	8001bec <mlx90632_read_temp_ambient_raw_extended+0x42>
        return ret;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	e01f      	b.n	8001c2c <mlx90632_read_temp_ambient_raw_extended+0x82>
    *ambient_new_raw = (int16_t)read_tmp;
 8001bec:	897b      	ldrh	r3, [r7, #10]
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	801a      	strh	r2, [r3, #0]

    ret = mlx90632_i2c_read(MLX90632_RAM_3(18), &read_tmp, hi2c);
 8001bf4:	f107 040a 	add.w	r4, r7, #10
 8001bf8:	4668      	mov	r0, sp
 8001bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfe:	224c      	movs	r2, #76	; 0x4c
 8001c00:	4619      	mov	r1, r3
 8001c02:	f008 fb81 	bl	800a308 <memcpy>
 8001c06:	f107 0320 	add.w	r3, r7, #32
 8001c0a:	cb0c      	ldmia	r3, {r2, r3}
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	f244 0038 	movw	r0, #16440	; 0x4038
 8001c12:	f7ff ff31 	bl	8001a78 <mlx90632_i2c_read>
 8001c16:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da01      	bge.n	8001c22 <mlx90632_read_temp_ambient_raw_extended+0x78>
        return ret;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	e004      	b.n	8001c2c <mlx90632_read_temp_ambient_raw_extended+0x82>
    *ambient_old_raw = (int16_t)read_tmp;
 8001c22:	897b      	ldrh	r3, [r7, #10]
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	801a      	strh	r2, [r3, #0]

    return ret;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001c36:	b002      	add	sp, #8
 8001c38:	4770      	bx	lr

08001c3a <mlx90632_read_temp_object_raw_extended>:

STATIC int32_t mlx90632_read_temp_object_raw_extended(int16_t *object_new_raw, I2C_HandleTypeDef hi2c)
{
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b09b      	sub	sp, #108	; 0x6c
 8001c40:	af14      	add	r7, sp, #80	; 0x50
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001c48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t ret;
    uint16_t read_tmp;
    int32_t read;

    ret = mlx90632_i2c_read(MLX90632_RAM_1(17), &read_tmp, hi2c);
 8001c4c:	f107 040e 	add.w	r4, r7, #14
 8001c50:	4668      	mov	r0, sp
 8001c52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c56:	224c      	movs	r2, #76	; 0x4c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f008 fb55 	bl	800a308 <memcpy>
 8001c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c62:	cb0c      	ldmia	r3, {r2, r3}
 8001c64:	4621      	mov	r1, r4
 8001c66:	f244 0033 	movw	r0, #16435	; 0x4033
 8001c6a:	f7ff ff05 	bl	8001a78 <mlx90632_i2c_read>
 8001c6e:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da01      	bge.n	8001c7a <mlx90632_read_temp_object_raw_extended+0x40>
        return ret;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	e0a6      	b.n	8001dc8 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = (int16_t)read_tmp;
 8001c7a:	89fb      	ldrh	r3, [r7, #14]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(17), &read_tmp, hi2c);
 8001c80:	f107 040e 	add.w	r4, r7, #14
 8001c84:	4668      	mov	r0, sp
 8001c86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c8a:	224c      	movs	r2, #76	; 0x4c
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f008 fb3b 	bl	800a308 <memcpy>
 8001c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c96:	cb0c      	ldmia	r3, {r2, r3}
 8001c98:	4621      	mov	r1, r4
 8001c9a:	f244 0034 	movw	r0, #16436	; 0x4034
 8001c9e:	f7ff feeb 	bl	8001a78 <mlx90632_i2c_read>
 8001ca2:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da01      	bge.n	8001cae <mlx90632_read_temp_object_raw_extended+0x74>
        return ret;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	e08c      	b.n	8001dc8 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read - (int16_t)read_tmp;
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(18), &read_tmp, hi2c);
 8001cba:	f107 040e 	add.w	r4, r7, #14
 8001cbe:	4668      	mov	r0, sp
 8001cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cc4:	224c      	movs	r2, #76	; 0x4c
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f008 fb1e 	bl	800a308 <memcpy>
 8001ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd0:	cb0c      	ldmia	r3, {r2, r3}
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	f244 0036 	movw	r0, #16438	; 0x4036
 8001cd8:	f7ff fece 	bl	8001a78 <mlx90632_i2c_read>
 8001cdc:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	da01      	bge.n	8001ce8 <mlx90632_read_temp_object_raw_extended+0xae>
        return ret;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	e06f      	b.n	8001dc8 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read - (int16_t)read_tmp;
 8001ce8:	89fb      	ldrh	r3, [r7, #14]
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(18), &read_tmp, hi2c);
 8001cf4:	f107 040e 	add.w	r4, r7, #14
 8001cf8:	4668      	mov	r0, sp
 8001cfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cfe:	224c      	movs	r2, #76	; 0x4c
 8001d00:	4619      	mov	r1, r3
 8001d02:	f008 fb01 	bl	800a308 <memcpy>
 8001d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0a:	cb0c      	ldmia	r3, {r2, r3}
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	f244 0037 	movw	r0, #16439	; 0x4037
 8001d12:	f7ff feb1 	bl	8001a78 <mlx90632_i2c_read>
 8001d16:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	da01      	bge.n	8001d22 <mlx90632_read_temp_object_raw_extended+0xe8>
        return ret;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	e052      	b.n	8001dc8 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = (read + (int16_t)read_tmp) / 2;
 8001d22:	89fb      	ldrh	r3, [r7, #14]
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	0fda      	lsrs	r2, r3, #31
 8001d2e:	4413      	add	r3, r2
 8001d30:	105b      	asrs	r3, r3, #1
 8001d32:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_1(19), &read_tmp, hi2c);
 8001d34:	f107 040e 	add.w	r4, r7, #14
 8001d38:	4668      	mov	r0, sp
 8001d3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d3e:	224c      	movs	r2, #76	; 0x4c
 8001d40:	4619      	mov	r1, r3
 8001d42:	f008 fae1 	bl	800a308 <memcpy>
 8001d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4a:	cb0c      	ldmia	r3, {r2, r3}
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	f244 0039 	movw	r0, #16441	; 0x4039
 8001d52:	f7ff fe91 	bl	8001a78 <mlx90632_i2c_read>
 8001d56:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da01      	bge.n	8001d62 <mlx90632_read_temp_object_raw_extended+0x128>
        return ret;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	e032      	b.n	8001dc8 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read + (int16_t)read_tmp;
 8001d62:	89fb      	ldrh	r3, [r7, #14]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]

    ret = mlx90632_i2c_read(MLX90632_RAM_2(19), &read_tmp, hi2c);
 8001d6e:	f107 040e 	add.w	r4, r7, #14
 8001d72:	4668      	mov	r0, sp
 8001d74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d78:	224c      	movs	r2, #76	; 0x4c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f008 fac4 	bl	800a308 <memcpy>
 8001d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d84:	cb0c      	ldmia	r3, {r2, r3}
 8001d86:	4621      	mov	r1, r4
 8001d88:	f244 003a 	movw	r0, #16442	; 0x403a
 8001d8c:	f7ff fe74 	bl	8001a78 <mlx90632_i2c_read>
 8001d90:	6178      	str	r0, [r7, #20]
    if (ret < 0)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da01      	bge.n	8001d9c <mlx90632_read_temp_object_raw_extended+0x162>
        return ret;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	e015      	b.n	8001dc8 <mlx90632_read_temp_object_raw_extended+0x18e>

    read = read + (int16_t)read_tmp;
 8001d9c:	89fb      	ldrh	r3, [r7, #14]
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]

    if (read > 32767 || read < -32768)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dae:	da03      	bge.n	8001db8 <mlx90632_read_temp_object_raw_extended+0x17e>
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001db6:	da02      	bge.n	8001dbe <mlx90632_read_temp_object_raw_extended+0x184>
        return -EINVAL;
 8001db8:	f06f 0315 	mvn.w	r3, #21
 8001dbc:	e004      	b.n	8001dc8 <mlx90632_read_temp_object_raw_extended+0x18e>

    *object_new_raw = (int16_t)read;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	801a      	strh	r2, [r3, #0]

    return ret;
 8001dc6:	697b      	ldr	r3, [r7, #20]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001dd2:	b004      	add	sp, #16
 8001dd4:	4770      	bx	lr

08001dd6 <mlx90632_read_temp_raw_extended>:

int32_t mlx90632_read_temp_raw_extended(int16_t *ambient_new_raw, int16_t *ambient_old_raw, int16_t *object_new_raw, I2C_HandleTypeDef hi2c)
{
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b09c      	sub	sp, #112	; 0x70
 8001ddc:	af14      	add	r7, sp, #80	; 0x50
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t ret, start_measurement_ret;
    int tries = 3;
 8001de6:	2303      	movs	r3, #3
 8001de8:	61fb      	str	r3, [r7, #28]

    // trigger and wait for measurement to complete
    while (tries-- > 0)
 8001dea:	e014      	b.n	8001e16 <mlx90632_read_temp_raw_extended+0x40>
    {
        start_measurement_ret = mlx90632_start_measurement(hi2c);
 8001dec:	4668      	mov	r0, sp
 8001dee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001df2:	2244      	movs	r2, #68	; 0x44
 8001df4:	4619      	mov	r1, r3
 8001df6:	f008 fa87 	bl	800a308 <memcpy>
 8001dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e00:	f7ff fd37 	bl	8001872 <mlx90632_start_measurement>
 8001e04:	61b8      	str	r0, [r7, #24]
        if (start_measurement_ret < 0)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	da01      	bge.n	8001e10 <mlx90632_read_temp_raw_extended+0x3a>
            return start_measurement_ret;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	e02c      	b.n	8001e6a <mlx90632_read_temp_raw_extended+0x94>

        if (start_measurement_ret == 19)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2b13      	cmp	r3, #19
 8001e14:	d005      	beq.n	8001e22 <mlx90632_read_temp_raw_extended+0x4c>
    while (tries-- > 0)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	61fa      	str	r2, [r7, #28]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	dce5      	bgt.n	8001dec <mlx90632_read_temp_raw_extended+0x16>
 8001e20:	e000      	b.n	8001e24 <mlx90632_read_temp_raw_extended+0x4e>
            break;
 8001e22:	bf00      	nop
//        // data not ready
//        return -ETIMEDOUT;
//    }

    /** Read new and old **ambient** values from sensor */
    ret = mlx90632_read_temp_ambient_raw_extended(ambient_new_raw, ambient_old_raw, hi2c);
 8001e24:	4668      	mov	r0, sp
 8001e26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e2a:	224c      	movs	r2, #76	; 0x4c
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f008 fa6b 	bl	800a308 <memcpy>
 8001e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e36:	cb0c      	ldmia	r3, {r2, r3}
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff feb5 	bl	8001baa <mlx90632_read_temp_ambient_raw_extended>
 8001e40:	6178      	str	r0, [r7, #20]
    if (ret < 0) {
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	da01      	bge.n	8001e4c <mlx90632_read_temp_raw_extended+0x76>
  	  return ret;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	e00e      	b.n	8001e6a <mlx90632_read_temp_raw_extended+0x94>
    }

    /** Read new **object** value from sensor */
    ret = mlx90632_read_temp_object_raw_extended(object_new_raw, hi2c);
 8001e4c:	4668      	mov	r0, sp
 8001e4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e52:	2248      	movs	r2, #72	; 0x48
 8001e54:	4619      	mov	r1, r3
 8001e56:	f008 fa57 	bl	800a308 <memcpy>
 8001e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff feea 	bl	8001c3a <mlx90632_read_temp_object_raw_extended>
 8001e66:	6178      	str	r0, [r7, #20]

    return ret;
 8001e68:	697b      	ldr	r3, [r7, #20]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3720      	adds	r7, #32
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e74:	b002      	add	sp, #8
 8001e76:	4770      	bx	lr

08001e78 <mlx90632_preprocess_temp_ambient_extended>:

    return ret;
}

double mlx90632_preprocess_temp_ambient_extended(int16_t ambient_new_raw, int16_t ambient_old_raw, int16_t Gb)
{
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	80fb      	strh	r3, [r7, #6]
 8001e82:	460b      	mov	r3, r1
 8001e84:	80bb      	strh	r3, [r7, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	807b      	strh	r3, [r7, #2]
    double VR_Ta, kGb;

    kGb = ((double)Gb) / 1024.0;
 8001e8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe faec 	bl	800046c <__aeabi_i2d>
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <mlx90632_preprocess_temp_ambient_extended+0xc0>)
 8001e9a:	f7fe fc7b 	bl	8000794 <__aeabi_ddiv>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_Ta = ambient_old_raw + kGb * (ambient_new_raw / (MLX90632_REF_3));
 8001ea6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fade 	bl	800046c <__aeabi_i2d>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	460d      	mov	r5, r1
 8001eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fad7 	bl	800046c <__aeabi_i2d>
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <mlx90632_preprocess_temp_ambient_extended+0xc4>)
 8001ec4:	f7fe fc66 	bl	8000794 <__aeabi_ddiv>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ed4:	f7fe fb34 	bl	8000540 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4620      	mov	r0, r4
 8001ede:	4629      	mov	r1, r5
 8001ee0:	f7fe f978 	bl	80001d4 <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((ambient_new_raw / (MLX90632_REF_3)) / VR_Ta) * 524288.0;
 8001eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fabb 	bl	800046c <__aeabi_i2d>
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <mlx90632_preprocess_temp_ambient_extended+0xc4>)
 8001efc:	f7fe fc4a 	bl	8000794 <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f0c:	f7fe fc42 	bl	8000794 <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <mlx90632_preprocess_temp_ambient_extended+0xc8>)
 8001f1e:	f7fe fb0f 	bl	8000540 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f2e:	eef0 0a67 	vmov.f32	s1, s15
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bdb0      	pop	{r4, r5, r7, pc}
 8001f38:	40900000 	.word	0x40900000
 8001f3c:	40280000 	.word	0x40280000
 8001f40:	41200000 	.word	0x41200000

08001f44 <mlx90632_preprocess_temp_object_extended>:

double mlx90632_preprocess_temp_object_extended(int16_t object_new_raw, int16_t ambient_new_raw,
                                                int16_t ambient_old_raw, int16_t Ka)
{
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4623      	mov	r3, r4
 8001f54:	80fb      	strh	r3, [r7, #6]
 8001f56:	4603      	mov	r3, r0
 8001f58:	80bb      	strh	r3, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	807b      	strh	r3, [r7, #2]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	803b      	strh	r3, [r7, #0]
    double VR_IR, kKa;

    kKa = ((double)Ka) / 1024.0;
 8001f62:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fa80 	bl	800046c <__aeabi_i2d>
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <mlx90632_preprocess_temp_object_extended+0xcc>)
 8001f72:	f7fe fc0f 	bl	8000794 <__aeabi_ddiv>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    VR_IR = ambient_old_raw + kKa * (ambient_new_raw / (MLX90632_REF_3));
 8001f7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fa72 	bl	800046c <__aeabi_i2d>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	460d      	mov	r5, r1
 8001f8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fa6b 	bl	800046c <__aeabi_i2d>
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <mlx90632_preprocess_temp_object_extended+0xd0>)
 8001f9c:	f7fe fbfa 	bl	8000794 <__aeabi_ddiv>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fac:	f7fe fac8 	bl	8000540 <__aeabi_dmul>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	f7fe f90c 	bl	80001d4 <__adddf3>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return ((object_new_raw / (MLX90632_REF_12)) / VR_IR) * 524288.0;
 8001fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa4f 	bl	800046c <__aeabi_i2d>
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <mlx90632_preprocess_temp_object_extended+0xd0>)
 8001fd4:	f7fe fbde 	bl	8000794 <__aeabi_ddiv>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fe4:	f7fe fbd6 	bl	8000794 <__aeabi_ddiv>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <mlx90632_preprocess_temp_object_extended+0xd4>)
 8001ff6:	f7fe faa3 	bl	8000540 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	ec43 2b17 	vmov	d7, r2, r3
}
 8002002:	eeb0 0a47 	vmov.f32	s0, s14
 8002006:	eef0 0a67 	vmov.f32	s1, s15
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}
 8002010:	40900000 	.word	0x40900000
 8002014:	40280000 	.word	0x40280000
 8002018:	41200000 	.word	0x41200000

0800201c <mlx90632_calc_temp_ambient_extended>:

double mlx90632_calc_temp_ambient_extended(int16_t ambient_new_raw, int16_t ambient_old_raw, int32_t P_T,
                                           int32_t P_R, int32_t P_G, int32_t P_O, int16_t Gb)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b090      	sub	sp, #64	; 0x40
 8002020:	af00      	add	r7, sp, #0
 8002022:	60ba      	str	r2, [r7, #8]
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4603      	mov	r3, r0
 8002028:	81fb      	strh	r3, [r7, #14]
 800202a:	460b      	mov	r3, r1
 800202c:	81bb      	strh	r3, [r7, #12]
    double Asub, Bsub, Ablock, Bblock, Cblock, AMB;

    AMB = mlx90632_preprocess_temp_ambient_extended(ambient_new_raw, ambient_old_raw, Gb);
 800202e:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 8002032:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002036:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff1c 	bl	8001e78 <mlx90632_preprocess_temp_ambient_extended>
 8002040:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

    Asub = ((double)P_T) / (double)17592186044416.0;
 8002044:	68b8      	ldr	r0, [r7, #8]
 8002046:	f7fe fa11 	bl	800046c <__aeabi_i2d>
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	4b32      	ldr	r3, [pc, #200]	; (8002118 <mlx90632_calc_temp_ambient_extended+0xfc>)
 8002050:	f7fe fba0 	bl	8000794 <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Bsub = AMB - ((double)P_R / (double)256.0);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7fe fa05 	bl	800046c <__aeabi_i2d>
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <mlx90632_calc_temp_ambient_extended+0x100>)
 8002068:	f7fe fb94 	bl	8000794 <__aeabi_ddiv>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002074:	f7fe f8ac 	bl	80001d0 <__aeabi_dsub>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    Ablock = Asub * (Bsub * Bsub);
 8002080:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002084:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002088:	f7fe fa5a 	bl	8000540 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002094:	f7fe fa54 	bl	8000540 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Bblock = (Bsub / (double)P_G) * (double)1048576.0;
 80020a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80020a2:	f7fe f9e3 	bl	800046c <__aeabi_i2d>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020ae:	f7fe fb71 	bl	8000794 <__aeabi_ddiv>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <mlx90632_calc_temp_ambient_extended+0x104>)
 80020c0:	f7fe fa3e 	bl	8000540 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    Cblock = (double)P_O / (double)256.0;
 80020cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80020ce:	f7fe f9cd 	bl	800046c <__aeabi_i2d>
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <mlx90632_calc_temp_ambient_extended+0x100>)
 80020d8:	f7fe fb5c 	bl	8000794 <__aeabi_ddiv>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return Bblock + Ablock + Cblock;
 80020e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ec:	f7fe f872 	bl	80001d4 <__adddf3>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020fc:	f7fe f86a 	bl	80001d4 <__adddf3>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	ec43 2b17 	vmov	d7, r2, r3
}
 8002108:	eeb0 0a47 	vmov.f32	s0, s14
 800210c:	eef0 0a67 	vmov.f32	s1, s15
 8002110:	3740      	adds	r7, #64	; 0x40
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	42b00000 	.word	0x42b00000
 800211c:	40700000 	.word	0x40700000
 8002120:	41300000 	.word	0x41300000
 8002124:	00000000 	.word	0x00000000

08002128 <mlx90632_calc_temp_object_iteration_extended>:
 * @return Calculated object temperature for current iteration in milliCelsius
 */
static double mlx90632_calc_temp_object_iteration_extended(double prev_object_temp, int32_t object, double TAdut, double TaTr4,
                                                           int32_t Ga, int32_t Fa, int32_t Fb, int16_t Ha, int16_t Hb,
                                                           double emissivity)
{
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	b09c      	sub	sp, #112	; 0x70
 800212c:	af00      	add	r7, sp, #0
 800212e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8002132:	6278      	str	r0, [r7, #36]	; 0x24
 8002134:	ed87 1b06 	vstr	d1, [r7, #24]
 8002138:	ed87 2b04 	vstr	d2, [r7, #16]
 800213c:	6239      	str	r1, [r7, #32]
 800213e:	60fa      	str	r2, [r7, #12]
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	ed87 3b00 	vstr	d3, [r7]
    double calcedGa, calcedGb, calcedFa, first_sqrt;
    // temp variables
    double KsTAtmp, Alpha_corr;
    double Ha_customer, Hb_customer;

    Ha_customer = Ha / ((double)16384.0);
 8002146:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe f98e 	bl	800046c <__aeabi_i2d>
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	4b74      	ldr	r3, [pc, #464]	; (8002328 <mlx90632_calc_temp_object_iteration_extended+0x200>)
 8002156:	f7fe fb1d 	bl	8000794 <__aeabi_ddiv>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    Hb_customer = Hb / ((double)1024.0);
 8002162:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f980 	bl	800046c <__aeabi_i2d>
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b6e      	ldr	r3, [pc, #440]	; (800232c <mlx90632_calc_temp_object_iteration_extended+0x204>)
 8002172:	f7fe fb0f 	bl	8000794 <__aeabi_ddiv>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    calcedGa = ((double)Ga * (prev_object_temp - 25)) / ((double)68719476736.0);
 800217e:	6a38      	ldr	r0, [r7, #32]
 8002180:	f7fe f974 	bl	800046c <__aeabi_i2d>
 8002184:	4604      	mov	r4, r0
 8002186:	460d      	mov	r5, r1
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	4b68      	ldr	r3, [pc, #416]	; (8002330 <mlx90632_calc_temp_object_iteration_extended+0x208>)
 800218e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002192:	f7fe f81d 	bl	80001d0 <__aeabi_dsub>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4620      	mov	r0, r4
 800219c:	4629      	mov	r1, r5
 800219e:	f7fe f9cf 	bl	8000540 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	4b61      	ldr	r3, [pc, #388]	; (8002334 <mlx90632_calc_temp_object_iteration_extended+0x20c>)
 80021b0:	f7fe faf0 	bl	8000794 <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    KsTAtmp = (double)Fb * (TAdut - 25);
 80021bc:	68b8      	ldr	r0, [r7, #8]
 80021be:	f7fe f955 	bl	800046c <__aeabi_i2d>
 80021c2:	4604      	mov	r4, r0
 80021c4:	460d      	mov	r5, r1
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b59      	ldr	r3, [pc, #356]	; (8002330 <mlx90632_calc_temp_object_iteration_extended+0x208>)
 80021cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021d0:	f7fd fffe 	bl	80001d0 <__aeabi_dsub>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4620      	mov	r0, r4
 80021da:	4629      	mov	r1, r5
 80021dc:	f7fe f9b0 	bl	8000540 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    calcedGb = KsTAtmp / ((double)68719476736.0);
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	4b51      	ldr	r3, [pc, #324]	; (8002334 <mlx90632_calc_temp_object_iteration_extended+0x20c>)
 80021ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80021f2:	f7fe facf 	bl	8000794 <__aeabi_ddiv>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    Alpha_corr = (((double)(Fa * POW10)) * Ha_customer * (double)(1.0 + calcedGa + calcedGb)) /
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	461a      	mov	r2, r3
 8002202:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002206:	494c      	ldr	r1, [pc, #304]	; (8002338 <mlx90632_calc_temp_object_iteration_extended+0x210>)
 8002208:	fb01 f003 	mul.w	r0, r1, r3
 800220c:	2102      	movs	r1, #2
 800220e:	fb01 f102 	mul.w	r1, r1, r2
 8002212:	4401      	add	r1, r0
 8002214:	4848      	ldr	r0, [pc, #288]	; (8002338 <mlx90632_calc_temp_object_iteration_extended+0x210>)
 8002216:	fba2 2300 	umull	r2, r3, r2, r0
 800221a:	4419      	add	r1, r3
 800221c:	460b      	mov	r3, r1
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	f7fe f95f 	bl	80004e4 <__aeabi_l2d>
 8002226:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800222a:	f7fe f989 	bl	8000540 <__aeabi_dmul>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4614      	mov	r4, r2
 8002234:	461d      	mov	r5, r3
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b40      	ldr	r3, [pc, #256]	; (800233c <mlx90632_calc_temp_object_iteration_extended+0x214>)
 800223c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002240:	f7fd ffc8 	bl	80001d4 <__adddf3>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002250:	f7fd ffc0 	bl	80001d4 <__adddf3>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4620      	mov	r0, r4
 800225a:	4629      	mov	r1, r5
 800225c:	f7fe f970 	bl	8000540 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	4b34      	ldr	r3, [pc, #208]	; (8002340 <mlx90632_calc_temp_object_iteration_extended+0x218>)
 800226e:	f7fe fa91 	bl	8000794 <__aeabi_ddiv>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                 ((double)70368744177664.0);
    calcedFa = object / (emissivity * (Alpha_corr / POW10));
 800227a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800227c:	f7fe f8f6 	bl	800046c <__aeabi_i2d>
 8002280:	4604      	mov	r4, r0
 8002282:	460d      	mov	r5, r1
 8002284:	a324      	add	r3, pc, #144	; (adr r3, 8002318 <mlx90632_calc_temp_object_iteration_extended+0x1f0>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800228e:	f7fe fa81 	bl	8000794 <__aeabi_ddiv>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800229e:	f7fe f94f 	bl	8000540 <__aeabi_dmul>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4620      	mov	r0, r4
 80022a8:	4629      	mov	r1, r5
 80022aa:	f7fe fa73 	bl	8000794 <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

    first_sqrt = sqrt(calcedFa + TaTr4);
 80022b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80022be:	f7fd ff89 	bl	80001d4 <__adddf3>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	ec43 2b17 	vmov	d7, r2, r3
 80022ca:	eeb0 0a47 	vmov.f32	s0, s14
 80022ce:	eef0 0a67 	vmov.f32	s1, s15
 80022d2:	f008 f82f 	bl	800a334 <sqrt>
 80022d6:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

    return sqrt(first_sqrt) - 273.15 - Hb_customer;
 80022da:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80022de:	f008 f829 	bl	800a334 <sqrt>
 80022e2:	ec51 0b10 	vmov	r0, r1, d0
 80022e6:	a30e      	add	r3, pc, #56	; (adr r3, 8002320 <mlx90632_calc_temp_object_iteration_extended+0x1f8>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fd ff70 	bl	80001d0 <__aeabi_dsub>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80022fc:	f7fd ff68 	bl	80001d0 <__aeabi_dsub>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	ec43 2b17 	vmov	d7, r2, r3
}
 8002308:	eeb0 0a47 	vmov.f32	s0, s14
 800230c:	eef0 0a67 	vmov.f32	s1, s15
 8002310:	3770      	adds	r7, #112	; 0x70
 8002312:	46bd      	mov	sp, r7
 8002314:	bdb0      	pop	{r4, r5, r7, pc}
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000
 800231c:	4202a05f 	.word	0x4202a05f
 8002320:	66666666 	.word	0x66666666
 8002324:	40711266 	.word	0x40711266
 8002328:	40d00000 	.word	0x40d00000
 800232c:	40900000 	.word	0x40900000
 8002330:	40390000 	.word	0x40390000
 8002334:	42300000 	.word	0x42300000
 8002338:	540be400 	.word	0x540be400
 800233c:	3ff00000 	.word	0x3ff00000
 8002340:	42d00000 	.word	0x42d00000
 8002344:	00000000 	.word	0x00000000

08002348 <mlx90632_calc_temp_object_extended>:

double mlx90632_calc_temp_object_extended(int32_t object, int32_t ambient, double reflected,
                                          int32_t Ea, int32_t Eb, int32_t Ga, int32_t Fa, int32_t Fb,
                                          int16_t Ha, int16_t Hb)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b098      	sub	sp, #96	; 0x60
 800234c:	af02      	add	r7, sp, #8
 800234e:	6178      	str	r0, [r7, #20]
 8002350:	6139      	str	r1, [r7, #16]
 8002352:	ed87 0b02 	vstr	d0, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	603b      	str	r3, [r7, #0]
    double kEa, kEb, TAdut;
    double temp = 25.0;
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	4b64      	ldr	r3, [pc, #400]	; (80024f0 <mlx90632_calc_temp_object_extended+0x1a8>)
 8002360:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    double tmp_emi = mlx90632_get_emissivity();
 8002364:	f7ff fb06 	bl	8001974 <mlx90632_get_emissivity>
 8002368:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    double TaTr4;
    double ta4;
    int8_t i;

    kEa = ((double)Ea) / ((double)65536.0);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7fe f87d 	bl	800046c <__aeabi_i2d>
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	4b5f      	ldr	r3, [pc, #380]	; (80024f4 <mlx90632_calc_temp_object_extended+0x1ac>)
 8002378:	f7fe fa0c 	bl	8000794 <__aeabi_ddiv>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    kEb = ((double)Eb) / ((double)256.0);
 8002384:	6838      	ldr	r0, [r7, #0]
 8002386:	f7fe f871 	bl	800046c <__aeabi_i2d>
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	4b5a      	ldr	r3, [pc, #360]	; (80024f8 <mlx90632_calc_temp_object_extended+0x1b0>)
 8002390:	f7fe fa00 	bl	8000794 <__aeabi_ddiv>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    TAdut = (((double)ambient) - kEb) / kEa + 25;
 800239c:	6938      	ldr	r0, [r7, #16]
 800239e:	f7fe f865 	bl	800046c <__aeabi_i2d>
 80023a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023a6:	f7fd ff13 	bl	80001d0 <__aeabi_dsub>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023b6:	f7fe f9ed 	bl	8000794 <__aeabi_ddiv>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <mlx90632_calc_temp_object_extended+0x1a8>)
 80023c8:	f7fd ff04 	bl	80001d4 <__adddf3>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    TaTr4 = reflected + 273.15;
 80023d4:	a344      	add	r3, pc, #272	; (adr r3, 80024e8 <mlx90632_calc_temp_object_extended+0x1a0>)
 80023d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023de:	f7fd fef9 	bl	80001d4 <__adddf3>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    TaTr4 = TaTr4 * TaTr4;
 80023ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023f2:	f7fe f8a5 	bl	8000540 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    TaTr4 = TaTr4 * TaTr4;
 80023fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002402:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002406:	f7fe f89b 	bl	8000540 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ta4 = TAdut + 273.15;
 8002412:	a335      	add	r3, pc, #212	; (adr r3, 80024e8 <mlx90632_calc_temp_object_extended+0x1a0>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800241c:	f7fd feda 	bl	80001d4 <__adddf3>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ta4 = ta4 * ta4;
 8002428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800242c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002430:	f7fe f886 	bl	8000540 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ta4 = ta4 * ta4;
 800243c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002440:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002444:	f7fe f87c 	bl	8000540 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TaTr4 = TaTr4 - (TaTr4 - ta4) / tmp_emi;
 8002450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002454:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002458:	f7fd feba 	bl	80001d0 <__aeabi_dsub>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002468:	f7fe f994 	bl	8000794 <__aeabi_ddiv>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002474:	f7fd feac 	bl	80001d0 <__aeabi_dsub>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	e9c7 2308 	strd	r2, r3, [r7, #32]

    //iterate through calculations
    for (i = 0; i < 5; ++i)
 8002480:	2300      	movs	r3, #0
 8002482:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002486:	e01f      	b.n	80024c8 <mlx90632_calc_temp_object_extended+0x180>
    {
        temp = mlx90632_calc_temp_object_iteration_extended(temp, object, TAdut, TaTr4, Ga, Fa / 2, Fb, Ha, Hb, tmp_emi);
 8002488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800248a:	0fda      	lsrs	r2, r3, #31
 800248c:	4413      	add	r3, r2
 800248e:	105b      	asrs	r3, r3, #1
 8002490:	461a      	mov	r2, r3
 8002492:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	ed97 3b10 	vldr	d3, [r7, #64]	; 0x40
 80024a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80024a6:	ed97 2b08 	vldr	d2, [r7, #32]
 80024aa:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 80024ae:	6978      	ldr	r0, [r7, #20]
 80024b0:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80024b4:	f7ff fe38 	bl	8002128 <mlx90632_calc_temp_object_iteration_extended>
 80024b8:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    for (i = 0; i < 5; ++i)
 80024bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024c0:	3301      	adds	r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80024c8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	dddb      	ble.n	8002488 <mlx90632_calc_temp_object_extended+0x140>
    }

    return temp;
 80024d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80024d8:	eeb0 0a47 	vmov.f32	s0, s14
 80024dc:	eef0 0a67 	vmov.f32	s1, s15
 80024e0:	3758      	adds	r7, #88	; 0x58
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	66666666 	.word	0x66666666
 80024ec:	40711266 	.word	0x40711266
 80024f0:	40390000 	.word	0x40390000
 80024f4:	40f00000 	.word	0x40f00000
 80024f8:	40700000 	.word	0x40700000

080024fc <mlx90632_set_meas_type>:

int32_t mlx90632_set_meas_type(uint8_t type, I2C_HandleTypeDef hi2c)
{
 80024fc:	b084      	sub	sp, #16
 80024fe:	b590      	push	{r4, r7, lr}
 8002500:	b099      	sub	sp, #100	; 0x64
 8002502:	af14      	add	r7, sp, #80	; 0x50
 8002504:	4604      	mov	r4, r0
 8002506:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800250a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800250e:	4623      	mov	r3, r4
 8002510:	71fb      	strb	r3, [r7, #7]
    int32_t ret;
    uint16_t reg_ctrl;

    if ((type != MLX90632_MTYP_MEDICAL) & (type != MLX90632_MTYP_EXTENDED) & (type != MLX90632_MTYP_MEDICAL_BURST) & (type != MLX90632_MTYP_EXTENDED_BURST))
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2da      	uxtb	r2, r3
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b11      	cmp	r3, #17
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4013      	ands	r3, r2
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	2b80      	cmp	r3, #128	; 0x80
 8002534:	bf14      	ite	ne
 8002536:	2301      	movne	r3, #1
 8002538:	2300      	moveq	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4013      	ands	r3, r2
 800253e:	79fa      	ldrb	r2, [r7, #7]
 8002540:	2a91      	cmp	r2, #145	; 0x91
 8002542:	bf14      	ite	ne
 8002544:	2201      	movne	r2, #1
 8002546:	2200      	moveq	r2, #0
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <mlx90632_set_meas_type+0x5a>
        return -EINVAL;
 8002550:	f06f 0315 	mvn.w	r3, #21
 8002554:	e086      	b.n	8002664 <mlx90632_set_meas_type+0x168>

    ret = mlx90632_addressed_reset(hi2c);
 8002556:	4668      	mov	r0, sp
 8002558:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800255c:	2244      	movs	r2, #68	; 0x44
 800255e:	4619      	mov	r1, r3
 8002560:	f007 fed2 	bl	800a308 <memcpy>
 8002564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800256a:	f7ff fa23 	bl	80019b4 <mlx90632_addressed_reset>
 800256e:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	da01      	bge.n	800257a <mlx90632_set_meas_type+0x7e>
        return ret;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	e074      	b.n	8002664 <mlx90632_set_meas_type+0x168>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl, hi2c);
 800257a:	f107 040a 	add.w	r4, r7, #10
 800257e:	4668      	mov	r0, sp
 8002580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002584:	224c      	movs	r2, #76	; 0x4c
 8002586:	4619      	mov	r1, r3
 8002588:	f007 febe 	bl	800a308 <memcpy>
 800258c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002590:	cb0c      	ldmia	r3, {r2, r3}
 8002592:	4621      	mov	r1, r4
 8002594:	f243 0001 	movw	r0, #12289	; 0x3001
 8002598:	f7ff fa6e 	bl	8001a78 <mlx90632_i2c_read>
 800259c:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	da01      	bge.n	80025a8 <mlx90632_set_meas_type+0xac>
        return ret;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	e05d      	b.n	8002664 <mlx90632_set_meas_type+0x168>

    reg_ctrl = reg_ctrl & (~MLX90632_CFG_MTYP_MASK & ~MLX90632_CFG_PWR_MASK);
 80025a8:	897b      	ldrh	r3, [r7, #10]
 80025aa:	817b      	strh	r3, [r7, #10]
    reg_ctrl |= (MLX90632_MTYP_STATUS(MLX90632_MEASUREMENT_TYPE_STATUS(type)) | MLX90632_PWR_STATUS_HALT);
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	b21b      	sxth	r3, r3
 80025b2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	897b      	ldrh	r3, [r7, #10]
 80025ba:	b21b      	sxth	r3, r3
 80025bc:	4313      	orrs	r3, r2
 80025be:	b21b      	sxth	r3, r3
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	817b      	strh	r3, [r7, #10]

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 80025c4:	897c      	ldrh	r4, [r7, #10]
 80025c6:	4668      	mov	r0, sp
 80025c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025cc:	224c      	movs	r2, #76	; 0x4c
 80025ce:	4619      	mov	r1, r3
 80025d0:	f007 fe9a 	bl	800a308 <memcpy>
 80025d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d8:	cb0c      	ldmia	r3, {r2, r3}
 80025da:	4621      	mov	r1, r4
 80025dc:	f243 0001 	movw	r0, #12289	; 0x3001
 80025e0:	f7ff faa7 	bl	8001b32 <mlx90632_i2c_write>
 80025e4:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	da01      	bge.n	80025f0 <mlx90632_set_meas_type+0xf4>
        return ret;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	e039      	b.n	8002664 <mlx90632_set_meas_type+0x168>

    ret = mlx90632_i2c_read(MLX90632_REG_CTRL, &reg_ctrl, hi2c);
 80025f0:	f107 040a 	add.w	r4, r7, #10
 80025f4:	4668      	mov	r0, sp
 80025f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025fa:	224c      	movs	r2, #76	; 0x4c
 80025fc:	4619      	mov	r1, r3
 80025fe:	f007 fe83 	bl	800a308 <memcpy>
 8002602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002606:	cb0c      	ldmia	r3, {r2, r3}
 8002608:	4621      	mov	r1, r4
 800260a:	f243 0001 	movw	r0, #12289	; 0x3001
 800260e:	f7ff fa33 	bl	8001a78 <mlx90632_i2c_read>
 8002612:	60f8      	str	r0, [r7, #12]
    if (ret < 0)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	da01      	bge.n	800261e <mlx90632_set_meas_type+0x122>
        return ret;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	e022      	b.n	8002664 <mlx90632_set_meas_type+0x168>

    reg_ctrl = reg_ctrl & ~MLX90632_CFG_PWR_MASK;
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	817b      	strh	r3, [r7, #10]
    if (MLX90632_MEASUREMENT_BURST_STATUS(type))
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	da05      	bge.n	8002636 <mlx90632_set_meas_type+0x13a>
    {
        reg_ctrl |= MLX90632_PWR_STATUS_SLEEP_STEP;
 800262a:	897b      	ldrh	r3, [r7, #10]
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	b29b      	uxth	r3, r3
 8002632:	817b      	strh	r3, [r7, #10]
 8002634:	e004      	b.n	8002640 <mlx90632_set_meas_type+0x144>
    }
    else
    {
        reg_ctrl |= MLX90632_PWR_STATUS_CONTINUOUS;
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	f043 0306 	orr.w	r3, r3, #6
 800263c:	b29b      	uxth	r3, r3
 800263e:	817b      	strh	r3, [r7, #10]
    }

    ret = mlx90632_i2c_write(MLX90632_REG_CTRL, reg_ctrl, hi2c);
 8002640:	897c      	ldrh	r4, [r7, #10]
 8002642:	4668      	mov	r0, sp
 8002644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002648:	224c      	movs	r2, #76	; 0x4c
 800264a:	4619      	mov	r1, r3
 800264c:	f007 fe5c 	bl	800a308 <memcpy>
 8002650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002654:	cb0c      	ldmia	r3, {r2, r3}
 8002656:	4621      	mov	r1, r4
 8002658:	f243 0001 	movw	r0, #12289	; 0x3001
 800265c:	f7ff fa69 	bl	8001b32 <mlx90632_i2c_write>
 8002660:	60f8      	str	r0, [r7, #12]

    return ret;
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800266e:	b004      	add	sp, #16
 8002670:	4770      	bx	lr
	...

08002674 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c_init) {
 8002674:	b084      	sub	sp, #16
 8002676:	b590      	push	{r4, r7, lr}
 8002678:	b097      	sub	sp, #92	; 0x5c
 800267a:	af14      	add	r7, sp, #80	; 0x50
 800267c:	f107 0418 	add.w	r4, r7, #24
 8002680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 8002684:	f000 fb90 	bl	8002da8 <ssd1306_I2C_Init>

	hi2c = hi2c_init;
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <SSD1306_Init+0x44>)
 800268a:	4618      	mov	r0, r3
 800268c:	f107 0318 	add.w	r3, r7, #24
 8002690:	2254      	movs	r2, #84	; 0x54
 8002692:	4619      	mov	r1, r3
 8002694:	f007 fe38 	bl	800a308 <memcpy>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002698:	f644 6320 	movw	r3, #20000	; 0x4e20
 800269c:	2201      	movs	r2, #1
 800269e:	2178      	movs	r1, #120	; 0x78
 80026a0:	4805      	ldr	r0, [pc, #20]	; (80026b8 <SSD1306_Init+0x44>)
 80026a2:	f001 fe61 	bl	8004368 <HAL_I2C_IsDeviceReady>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e1ee      	b.n	8002a8e <SSD1306_Init+0x41a>
	}

	/* A little delay */
	uint32_t p = 2500;
 80026b0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80026b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026b6:	e004      	b.n	80026c2 <SSD1306_Init+0x4e>
 80026b8:	200009d8 	.word	0x200009d8
		p--;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f9      	bne.n	80026bc <SSD1306_Init+0x48>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80026c8:	4ce1      	ldr	r4, [pc, #900]	; (8002a50 <SSD1306_Init+0x3dc>)
 80026ca:	23ae      	movs	r3, #174	; 0xae
 80026cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80026ce:	4668      	mov	r0, sp
 80026d0:	f104 0308 	add.w	r3, r4, #8
 80026d4:	224c      	movs	r2, #76	; 0x4c
 80026d6:	4619      	mov	r1, r3
 80026d8:	f007 fe16 	bl	800a308 <memcpy>
 80026dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80026e0:	2100      	movs	r1, #0
 80026e2:	2078      	movs	r0, #120	; 0x78
 80026e4:	f000 fbbe 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80026e8:	4cd9      	ldr	r4, [pc, #868]	; (8002a50 <SSD1306_Init+0x3dc>)
 80026ea:	2320      	movs	r3, #32
 80026ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80026ee:	4668      	mov	r0, sp
 80026f0:	f104 0308 	add.w	r3, r4, #8
 80026f4:	224c      	movs	r2, #76	; 0x4c
 80026f6:	4619      	mov	r1, r3
 80026f8:	f007 fe06 	bl	800a308 <memcpy>
 80026fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002700:	2100      	movs	r1, #0
 8002702:	2078      	movs	r0, #120	; 0x78
 8002704:	f000 fbae 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002708:	4cd1      	ldr	r4, [pc, #836]	; (8002a50 <SSD1306_Init+0x3dc>)
 800270a:	2310      	movs	r3, #16
 800270c:	9313      	str	r3, [sp, #76]	; 0x4c
 800270e:	4668      	mov	r0, sp
 8002710:	f104 0308 	add.w	r3, r4, #8
 8002714:	224c      	movs	r2, #76	; 0x4c
 8002716:	4619      	mov	r1, r3
 8002718:	f007 fdf6 	bl	800a308 <memcpy>
 800271c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002720:	2100      	movs	r1, #0
 8002722:	2078      	movs	r0, #120	; 0x78
 8002724:	f000 fb9e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002728:	4cc9      	ldr	r4, [pc, #804]	; (8002a50 <SSD1306_Init+0x3dc>)
 800272a:	23b0      	movs	r3, #176	; 0xb0
 800272c:	9313      	str	r3, [sp, #76]	; 0x4c
 800272e:	4668      	mov	r0, sp
 8002730:	f104 0308 	add.w	r3, r4, #8
 8002734:	224c      	movs	r2, #76	; 0x4c
 8002736:	4619      	mov	r1, r3
 8002738:	f007 fde6 	bl	800a308 <memcpy>
 800273c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002740:	2100      	movs	r1, #0
 8002742:	2078      	movs	r0, #120	; 0x78
 8002744:	f000 fb8e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002748:	4cc1      	ldr	r4, [pc, #772]	; (8002a50 <SSD1306_Init+0x3dc>)
 800274a:	23c8      	movs	r3, #200	; 0xc8
 800274c:	9313      	str	r3, [sp, #76]	; 0x4c
 800274e:	4668      	mov	r0, sp
 8002750:	f104 0308 	add.w	r3, r4, #8
 8002754:	224c      	movs	r2, #76	; 0x4c
 8002756:	4619      	mov	r1, r3
 8002758:	f007 fdd6 	bl	800a308 <memcpy>
 800275c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002760:	2100      	movs	r1, #0
 8002762:	2078      	movs	r0, #120	; 0x78
 8002764:	f000 fb7e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002768:	4cb9      	ldr	r4, [pc, #740]	; (8002a50 <SSD1306_Init+0x3dc>)
 800276a:	2300      	movs	r3, #0
 800276c:	9313      	str	r3, [sp, #76]	; 0x4c
 800276e:	4668      	mov	r0, sp
 8002770:	f104 0308 	add.w	r3, r4, #8
 8002774:	224c      	movs	r2, #76	; 0x4c
 8002776:	4619      	mov	r1, r3
 8002778:	f007 fdc6 	bl	800a308 <memcpy>
 800277c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002780:	2100      	movs	r1, #0
 8002782:	2078      	movs	r0, #120	; 0x78
 8002784:	f000 fb6e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002788:	4cb1      	ldr	r4, [pc, #708]	; (8002a50 <SSD1306_Init+0x3dc>)
 800278a:	2310      	movs	r3, #16
 800278c:	9313      	str	r3, [sp, #76]	; 0x4c
 800278e:	4668      	mov	r0, sp
 8002790:	f104 0308 	add.w	r3, r4, #8
 8002794:	224c      	movs	r2, #76	; 0x4c
 8002796:	4619      	mov	r1, r3
 8002798:	f007 fdb6 	bl	800a308 <memcpy>
 800279c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027a0:	2100      	movs	r1, #0
 80027a2:	2078      	movs	r0, #120	; 0x78
 80027a4:	f000 fb5e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80027a8:	4ca9      	ldr	r4, [pc, #676]	; (8002a50 <SSD1306_Init+0x3dc>)
 80027aa:	2340      	movs	r3, #64	; 0x40
 80027ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80027ae:	4668      	mov	r0, sp
 80027b0:	f104 0308 	add.w	r3, r4, #8
 80027b4:	224c      	movs	r2, #76	; 0x4c
 80027b6:	4619      	mov	r1, r3
 80027b8:	f007 fda6 	bl	800a308 <memcpy>
 80027bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027c0:	2100      	movs	r1, #0
 80027c2:	2078      	movs	r0, #120	; 0x78
 80027c4:	f000 fb4e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80027c8:	4ca1      	ldr	r4, [pc, #644]	; (8002a50 <SSD1306_Init+0x3dc>)
 80027ca:	2381      	movs	r3, #129	; 0x81
 80027cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80027ce:	4668      	mov	r0, sp
 80027d0:	f104 0308 	add.w	r3, r4, #8
 80027d4:	224c      	movs	r2, #76	; 0x4c
 80027d6:	4619      	mov	r1, r3
 80027d8:	f007 fd96 	bl	800a308 <memcpy>
 80027dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027e0:	2100      	movs	r1, #0
 80027e2:	2078      	movs	r0, #120	; 0x78
 80027e4:	f000 fb3e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80027e8:	4c99      	ldr	r4, [pc, #612]	; (8002a50 <SSD1306_Init+0x3dc>)
 80027ea:	23ff      	movs	r3, #255	; 0xff
 80027ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80027ee:	4668      	mov	r0, sp
 80027f0:	f104 0308 	add.w	r3, r4, #8
 80027f4:	224c      	movs	r2, #76	; 0x4c
 80027f6:	4619      	mov	r1, r3
 80027f8:	f007 fd86 	bl	800a308 <memcpy>
 80027fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002800:	2100      	movs	r1, #0
 8002802:	2078      	movs	r0, #120	; 0x78
 8002804:	f000 fb2e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002808:	4c91      	ldr	r4, [pc, #580]	; (8002a50 <SSD1306_Init+0x3dc>)
 800280a:	23a1      	movs	r3, #161	; 0xa1
 800280c:	9313      	str	r3, [sp, #76]	; 0x4c
 800280e:	4668      	mov	r0, sp
 8002810:	f104 0308 	add.w	r3, r4, #8
 8002814:	224c      	movs	r2, #76	; 0x4c
 8002816:	4619      	mov	r1, r3
 8002818:	f007 fd76 	bl	800a308 <memcpy>
 800281c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002820:	2100      	movs	r1, #0
 8002822:	2078      	movs	r0, #120	; 0x78
 8002824:	f000 fb1e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002828:	4c89      	ldr	r4, [pc, #548]	; (8002a50 <SSD1306_Init+0x3dc>)
 800282a:	23a6      	movs	r3, #166	; 0xa6
 800282c:	9313      	str	r3, [sp, #76]	; 0x4c
 800282e:	4668      	mov	r0, sp
 8002830:	f104 0308 	add.w	r3, r4, #8
 8002834:	224c      	movs	r2, #76	; 0x4c
 8002836:	4619      	mov	r1, r3
 8002838:	f007 fd66 	bl	800a308 <memcpy>
 800283c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002840:	2100      	movs	r1, #0
 8002842:	2078      	movs	r0, #120	; 0x78
 8002844:	f000 fb0e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002848:	4c81      	ldr	r4, [pc, #516]	; (8002a50 <SSD1306_Init+0x3dc>)
 800284a:	23a8      	movs	r3, #168	; 0xa8
 800284c:	9313      	str	r3, [sp, #76]	; 0x4c
 800284e:	4668      	mov	r0, sp
 8002850:	f104 0308 	add.w	r3, r4, #8
 8002854:	224c      	movs	r2, #76	; 0x4c
 8002856:	4619      	mov	r1, r3
 8002858:	f007 fd56 	bl	800a308 <memcpy>
 800285c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002860:	2100      	movs	r1, #0
 8002862:	2078      	movs	r0, #120	; 0x78
 8002864:	f000 fafe 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002868:	4c79      	ldr	r4, [pc, #484]	; (8002a50 <SSD1306_Init+0x3dc>)
 800286a:	233f      	movs	r3, #63	; 0x3f
 800286c:	9313      	str	r3, [sp, #76]	; 0x4c
 800286e:	4668      	mov	r0, sp
 8002870:	f104 0308 	add.w	r3, r4, #8
 8002874:	224c      	movs	r2, #76	; 0x4c
 8002876:	4619      	mov	r1, r3
 8002878:	f007 fd46 	bl	800a308 <memcpy>
 800287c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002880:	2100      	movs	r1, #0
 8002882:	2078      	movs	r0, #120	; 0x78
 8002884:	f000 faee 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002888:	4c71      	ldr	r4, [pc, #452]	; (8002a50 <SSD1306_Init+0x3dc>)
 800288a:	23a4      	movs	r3, #164	; 0xa4
 800288c:	9313      	str	r3, [sp, #76]	; 0x4c
 800288e:	4668      	mov	r0, sp
 8002890:	f104 0308 	add.w	r3, r4, #8
 8002894:	224c      	movs	r2, #76	; 0x4c
 8002896:	4619      	mov	r1, r3
 8002898:	f007 fd36 	bl	800a308 <memcpy>
 800289c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028a0:	2100      	movs	r1, #0
 80028a2:	2078      	movs	r0, #120	; 0x78
 80028a4:	f000 fade 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80028a8:	4c69      	ldr	r4, [pc, #420]	; (8002a50 <SSD1306_Init+0x3dc>)
 80028aa:	23d3      	movs	r3, #211	; 0xd3
 80028ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80028ae:	4668      	mov	r0, sp
 80028b0:	f104 0308 	add.w	r3, r4, #8
 80028b4:	224c      	movs	r2, #76	; 0x4c
 80028b6:	4619      	mov	r1, r3
 80028b8:	f007 fd26 	bl	800a308 <memcpy>
 80028bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028c0:	2100      	movs	r1, #0
 80028c2:	2078      	movs	r0, #120	; 0x78
 80028c4:	f000 face 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80028c8:	4c61      	ldr	r4, [pc, #388]	; (8002a50 <SSD1306_Init+0x3dc>)
 80028ca:	2300      	movs	r3, #0
 80028cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80028ce:	4668      	mov	r0, sp
 80028d0:	f104 0308 	add.w	r3, r4, #8
 80028d4:	224c      	movs	r2, #76	; 0x4c
 80028d6:	4619      	mov	r1, r3
 80028d8:	f007 fd16 	bl	800a308 <memcpy>
 80028dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028e0:	2100      	movs	r1, #0
 80028e2:	2078      	movs	r0, #120	; 0x78
 80028e4:	f000 fabe 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80028e8:	4c59      	ldr	r4, [pc, #356]	; (8002a50 <SSD1306_Init+0x3dc>)
 80028ea:	23d5      	movs	r3, #213	; 0xd5
 80028ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80028ee:	4668      	mov	r0, sp
 80028f0:	f104 0308 	add.w	r3, r4, #8
 80028f4:	224c      	movs	r2, #76	; 0x4c
 80028f6:	4619      	mov	r1, r3
 80028f8:	f007 fd06 	bl	800a308 <memcpy>
 80028fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002900:	2100      	movs	r1, #0
 8002902:	2078      	movs	r0, #120	; 0x78
 8002904:	f000 faae 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002908:	4c51      	ldr	r4, [pc, #324]	; (8002a50 <SSD1306_Init+0x3dc>)
 800290a:	23f0      	movs	r3, #240	; 0xf0
 800290c:	9313      	str	r3, [sp, #76]	; 0x4c
 800290e:	4668      	mov	r0, sp
 8002910:	f104 0308 	add.w	r3, r4, #8
 8002914:	224c      	movs	r2, #76	; 0x4c
 8002916:	4619      	mov	r1, r3
 8002918:	f007 fcf6 	bl	800a308 <memcpy>
 800291c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002920:	2100      	movs	r1, #0
 8002922:	2078      	movs	r0, #120	; 0x78
 8002924:	f000 fa9e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002928:	4c49      	ldr	r4, [pc, #292]	; (8002a50 <SSD1306_Init+0x3dc>)
 800292a:	23d9      	movs	r3, #217	; 0xd9
 800292c:	9313      	str	r3, [sp, #76]	; 0x4c
 800292e:	4668      	mov	r0, sp
 8002930:	f104 0308 	add.w	r3, r4, #8
 8002934:	224c      	movs	r2, #76	; 0x4c
 8002936:	4619      	mov	r1, r3
 8002938:	f007 fce6 	bl	800a308 <memcpy>
 800293c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002940:	2100      	movs	r1, #0
 8002942:	2078      	movs	r0, #120	; 0x78
 8002944:	f000 fa8e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002948:	4c41      	ldr	r4, [pc, #260]	; (8002a50 <SSD1306_Init+0x3dc>)
 800294a:	2322      	movs	r3, #34	; 0x22
 800294c:	9313      	str	r3, [sp, #76]	; 0x4c
 800294e:	4668      	mov	r0, sp
 8002950:	f104 0308 	add.w	r3, r4, #8
 8002954:	224c      	movs	r2, #76	; 0x4c
 8002956:	4619      	mov	r1, r3
 8002958:	f007 fcd6 	bl	800a308 <memcpy>
 800295c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002960:	2100      	movs	r1, #0
 8002962:	2078      	movs	r0, #120	; 0x78
 8002964:	f000 fa7e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002968:	4c39      	ldr	r4, [pc, #228]	; (8002a50 <SSD1306_Init+0x3dc>)
 800296a:	23da      	movs	r3, #218	; 0xda
 800296c:	9313      	str	r3, [sp, #76]	; 0x4c
 800296e:	4668      	mov	r0, sp
 8002970:	f104 0308 	add.w	r3, r4, #8
 8002974:	224c      	movs	r2, #76	; 0x4c
 8002976:	4619      	mov	r1, r3
 8002978:	f007 fcc6 	bl	800a308 <memcpy>
 800297c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002980:	2100      	movs	r1, #0
 8002982:	2078      	movs	r0, #120	; 0x78
 8002984:	f000 fa6e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002988:	4c31      	ldr	r4, [pc, #196]	; (8002a50 <SSD1306_Init+0x3dc>)
 800298a:	2312      	movs	r3, #18
 800298c:	9313      	str	r3, [sp, #76]	; 0x4c
 800298e:	4668      	mov	r0, sp
 8002990:	f104 0308 	add.w	r3, r4, #8
 8002994:	224c      	movs	r2, #76	; 0x4c
 8002996:	4619      	mov	r1, r3
 8002998:	f007 fcb6 	bl	800a308 <memcpy>
 800299c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80029a0:	2100      	movs	r1, #0
 80029a2:	2078      	movs	r0, #120	; 0x78
 80029a4:	f000 fa5e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80029a8:	4c29      	ldr	r4, [pc, #164]	; (8002a50 <SSD1306_Init+0x3dc>)
 80029aa:	23db      	movs	r3, #219	; 0xdb
 80029ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80029ae:	4668      	mov	r0, sp
 80029b0:	f104 0308 	add.w	r3, r4, #8
 80029b4:	224c      	movs	r2, #76	; 0x4c
 80029b6:	4619      	mov	r1, r3
 80029b8:	f007 fca6 	bl	800a308 <memcpy>
 80029bc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80029c0:	2100      	movs	r1, #0
 80029c2:	2078      	movs	r0, #120	; 0x78
 80029c4:	f000 fa4e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80029c8:	4c21      	ldr	r4, [pc, #132]	; (8002a50 <SSD1306_Init+0x3dc>)
 80029ca:	2320      	movs	r3, #32
 80029cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80029ce:	4668      	mov	r0, sp
 80029d0:	f104 0308 	add.w	r3, r4, #8
 80029d4:	224c      	movs	r2, #76	; 0x4c
 80029d6:	4619      	mov	r1, r3
 80029d8:	f007 fc96 	bl	800a308 <memcpy>
 80029dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80029e0:	2100      	movs	r1, #0
 80029e2:	2078      	movs	r0, #120	; 0x78
 80029e4:	f000 fa3e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80029e8:	4c19      	ldr	r4, [pc, #100]	; (8002a50 <SSD1306_Init+0x3dc>)
 80029ea:	238d      	movs	r3, #141	; 0x8d
 80029ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80029ee:	4668      	mov	r0, sp
 80029f0:	f104 0308 	add.w	r3, r4, #8
 80029f4:	224c      	movs	r2, #76	; 0x4c
 80029f6:	4619      	mov	r1, r3
 80029f8:	f007 fc86 	bl	800a308 <memcpy>
 80029fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a00:	2100      	movs	r1, #0
 8002a02:	2078      	movs	r0, #120	; 0x78
 8002a04:	f000 fa2e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002a08:	4c11      	ldr	r4, [pc, #68]	; (8002a50 <SSD1306_Init+0x3dc>)
 8002a0a:	2314      	movs	r3, #20
 8002a0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a0e:	4668      	mov	r0, sp
 8002a10:	f104 0308 	add.w	r3, r4, #8
 8002a14:	224c      	movs	r2, #76	; 0x4c
 8002a16:	4619      	mov	r1, r3
 8002a18:	f007 fc76 	bl	800a308 <memcpy>
 8002a1c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a20:	2100      	movs	r1, #0
 8002a22:	2078      	movs	r0, #120	; 0x78
 8002a24:	f000 fa1e 	bl	8002e64 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002a28:	4c09      	ldr	r4, [pc, #36]	; (8002a50 <SSD1306_Init+0x3dc>)
 8002a2a:	23af      	movs	r3, #175	; 0xaf
 8002a2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a2e:	4668      	mov	r0, sp
 8002a30:	f104 0308 	add.w	r3, r4, #8
 8002a34:	224c      	movs	r2, #76	; 0x4c
 8002a36:	4619      	mov	r1, r3
 8002a38:	f007 fc66 	bl	800a308 <memcpy>
 8002a3c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a40:	2100      	movs	r1, #0
 8002a42:	2078      	movs	r0, #120	; 0x78
 8002a44:	f000 fa0e 	bl	8002e64 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002a48:	4c01      	ldr	r4, [pc, #4]	; (8002a50 <SSD1306_Init+0x3dc>)
 8002a4a:	232e      	movs	r3, #46	; 0x2e
 8002a4c:	e002      	b.n	8002a54 <SSD1306_Init+0x3e0>
 8002a4e:	bf00      	nop
 8002a50:	200009d8 	.word	0x200009d8
 8002a54:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a56:	4668      	mov	r0, sp
 8002a58:	f104 0308 	add.w	r3, r4, #8
 8002a5c:	224c      	movs	r2, #76	; 0x4c
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f007 fc52 	bl	800a308 <memcpy>
 8002a64:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2078      	movs	r0, #120	; 0x78
 8002a6c:	f000 f9fa 	bl	8002e64 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f000 f865 	bl	8002b40 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002a76:	f000 f813 	bl	8002aa0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <SSD1306_Init+0x428>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <SSD1306_Init+0x428>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <SSD1306_Init+0x428>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002a8c:	2301      	movs	r3, #1
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002a98:	b004      	add	sp, #16
 8002a9a:	4770      	bx	lr
 8002a9c:	20000650 	.word	0x20000650

08002aa0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b097      	sub	sp, #92	; 0x5c
 8002aa4:	af14      	add	r7, sp, #80	; 0x50
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	71fb      	strb	r3, [r7, #7]
 8002aaa:	e03d      	b.n	8002b28 <SSD1306_UpdateScreen+0x88>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	3b50      	subs	r3, #80	; 0x50
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	4c21      	ldr	r4, [pc, #132]	; (8002b38 <SSD1306_UpdateScreen+0x98>)
 8002ab4:	9313      	str	r3, [sp, #76]	; 0x4c
 8002ab6:	4668      	mov	r0, sp
 8002ab8:	f104 0308 	add.w	r3, r4, #8
 8002abc:	224c      	movs	r2, #76	; 0x4c
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f007 fc22 	bl	800a308 <memcpy>
 8002ac4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2078      	movs	r0, #120	; 0x78
 8002acc:	f000 f9ca 	bl	8002e64 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002ad0:	4c19      	ldr	r4, [pc, #100]	; (8002b38 <SSD1306_UpdateScreen+0x98>)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9313      	str	r3, [sp, #76]	; 0x4c
 8002ad6:	4668      	mov	r0, sp
 8002ad8:	f104 0308 	add.w	r3, r4, #8
 8002adc:	224c      	movs	r2, #76	; 0x4c
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f007 fc12 	bl	800a308 <memcpy>
 8002ae4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002ae8:	2100      	movs	r1, #0
 8002aea:	2078      	movs	r0, #120	; 0x78
 8002aec:	f000 f9ba 	bl	8002e64 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002af0:	4c11      	ldr	r4, [pc, #68]	; (8002b38 <SSD1306_UpdateScreen+0x98>)
 8002af2:	2310      	movs	r3, #16
 8002af4:	9313      	str	r3, [sp, #76]	; 0x4c
 8002af6:	4668      	mov	r0, sp
 8002af8:	f104 0308 	add.w	r3, r4, #8
 8002afc:	224c      	movs	r2, #76	; 0x4c
 8002afe:	4619      	mov	r1, r3
 8002b00:	f007 fc02 	bl	800a308 <memcpy>
 8002b04:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002b08:	2100      	movs	r1, #0
 8002b0a:	2078      	movs	r0, #120	; 0x78
 8002b0c:	f000 f9aa 	bl	8002e64 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	01db      	lsls	r3, r3, #7
 8002b14:	4a09      	ldr	r2, [pc, #36]	; (8002b3c <SSD1306_UpdateScreen+0x9c>)
 8002b16:	441a      	add	r2, r3
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	2140      	movs	r1, #64	; 0x40
 8002b1c:	2078      	movs	r0, #120	; 0x78
 8002b1e:	f000 f959 	bl	8002dd4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	3301      	adds	r3, #1
 8002b26:	71fb      	strb	r3, [r7, #7]
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	2b07      	cmp	r3, #7
 8002b2c:	d9be      	bls.n	8002aac <SSD1306_UpdateScreen+0xc>
	}
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd90      	pop	{r4, r7, pc}
 8002b38:	200009d8 	.word	0x200009d8
 8002b3c:	20000250 	.word	0x20000250

08002b40 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <SSD1306_Fill+0x14>
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <SSD1306_Fill+0x16>
 8002b54:	23ff      	movs	r3, #255	; 0xff
 8002b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4803      	ldr	r0, [pc, #12]	; (8002b6c <SSD1306_Fill+0x2c>)
 8002b5e:	f007 fbe1 	bl	800a324 <memset>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000250 	.word	0x20000250

08002b70 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	80bb      	strh	r3, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	70fb      	strb	r3, [r7, #3]
	if (
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2b7f      	cmp	r3, #127	; 0x7f
 8002b86:	d848      	bhi.n	8002c1a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002b88:	88bb      	ldrh	r3, [r7, #4]
 8002b8a:	2b3f      	cmp	r3, #63	; 0x3f
 8002b8c:	d845      	bhi.n	8002c1a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002b8e:	4b26      	ldr	r3, [pc, #152]	; (8002c28 <SSD1306_DrawPixel+0xb8>)
 8002b90:	791b      	ldrb	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d11a      	bne.n	8002be0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	88bb      	ldrh	r3, [r7, #4]
 8002bae:	08db      	lsrs	r3, r3, #3
 8002bb0:	b298      	uxth	r0, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	01db      	lsls	r3, r3, #7
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <SSD1306_DrawPixel+0xbc>)
 8002bba:	5cd3      	ldrb	r3, [r2, r3]
 8002bbc:	b25a      	sxtb	r2, r3
 8002bbe:	88bb      	ldrh	r3, [r7, #4]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	b259      	sxtb	r1, r3
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	01db      	lsls	r3, r3, #7
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b2c9      	uxtb	r1, r1
 8002bda:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <SSD1306_DrawPixel+0xbc>)
 8002bdc:	54d1      	strb	r1, [r2, r3]
 8002bde:	e01d      	b.n	8002c1c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002be0:	88fa      	ldrh	r2, [r7, #6]
 8002be2:	88bb      	ldrh	r3, [r7, #4]
 8002be4:	08db      	lsrs	r3, r3, #3
 8002be6:	b298      	uxth	r0, r3
 8002be8:	4603      	mov	r3, r0
 8002bea:	01db      	lsls	r3, r3, #7
 8002bec:	4413      	add	r3, r2
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <SSD1306_DrawPixel+0xbc>)
 8002bf0:	5cd3      	ldrb	r3, [r2, r3]
 8002bf2:	b25a      	sxtb	r2, r3
 8002bf4:	88bb      	ldrh	r3, [r7, #4]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	4013      	ands	r3, r2
 8002c08:	b259      	sxtb	r1, r3
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	01db      	lsls	r3, r3, #7
 8002c10:	4413      	add	r3, r2
 8002c12:	b2c9      	uxtb	r1, r1
 8002c14:	4a05      	ldr	r2, [pc, #20]	; (8002c2c <SSD1306_DrawPixel+0xbc>)
 8002c16:	54d1      	strb	r1, [r2, r3]
 8002c18:	e000      	b.n	8002c1c <SSD1306_DrawPixel+0xac>
		return;
 8002c1a:	bf00      	nop
	}
}
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000650 	.word	0x20000650
 8002c2c:	20000250 	.word	0x20000250

08002c30 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	460a      	mov	r2, r1
 8002c3a:	80fb      	strh	r3, [r7, #6]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002c40:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <SSD1306_GotoXY+0x28>)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002c46:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <SSD1306_GotoXY+0x28>)
 8002c48:	88bb      	ldrh	r3, [r7, #4]
 8002c4a:	8053      	strh	r3, [r2, #2]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	20000650 	.word	0x20000650

08002c5c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	71fb      	strb	r3, [r7, #7]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002c6c:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <SSD1306_Putc+0xfc>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	4413      	add	r3, r2
	if (
 8002c78:	2b7f      	cmp	r3, #127	; 0x7f
 8002c7a:	dc07      	bgt.n	8002c8c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <SSD1306_Putc+0xfc>)
 8002c7e:	885b      	ldrh	r3, [r3, #2]
 8002c80:	461a      	mov	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	785b      	ldrb	r3, [r3, #1]
 8002c86:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002c88:	2b3f      	cmp	r3, #63	; 0x3f
 8002c8a:	dd01      	ble.n	8002c90 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e05e      	b.n	8002d4e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e04b      	b.n	8002d2e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	3b20      	subs	r3, #32
 8002c9e:	6839      	ldr	r1, [r7, #0]
 8002ca0:	7849      	ldrb	r1, [r1, #1]
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	440b      	add	r3, r1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	e030      	b.n	8002d1c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002cca:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <SSD1306_Putc+0xfc>)
 8002ccc:	881a      	ldrh	r2, [r3, #0]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	b298      	uxth	r0, r3
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <SSD1306_Putc+0xfc>)
 8002cd8:	885a      	ldrh	r2, [r3, #2]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	79ba      	ldrb	r2, [r7, #6]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f7ff ff43 	bl	8002b70 <SSD1306_DrawPixel>
 8002cea:	e014      	b.n	8002d16 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <SSD1306_Putc+0xfc>)
 8002cee:	881a      	ldrh	r2, [r3, #0]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	b298      	uxth	r0, r3
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <SSD1306_Putc+0xfc>)
 8002cfa:	885a      	ldrh	r2, [r3, #2]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	b299      	uxth	r1, r3
 8002d04:	79bb      	ldrb	r3, [r7, #6]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	f7ff ff2d 	bl	8002b70 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d3c8      	bcc.n	8002cba <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	785b      	ldrb	r3, [r3, #1]
 8002d32:	461a      	mov	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d3ad      	bcc.n	8002c96 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <SSD1306_Putc+0xfc>)
 8002d3c:	881a      	ldrh	r2, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <SSD1306_Putc+0xfc>)
 8002d4a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000650 	.word	0x20000650

08002d5c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002d6a:	e012      	b.n	8002d92 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	79fa      	ldrb	r2, [r7, #7]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff71 	bl	8002c5c <SSD1306_Putc>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d002      	beq.n	8002d8c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	e008      	b.n	8002d9e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e8      	bne.n	8002d6c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <ssd1306_I2C_Init+0x28>)
 8002db0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002db2:	e002      	b.n	8002dba <ssd1306_I2C_Init+0x12>
		p--;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	0003d090 	.word	0x0003d090

08002dd4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b0c7      	sub	sp, #284	; 0x11c
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	4604      	mov	r4, r0
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4639      	mov	r1, r7
 8002de0:	600a      	str	r2, [r1, #0]
 8002de2:	4619      	mov	r1, r3
 8002de4:	1dfb      	adds	r3, r7, #7
 8002de6:	4622      	mov	r2, r4
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	1dbb      	adds	r3, r7, #6
 8002dec:	4602      	mov	r2, r0
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	460a      	mov	r2, r1
 8002df4:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002df6:	f107 030c 	add.w	r3, r7, #12
 8002dfa:	1dba      	adds	r2, r7, #6
 8002dfc:	7812      	ldrb	r2, [r2, #0]
 8002dfe:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002e06:	e010      	b.n	8002e2a <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8002e08:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e0c:	463a      	mov	r2, r7
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	441a      	add	r2, r3
 8002e12:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e16:	3301      	adds	r3, #1
 8002e18:	7811      	ldrb	r1, [r2, #0]
 8002e1a:	f107 020c 	add.w	r2, r7, #12
 8002e1e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8002e20:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e24:	3301      	adds	r3, #1
 8002e26:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002e2a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	1d3a      	adds	r2, r7, #4
 8002e32:	8812      	ldrh	r2, [r2, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d8e7      	bhi.n	8002e08 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8002e38:	1dfb      	adds	r3, r7, #7
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b299      	uxth	r1, r3
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	3301      	adds	r3, #1
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f107 020c 	add.w	r2, r7, #12
 8002e4a:	200a      	movs	r0, #10
 8002e4c:	9000      	str	r0, [sp, #0]
 8002e4e:	4804      	ldr	r0, [pc, #16]	; (8002e60 <ssd1306_I2C_WriteMulti+0x8c>)
 8002e50:	f000 fe6c 	bl	8003b2c <HAL_I2C_Master_Transmit>
}
 8002e54:	bf00      	nop
 8002e56:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd90      	pop	{r4, r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200009d8 	.word	0x200009d8

08002e64 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, I2C_HandleTypeDef hi2c, uint8_t data) {
 8002e64:	b082      	sub	sp, #8
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af02      	add	r7, sp, #8
 8002e6c:	f107 0c18 	add.w	ip, r7, #24
 8002e70:	e88c 000c 	stmia.w	ip, {r2, r3}
 8002e74:	4603      	mov	r3, r0
 8002e76:	71fb      	strb	r3, [r7, #7]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	71bb      	strb	r3, [r7, #6]
	uint8_t dt[2];
	dt[0] = reg;
 8002e7c:	79bb      	ldrb	r3, [r7, #6]
 8002e7e:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002e80:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002e84:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	b299      	uxth	r1, r3
 8002e8a:	f107 020c 	add.w	r2, r7, #12
 8002e8e:	230a      	movs	r3, #10
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2302      	movs	r3, #2
 8002e94:	f107 0018 	add.w	r0, r7, #24
 8002e98:	f000 fe48 	bl	8003b2c <HAL_I2C_Master_Transmit>
}
 8002e9c:	bf00      	nop
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ea6:	b002      	add	sp, #8
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a0f      	ldr	r2, [pc, #60]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_MspInit+0x4c>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800

08002efc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08e      	sub	sp, #56	; 0x38
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a5b      	ldr	r2, [pc, #364]	; (8003088 <HAL_I2C_MspInit+0x18c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d12c      	bne.n	8002f78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	623b      	str	r3, [r7, #32]
 8002f22:	4b5a      	ldr	r3, [pc, #360]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a59      	ldr	r2, [pc, #356]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002f28:	f043 0302 	orr.w	r3, r3, #2
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b57      	ldr	r3, [pc, #348]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	623b      	str	r3, [r7, #32]
 8002f38:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f3a:	23c0      	movs	r3, #192	; 0xc0
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f3e:	2312      	movs	r3, #18
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f46:	2303      	movs	r3, #3
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f52:	4619      	mov	r1, r3
 8002f54:	484e      	ldr	r0, [pc, #312]	; (8003090 <HAL_I2C_MspInit+0x194>)
 8002f56:	f000 fabd 	bl	80034d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	4b4b      	ldr	r3, [pc, #300]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a4a      	ldr	r2, [pc, #296]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002f64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6a:	4b48      	ldr	r3, [pc, #288]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f76:	e083      	b.n	8003080 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a45      	ldr	r2, [pc, #276]	; (8003094 <HAL_I2C_MspInit+0x198>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d12d      	bne.n	8002fde <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a40      	ldr	r2, [pc, #256]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b3e      	ldr	r3, [pc, #248]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fa4:	2312      	movs	r3, #18
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fac:	2303      	movs	r3, #3
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4835      	ldr	r0, [pc, #212]	; (8003090 <HAL_I2C_MspInit+0x194>)
 8002fbc:	f000 fa8a 	bl	80034d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	4b31      	ldr	r3, [pc, #196]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	4a30      	ldr	r2, [pc, #192]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002fca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fce:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd0:	4b2e      	ldr	r3, [pc, #184]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	697b      	ldr	r3, [r7, #20]
}
 8002fdc:	e050      	b.n	8003080 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2d      	ldr	r2, [pc, #180]	; (8003098 <HAL_I2C_MspInit+0x19c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d14b      	bne.n	8003080 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	4b27      	ldr	r3, [pc, #156]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	4a26      	ldr	r2, [pc, #152]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_I2C_MspInit+0x190>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_I2C_MspInit+0x190>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	4a1f      	ldr	r2, [pc, #124]	; (800308c <HAL_I2C_MspInit+0x190>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6313      	str	r3, [r2, #48]	; 0x30
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <HAL_I2C_MspInit+0x190>)
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003026:	2312      	movs	r3, #18
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302e:	2303      	movs	r3, #3
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003032:	2304      	movs	r3, #4
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303a:	4619      	mov	r1, r3
 800303c:	4817      	ldr	r0, [pc, #92]	; (800309c <HAL_I2C_MspInit+0x1a0>)
 800303e:	f000 fa49 	bl	80034d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003048:	2312      	movs	r3, #18
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003050:	2303      	movs	r3, #3
 8003052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003054:	2304      	movs	r3, #4
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305c:	4619      	mov	r1, r3
 800305e:	4810      	ldr	r0, [pc, #64]	; (80030a0 <HAL_I2C_MspInit+0x1a4>)
 8003060:	f000 fa38 	bl	80034d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <HAL_I2C_MspInit+0x190>)
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	4a07      	ldr	r2, [pc, #28]	; (800308c <HAL_I2C_MspInit+0x190>)
 800306e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003072:	6413      	str	r3, [r2, #64]	; 0x40
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_I2C_MspInit+0x190>)
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
}
 8003080:	bf00      	nop
 8003082:	3738      	adds	r7, #56	; 0x38
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40005400 	.word	0x40005400
 800308c:	40023800 	.word	0x40023800
 8003090:	40020400 	.word	0x40020400
 8003094:	40005800 	.word	0x40005800
 8003098:	40005c00 	.word	0x40005c00
 800309c:	40020800 	.word	0x40020800
 80030a0:	40020000 	.word	0x40020000

080030a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a8:	e7fe      	b.n	80030a8 <NMI_Handler+0x4>

080030aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ae:	e7fe      	b.n	80030ae <HardFault_Handler+0x4>

080030b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b4:	e7fe      	b.n	80030b4 <MemManage_Handler+0x4>

080030b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ba:	e7fe      	b.n	80030ba <BusFault_Handler+0x4>

080030bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c0:	e7fe      	b.n	80030c0 <UsageFault_Handler+0x4>

080030c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f0:	f000 f89a 	bl	8003228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <OTG_FS_IRQHandler+0x10>)
 80030fe:	f001 ff8e 	bl	800501e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20001f0c 	.word	0x20001f0c

0800310c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <SystemInit+0x20>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	4a05      	ldr	r2, [pc, #20]	; (800312c <SystemInit+0x20>)
 8003118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800311c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003134:	480d      	ldr	r0, [pc, #52]	; (800316c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003136:	490e      	ldr	r1, [pc, #56]	; (8003170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003138:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800313a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800313c:	e002      	b.n	8003144 <LoopCopyDataInit>

0800313e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003142:	3304      	adds	r3, #4

08003144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003148:	d3f9      	bcc.n	800313e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800314a:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800314c:	4c0b      	ldr	r4, [pc, #44]	; (800317c <LoopFillZerobss+0x26>)
  movs r3, #0
 800314e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003150:	e001      	b.n	8003156 <LoopFillZerobss>

08003152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003154:	3204      	adds	r2, #4

08003156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003158:	d3fb      	bcc.n	8003152 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800315a:	f7ff ffd7 	bl	800310c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800315e:	f007 f8af 	bl	800a2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003162:	f7fe f9cb 	bl	80014fc <main>
  bx  lr    
 8003166:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800316c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003170:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8003174:	0800b2f0 	.word	0x0800b2f0
  ldr r2, =_sbss
 8003178:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 800317c:	20002314 	.word	0x20002314

08003180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003180:	e7fe      	b.n	8003180 <ADC_IRQHandler>
	...

08003184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_Init+0x40>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_Init+0x40>)
 800318e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <HAL_Init+0x40>)
 800319a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800319e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <HAL_Init+0x40>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ac:	2003      	movs	r0, #3
 80031ae:	f000 f94f 	bl	8003450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031b2:	200f      	movs	r0, #15
 80031b4:	f000 f808 	bl	80031c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031b8:	f7ff fe78 	bl	8002eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023c00 	.word	0x40023c00

080031c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_InitTick+0x54>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_InitTick+0x58>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031de:	fbb3 f3f1 	udiv	r3, r3, r1
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f967 	bl	80034ba <HAL_SYSTICK_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00e      	b.n	8003214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b0f      	cmp	r3, #15
 80031fa:	d80a      	bhi.n	8003212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031fc:	2200      	movs	r2, #0
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003204:	f000 f92f 	bl	8003466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003208:	4a06      	ldr	r2, [pc, #24]	; (8003224 <HAL_InitTick+0x5c>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000034 	.word	0x20000034
 8003220:	2000003c 	.word	0x2000003c
 8003224:	20000038 	.word	0x20000038

08003228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_IncTick+0x20>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_IncTick+0x24>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4413      	add	r3, r2
 8003238:	4a04      	ldr	r2, [pc, #16]	; (800324c <HAL_IncTick+0x24>)
 800323a:	6013      	str	r3, [r2, #0]
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	2000003c 	.word	0x2000003c
 800324c:	20000a38 	.word	0x20000a38

08003250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return uwTick;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_GetTick+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000a38 	.word	0x20000a38

08003268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003270:	f7ff ffee 	bl	8003250 <HAL_GetTick>
 8003274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003280:	d005      	beq.n	800328e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <HAL_Delay+0x44>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800328e:	bf00      	nop
 8003290:	f7ff ffde 	bl	8003250 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	429a      	cmp	r2, r3
 800329e:	d8f7      	bhi.n	8003290 <HAL_Delay+0x28>
  {
  }
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	2000003c 	.word	0x2000003c

080032b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032cc:	4013      	ands	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e2:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <__NVIC_SetPriorityGrouping+0x44>)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	60d3      	str	r3, [r2, #12]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <__NVIC_GetPriorityGrouping+0x18>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	f003 0307 	and.w	r3, r3, #7
}
 8003306:	4618      	mov	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	2b00      	cmp	r3, #0
 8003324:	db0b      	blt.n	800333e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	4907      	ldr	r1, [pc, #28]	; (800334c <__NVIC_EnableIRQ+0x38>)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2001      	movs	r0, #1
 8003336:	fa00 f202 	lsl.w	r2, r0, r2
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	e000e100 	.word	0xe000e100

08003350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	6039      	str	r1, [r7, #0]
 800335a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	2b00      	cmp	r3, #0
 8003362:	db0a      	blt.n	800337a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	490c      	ldr	r1, [pc, #48]	; (800339c <__NVIC_SetPriority+0x4c>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	0112      	lsls	r2, r2, #4
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	440b      	add	r3, r1
 8003374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003378:	e00a      	b.n	8003390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4908      	ldr	r1, [pc, #32]	; (80033a0 <__NVIC_SetPriority+0x50>)
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	3b04      	subs	r3, #4
 8003388:	0112      	lsls	r2, r2, #4
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	440b      	add	r3, r1
 800338e:	761a      	strb	r2, [r3, #24]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000e100 	.word	0xe000e100
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f1c3 0307 	rsb	r3, r3, #7
 80033be:	2b04      	cmp	r3, #4
 80033c0:	bf28      	it	cs
 80033c2:	2304      	movcs	r3, #4
 80033c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d902      	bls.n	80033d4 <NVIC_EncodePriority+0x30>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3b03      	subs	r3, #3
 80033d2:	e000      	b.n	80033d6 <NVIC_EncodePriority+0x32>
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	401a      	ands	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	43d9      	mvns	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033fc:	4313      	orrs	r3, r2
         );
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3b01      	subs	r3, #1
 8003418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800341c:	d301      	bcc.n	8003422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341e:	2301      	movs	r3, #1
 8003420:	e00f      	b.n	8003442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <SysTick_Config+0x40>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800342a:	210f      	movs	r1, #15
 800342c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003430:	f7ff ff8e 	bl	8003350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <SysTick_Config+0x40>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <SysTick_Config+0x40>)
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff29 	bl	80032b0 <__NVIC_SetPriorityGrouping>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003478:	f7ff ff3e 	bl	80032f8 <__NVIC_GetPriorityGrouping>
 800347c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f7ff ff8e 	bl	80033a4 <NVIC_EncodePriority>
 8003488:	4602      	mov	r2, r0
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff5d 	bl	8003350 <__NVIC_SetPriority>
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff31 	bl	8003314 <__NVIC_EnableIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ffa2 	bl	800340c <SysTick_Config>
 80034c8:	4603      	mov	r3, r0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b089      	sub	sp, #36	; 0x24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	e16b      	b.n	80037c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034f0:	2201      	movs	r2, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	429a      	cmp	r2, r3
 800350a:	f040 815a 	bne.w	80037c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d005      	beq.n	8003526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003522:	2b02      	cmp	r3, #2
 8003524:	d130      	bne.n	8003588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800355c:	2201      	movs	r2, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 0201 	and.w	r2, r3, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b03      	cmp	r3, #3
 8003592:	d017      	beq.n	80035c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d123      	bne.n	8003618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	08da      	lsrs	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3208      	adds	r2, #8
 80035d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	220f      	movs	r2, #15
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	08da      	lsrs	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3208      	adds	r2, #8
 8003612:	69b9      	ldr	r1, [r7, #24]
 8003614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	2203      	movs	r2, #3
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0203 	and.w	r2, r3, #3
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80b4 	beq.w	80037c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b60      	ldr	r3, [pc, #384]	; (80037e0 <HAL_GPIO_Init+0x30c>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	4a5f      	ldr	r2, [pc, #380]	; (80037e0 <HAL_GPIO_Init+0x30c>)
 8003664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003668:	6453      	str	r3, [r2, #68]	; 0x44
 800366a:	4b5d      	ldr	r3, [pc, #372]	; (80037e0 <HAL_GPIO_Init+0x30c>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003676:	4a5b      	ldr	r2, [pc, #364]	; (80037e4 <HAL_GPIO_Init+0x310>)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	3302      	adds	r3, #2
 800367e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	220f      	movs	r2, #15
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a52      	ldr	r2, [pc, #328]	; (80037e8 <HAL_GPIO_Init+0x314>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d02b      	beq.n	80036fa <HAL_GPIO_Init+0x226>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a51      	ldr	r2, [pc, #324]	; (80037ec <HAL_GPIO_Init+0x318>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d025      	beq.n	80036f6 <HAL_GPIO_Init+0x222>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a50      	ldr	r2, [pc, #320]	; (80037f0 <HAL_GPIO_Init+0x31c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01f      	beq.n	80036f2 <HAL_GPIO_Init+0x21e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4f      	ldr	r2, [pc, #316]	; (80037f4 <HAL_GPIO_Init+0x320>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d019      	beq.n	80036ee <HAL_GPIO_Init+0x21a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4e      	ldr	r2, [pc, #312]	; (80037f8 <HAL_GPIO_Init+0x324>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_GPIO_Init+0x216>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4d      	ldr	r2, [pc, #308]	; (80037fc <HAL_GPIO_Init+0x328>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00d      	beq.n	80036e6 <HAL_GPIO_Init+0x212>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4c      	ldr	r2, [pc, #304]	; (8003800 <HAL_GPIO_Init+0x32c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d007      	beq.n	80036e2 <HAL_GPIO_Init+0x20e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4b      	ldr	r2, [pc, #300]	; (8003804 <HAL_GPIO_Init+0x330>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_GPIO_Init+0x20a>
 80036da:	2307      	movs	r3, #7
 80036dc:	e00e      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036de:	2308      	movs	r3, #8
 80036e0:	e00c      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036e2:	2306      	movs	r3, #6
 80036e4:	e00a      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036e6:	2305      	movs	r3, #5
 80036e8:	e008      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036ea:	2304      	movs	r3, #4
 80036ec:	e006      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036ee:	2303      	movs	r3, #3
 80036f0:	e004      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e002      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_GPIO_Init+0x228>
 80036fa:	2300      	movs	r3, #0
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	f002 0203 	and.w	r2, r2, #3
 8003702:	0092      	lsls	r2, r2, #2
 8003704:	4093      	lsls	r3, r2
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800370c:	4935      	ldr	r1, [pc, #212]	; (80037e4 <HAL_GPIO_Init+0x310>)
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	089b      	lsrs	r3, r3, #2
 8003712:	3302      	adds	r3, #2
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800371a:	4b3b      	ldr	r3, [pc, #236]	; (8003808 <HAL_GPIO_Init+0x334>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800373e:	4a32      	ldr	r2, [pc, #200]	; (8003808 <HAL_GPIO_Init+0x334>)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003744:	4b30      	ldr	r3, [pc, #192]	; (8003808 <HAL_GPIO_Init+0x334>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003768:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_GPIO_Init+0x334>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800376e:	4b26      	ldr	r3, [pc, #152]	; (8003808 <HAL_GPIO_Init+0x334>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003792:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <HAL_GPIO_Init+0x334>)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <HAL_GPIO_Init+0x334>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037bc:	4a12      	ldr	r2, [pc, #72]	; (8003808 <HAL_GPIO_Init+0x334>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3301      	adds	r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b0f      	cmp	r3, #15
 80037cc:	f67f ae90 	bls.w	80034f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	3724      	adds	r7, #36	; 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40013800 	.word	0x40013800
 80037e8:	40020000 	.word	0x40020000
 80037ec:	40020400 	.word	0x40020400
 80037f0:	40020800 	.word	0x40020800
 80037f4:	40020c00 	.word	0x40020c00
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40021400 	.word	0x40021400
 8003800:	40021800 	.word	0x40021800
 8003804:	40021c00 	.word	0x40021c00
 8003808:	40013c00 	.word	0x40013c00

0800380c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	887b      	ldrh	r3, [r7, #2]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
 8003828:	e001      	b.n	800382e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
 8003848:	4613      	mov	r3, r2
 800384a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800384c:	787b      	ldrb	r3, [r7, #1]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003852:	887a      	ldrh	r2, [r7, #2]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003858:	e003      	b.n	8003862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800385a:	887b      	ldrh	r3, [r7, #2]
 800385c:	041a      	lsls	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	619a      	str	r2, [r3, #24]
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800386e:	b480      	push	{r7}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003880:	887a      	ldrh	r2, [r7, #2]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4013      	ands	r3, r2
 8003886:	041a      	lsls	r2, r3, #16
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	43d9      	mvns	r1, r3
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	400b      	ands	r3, r1
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	619a      	str	r2, [r3, #24]
}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e12b      	b.n	8003b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff fb16 	bl	8002efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	; 0x24
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003908:	f002 ffdc 	bl	80068c4 <HAL_RCC_GetPCLK1Freq>
 800390c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4a81      	ldr	r2, [pc, #516]	; (8003b18 <HAL_I2C_Init+0x274>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d807      	bhi.n	8003928 <HAL_I2C_Init+0x84>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a80      	ldr	r2, [pc, #512]	; (8003b1c <HAL_I2C_Init+0x278>)
 800391c:	4293      	cmp	r3, r2
 800391e:	bf94      	ite	ls
 8003920:	2301      	movls	r3, #1
 8003922:	2300      	movhi	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e006      	b.n	8003936 <HAL_I2C_Init+0x92>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a7d      	ldr	r2, [pc, #500]	; (8003b20 <HAL_I2C_Init+0x27c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	bf94      	ite	ls
 8003930:	2301      	movls	r3, #1
 8003932:	2300      	movhi	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0e7      	b.n	8003b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4a78      	ldr	r2, [pc, #480]	; (8003b24 <HAL_I2C_Init+0x280>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0c9b      	lsrs	r3, r3, #18
 8003948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a6a      	ldr	r2, [pc, #424]	; (8003b18 <HAL_I2C_Init+0x274>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d802      	bhi.n	8003978 <HAL_I2C_Init+0xd4>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	3301      	adds	r3, #1
 8003976:	e009      	b.n	800398c <HAL_I2C_Init+0xe8>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	4a69      	ldr	r2, [pc, #420]	; (8003b28 <HAL_I2C_Init+0x284>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	099b      	lsrs	r3, r3, #6
 800398a:	3301      	adds	r3, #1
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800399e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	495c      	ldr	r1, [pc, #368]	; (8003b18 <HAL_I2C_Init+0x274>)
 80039a8:	428b      	cmp	r3, r1
 80039aa:	d819      	bhi.n	80039e0 <HAL_I2C_Init+0x13c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e59      	subs	r1, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ba:	1c59      	adds	r1, r3, #1
 80039bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039c0:	400b      	ands	r3, r1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_I2C_Init+0x138>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1e59      	subs	r1, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039da:	e051      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 80039dc:	2304      	movs	r3, #4
 80039de:	e04f      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d111      	bne.n	8003a0c <HAL_I2C_Init+0x168>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	440b      	add	r3, r1
 80039f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e012      	b.n	8003a32 <HAL_I2C_Init+0x18e>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	0099      	lsls	r1, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Init+0x196>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e022      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10e      	bne.n	8003a60 <HAL_I2C_Init+0x1bc>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1e58      	subs	r0, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	440b      	add	r3, r1
 8003a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5e:	e00f      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1e58      	subs	r0, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	0099      	lsls	r1, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	6809      	ldr	r1, [r1, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6911      	ldr	r1, [r2, #16]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68d2      	ldr	r2, [r2, #12]
 8003aba:	4311      	orrs	r1, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	000186a0 	.word	0x000186a0
 8003b1c:	001e847f 	.word	0x001e847f
 8003b20:	003d08ff 	.word	0x003d08ff
 8003b24:	431bde83 	.word	0x431bde83
 8003b28:	10624dd3 	.word	0x10624dd3

08003b2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	461a      	mov	r2, r3
 8003b38:	460b      	mov	r3, r1
 8003b3a:	817b      	strh	r3, [r7, #10]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff fb86 	bl	8003250 <HAL_GetTick>
 8003b44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	f040 80e0 	bne.w	8003d14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2319      	movs	r3, #25
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	4970      	ldr	r1, [pc, #448]	; (8003d20 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 ff30 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e0d3      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_I2C_Master_Transmit+0x50>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0cc      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d007      	beq.n	8003ba2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2221      	movs	r2, #33	; 0x21
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	893a      	ldrh	r2, [r7, #8]
 8003bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a50      	ldr	r2, [pc, #320]	; (8003d24 <HAL_I2C_Master_Transmit+0x1f8>)
 8003be2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003be4:	8979      	ldrh	r1, [r7, #10]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fcea 	bl	80045c4 <I2C_MasterRequestWrite>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e08d      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c10:	e066      	b.n	8003ce0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	6a39      	ldr	r1, [r7, #32]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 ffaa 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d107      	bne.n	8003c3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e06b      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d11b      	bne.n	8003cb4 <HAL_I2C_Master_Transmit+0x188>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d017      	beq.n	8003cb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6a39      	ldr	r1, [r7, #32]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 ff9a 	bl	8004bf2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d107      	bne.n	8003cdc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e01a      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d194      	bne.n	8003c12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e000      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	00100002 	.word	0x00100002
 8003d24:	ffff0000 	.word	0xffff0000

08003d28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	4608      	mov	r0, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	461a      	mov	r2, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	817b      	strh	r3, [r7, #10]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	813b      	strh	r3, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d42:	f7ff fa85 	bl	8003250 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	f040 80d9 	bne.w	8003f08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	2319      	movs	r3, #25
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	496d      	ldr	r1, [pc, #436]	; (8003f14 <HAL_I2C_Mem_Write+0x1ec>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fe2f 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0cc      	b.n	8003f0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_I2C_Mem_Write+0x56>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e0c5      	b.n	8003f0a <HAL_I2C_Mem_Write+0x1e2>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d007      	beq.n	8003da4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2221      	movs	r2, #33	; 0x21
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2240      	movs	r2, #64	; 0x40
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a3a      	ldr	r2, [r7, #32]
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a4d      	ldr	r2, [pc, #308]	; (8003f18 <HAL_I2C_Mem_Write+0x1f0>)
 8003de4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003de6:	88f8      	ldrh	r0, [r7, #6]
 8003de8:	893a      	ldrh	r2, [r7, #8]
 8003dea:	8979      	ldrh	r1, [r7, #10]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	4603      	mov	r3, r0
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fc66 	bl	80046c8 <I2C_RequestMemoryWrite>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d052      	beq.n	8003ea8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e081      	b.n	8003f0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 feb0 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00d      	beq.n	8003e32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d107      	bne.n	8003e2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e06b      	b.n	8003f0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	781a      	ldrb	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d11b      	bne.n	8003ea8 <HAL_I2C_Mem_Write+0x180>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d017      	beq.n	8003ea8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1aa      	bne.n	8003e06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fe9c 	bl	8004bf2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d107      	bne.n	8003ed8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e016      	b.n	8003f0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e000      	b.n	8003f0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
  }
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	00100002 	.word	0x00100002
 8003f18:	ffff0000 	.word	0xffff0000

08003f1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08c      	sub	sp, #48	; 0x30
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	817b      	strh	r3, [r7, #10]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	813b      	strh	r3, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f36:	f7ff f98b 	bl	8003250 <HAL_GetTick>
 8003f3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	f040 8208 	bne.w	800435a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2319      	movs	r3, #25
 8003f50:	2201      	movs	r2, #1
 8003f52:	497b      	ldr	r1, [pc, #492]	; (8004140 <HAL_I2C_Mem_Read+0x224>)
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fd35 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
 8003f62:	e1fb      	b.n	800435c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2C_Mem_Read+0x56>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e1f4      	b.n	800435c <HAL_I2C_Mem_Read+0x440>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d007      	beq.n	8003f98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2222      	movs	r2, #34	; 0x22
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a5b      	ldr	r2, [pc, #364]	; (8004144 <HAL_I2C_Mem_Read+0x228>)
 8003fd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fda:	88f8      	ldrh	r0, [r7, #6]
 8003fdc:	893a      	ldrh	r2, [r7, #8]
 8003fde:	8979      	ldrh	r1, [r7, #10]
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	4603      	mov	r3, r0
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fc02 	bl	80047f4 <I2C_RequestMemoryRead>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e1b0      	b.n	800435c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d113      	bne.n	800402a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	623b      	str	r3, [r7, #32]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	623b      	str	r3, [r7, #32]
 8004016:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e184      	b.n	8004334 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	2b01      	cmp	r3, #1
 8004030:	d11b      	bne.n	800406a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	61fb      	str	r3, [r7, #28]
 8004056:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e164      	b.n	8004334 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406e:	2b02      	cmp	r3, #2
 8004070:	d11b      	bne.n	80040aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004080:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	e144      	b.n	8004334 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040c0:	e138      	b.n	8004334 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	f200 80f1 	bhi.w	80042ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d123      	bne.n	800411c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fdcb 	bl	8004c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e139      	b.n	800435c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	855a      	strh	r2, [r3, #42]	; 0x2a
 800411a:	e10b      	b.n	8004334 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	2b02      	cmp	r3, #2
 8004122:	d14e      	bne.n	80041c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412a:	2200      	movs	r2, #0
 800412c:	4906      	ldr	r1, [pc, #24]	; (8004148 <HAL_I2C_Mem_Read+0x22c>)
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fc48 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e10e      	b.n	800435c <HAL_I2C_Mem_Read+0x440>
 800413e:	bf00      	nop
 8004140:	00100002 	.word	0x00100002
 8004144:	ffff0000 	.word	0xffff0000
 8004148:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041c0:	e0b8      	b.n	8004334 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	2200      	movs	r2, #0
 80041ca:	4966      	ldr	r1, [pc, #408]	; (8004364 <HAL_I2C_Mem_Read+0x448>)
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fbf9 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0bf      	b.n	800435c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2200      	movs	r2, #0
 8004226:	494f      	ldr	r1, [pc, #316]	; (8004364 <HAL_I2C_Mem_Read+0x448>)
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fbcb 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e091      	b.n	800435c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042ac:	e042      	b.n	8004334 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fcde 	bl	8004c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e04c      	b.n	800435c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d118      	bne.n	8004334 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	f47f aec2 	bne.w	80040c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	4618      	mov	r0, r3
 800435e:	3728      	adds	r7, #40	; 0x28
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	00010004 	.word	0x00010004

08004368 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	460b      	mov	r3, r1
 8004376:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004378:	f7fe ff6a 	bl	8003250 <HAL_GetTick>
 800437c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800437e:	2301      	movs	r3, #1
 8004380:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b20      	cmp	r3, #32
 800438c:	f040 8111 	bne.w	80045b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2319      	movs	r3, #25
 8004396:	2201      	movs	r2, #1
 8004398:	4988      	ldr	r1, [pc, #544]	; (80045bc <HAL_I2C_IsDeviceReady+0x254>)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fb12 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
 80043a8:	e104      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_I2C_IsDeviceReady+0x50>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e0fd      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d007      	beq.n	80043de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2224      	movs	r2, #36	; 0x24
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4a70      	ldr	r2, [pc, #448]	; (80045c0 <HAL_I2C_IsDeviceReady+0x258>)
 8004400:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004410:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2200      	movs	r2, #0
 800441a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fad0 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004438:	d103      	bne.n	8004442 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0b6      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004446:	897b      	ldrh	r3, [r7, #10]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004454:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004456:	f7fe fefb 	bl	8003250 <HAL_GetTick>
 800445a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b02      	cmp	r3, #2
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004480:	bf0c      	ite	eq
 8004482:	2301      	moveq	r3, #1
 8004484:	2300      	movne	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800448a:	e025      	b.n	80044d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800448c:	f7fe fee0 	bl	8003250 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <HAL_I2C_IsDeviceReady+0x13a>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	22a0      	movs	r2, #160	; 0xa0
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2ba0      	cmp	r3, #160	; 0xa0
 80044e2:	d005      	beq.n	80044f0 <HAL_I2C_IsDeviceReady+0x188>
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <HAL_I2C_IsDeviceReady+0x188>
 80044ea:	7dbb      	ldrb	r3, [r7, #22]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0cd      	beq.n	800448c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d129      	bne.n	800455a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004514:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2319      	movs	r3, #25
 8004532:	2201      	movs	r2, #1
 8004534:	4921      	ldr	r1, [pc, #132]	; (80045bc <HAL_I2C_IsDeviceReady+0x254>)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fa44 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e036      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	e02c      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004568:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004572:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2319      	movs	r3, #25
 800457a:	2201      	movs	r2, #1
 800457c:	490f      	ldr	r1, [pc, #60]	; (80045bc <HAL_I2C_IsDeviceReady+0x254>)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fa20 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e012      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3301      	adds	r3, #1
 8004592:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	f4ff af32 	bcc.w	8004402 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80045b2:	2302      	movs	r3, #2
  }
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	00100002 	.word	0x00100002
 80045c0:	ffff0000 	.word	0xffff0000

080045c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	460b      	mov	r3, r1
 80045d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d006      	beq.n	80045ee <I2C_MasterRequestWrite+0x2a>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d003      	beq.n	80045ee <I2C_MasterRequestWrite+0x2a>
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ec:	d108      	bne.n	8004600 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e00b      	b.n	8004618 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	2b12      	cmp	r3, #18
 8004606:	d107      	bne.n	8004618 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004616:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f9cd 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463e:	d103      	bne.n	8004648 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004646:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e035      	b.n	80046b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004654:	d108      	bne.n	8004668 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004656:	897b      	ldrh	r3, [r7, #10]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004664:	611a      	str	r2, [r3, #16]
 8004666:	e01b      	b.n	80046a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004668:	897b      	ldrh	r3, [r7, #10]
 800466a:	11db      	asrs	r3, r3, #7
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f003 0306 	and.w	r3, r3, #6
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f063 030f 	orn	r3, r3, #15
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	490e      	ldr	r1, [pc, #56]	; (80046c0 <I2C_MasterRequestWrite+0xfc>)
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f9f3 	bl	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e010      	b.n	80046b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004696:	897b      	ldrh	r3, [r7, #10]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4907      	ldr	r1, [pc, #28]	; (80046c4 <I2C_MasterRequestWrite+0x100>)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f9e3 	bl	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	00010008 	.word	0x00010008
 80046c4:	00010002 	.word	0x00010002

080046c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	4608      	mov	r0, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	461a      	mov	r2, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	817b      	strh	r3, [r7, #10]
 80046da:	460b      	mov	r3, r1
 80046dc:	813b      	strh	r3, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f960 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00d      	beq.n	8004726 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004718:	d103      	bne.n	8004722 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e05f      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004726:	897b      	ldrh	r3, [r7, #10]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004734:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	6a3a      	ldr	r2, [r7, #32]
 800473a:	492d      	ldr	r1, [pc, #180]	; (80047f0 <I2C_RequestMemoryWrite+0x128>)
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f998 	bl	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e04c      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004764:	6a39      	ldr	r1, [r7, #32]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fa02 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	2b04      	cmp	r3, #4
 8004778:	d107      	bne.n	800478a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004788:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e02b      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d105      	bne.n	80047a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004794:	893b      	ldrh	r3, [r7, #8]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]
 800479e:	e021      	b.n	80047e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047a0:	893b      	ldrh	r3, [r7, #8]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b0:	6a39      	ldr	r1, [r7, #32]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f9dc 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d107      	bne.n	80047d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e005      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047da:	893b      	ldrh	r3, [r7, #8]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	00010002 	.word	0x00010002

080047f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4603      	mov	r3, r0
 8004804:	817b      	strh	r3, [r7, #10]
 8004806:	460b      	mov	r3, r1
 8004808:	813b      	strh	r3, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800481c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2200      	movs	r2, #0
 8004836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f8c2 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004854:	d103      	bne.n	800485e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e0aa      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	4952      	ldr	r1, [pc, #328]	; (80049c0 <I2C_RequestMemoryRead+0x1cc>)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f8fa 	bl	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e097      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	6a39      	ldr	r1, [r7, #32]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f964 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d107      	bne.n	80048c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e076      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d105      	bne.n	80048dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d0:	893b      	ldrh	r3, [r7, #8]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]
 80048da:	e021      	b.n	8004920 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048dc:	893b      	ldrh	r3, [r7, #8]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	6a39      	ldr	r1, [r7, #32]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f93e 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d107      	bne.n	8004912 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e050      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004916:	893b      	ldrh	r3, [r7, #8]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004922:	6a39      	ldr	r1, [r7, #32]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f923 	bl	8004b70 <I2C_WaitOnTXEFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	2b04      	cmp	r3, #4
 8004936:	d107      	bne.n	8004948 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e035      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800495a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	2200      	movs	r2, #0
 8004964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f82b 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004982:	d103      	bne.n	800498c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e013      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004990:	897b      	ldrh	r3, [r7, #10]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	6a3a      	ldr	r2, [r7, #32]
 80049a4:	4906      	ldr	r1, [pc, #24]	; (80049c0 <I2C_RequestMemoryRead+0x1cc>)
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f863 	bl	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	00010002 	.word	0x00010002

080049c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d4:	e025      	b.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049dc:	d021      	beq.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049de:	f7fe fc37 	bl	8003250 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d302      	bcc.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d116      	bne.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f043 0220 	orr.w	r2, r3, #32
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e023      	b.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d10d      	bne.n	8004a48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	43da      	mvns	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4013      	ands	r3, r2
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bf0c      	ite	eq
 8004a3e:	2301      	moveq	r3, #1
 8004a40:	2300      	movne	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	e00c      	b.n	8004a62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	43da      	mvns	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	bf0c      	ite	eq
 8004a5a:	2301      	moveq	r3, #1
 8004a5c:	2300      	movne	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d0b6      	beq.n	80049d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a80:	e051      	b.n	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a90:	d123      	bne.n	8004ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aaa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f043 0204 	orr.w	r2, r3, #4
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e046      	b.n	8004b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae0:	d021      	beq.n	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae2:	f7fe fbb5 	bl	8003250 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d302      	bcc.n	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d116      	bne.n	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e020      	b.n	8004b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d10c      	bne.n	8004b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	43da      	mvns	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	e00b      	b.n	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	43da      	mvns	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4013      	ands	r3, r2
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d18d      	bne.n	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b7c:	e02d      	b.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f8ce 	bl	8004d20 <I2C_IsAcknowledgeFailed>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e02d      	b.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b94:	d021      	beq.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b96:	f7fe fb5b 	bl	8003250 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d116      	bne.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f043 0220 	orr.w	r2, r3, #32
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e007      	b.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be4:	2b80      	cmp	r3, #128	; 0x80
 8004be6:	d1ca      	bne.n	8004b7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bfe:	e02d      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f88d 	bl	8004d20 <I2C_IsAcknowledgeFailed>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e02d      	b.n	8004c6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c16:	d021      	beq.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c18:	f7fe fb1a 	bl	8003250 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d116      	bne.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e007      	b.n	8004c6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d1ca      	bne.n	8004c00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c80:	e042      	b.n	8004d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d119      	bne.n	8004cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0210 	mvn.w	r2, #16
 8004c98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e029      	b.n	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc4:	f7fe fac4 	bl	8003250 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d302      	bcc.n	8004cda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d116      	bne.n	8004d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e007      	b.n	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d1b5      	bne.n	8004c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d36:	d11b      	bne.n	8004d70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	f043 0204 	orr.w	r2, r3, #4
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d80:	b08f      	sub	sp, #60	; 0x3c
 8004d82:	af0a      	add	r7, sp, #40	; 0x28
 8004d84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e10f      	b.n	8004fb0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f004 ff6e 	bl	8009c8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2203      	movs	r2, #3
 8004db4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f001 fea1 	bl	8006b16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	687e      	ldr	r6, [r7, #4]
 8004ddc:	466d      	mov	r5, sp
 8004dde:	f106 0410 	add.w	r4, r6, #16
 8004de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dee:	e885 0003 	stmia.w	r5, {r0, r1}
 8004df2:	1d33      	adds	r3, r6, #4
 8004df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004df6:	6838      	ldr	r0, [r7, #0]
 8004df8:	f001 fd78 	bl	80068ec <USB_CoreInit>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e0d0      	b.n	8004fb0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2100      	movs	r1, #0
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 fe8f 	bl	8006b38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
 8004e1e:	e04a      	b.n	8004eb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e20:	7bfa      	ldrb	r2, [r7, #15]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	333d      	adds	r3, #61	; 0x3d
 8004e30:	2201      	movs	r2, #1
 8004e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e34:	7bfa      	ldrb	r2, [r7, #15]
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	1a9b      	subs	r3, r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	333c      	adds	r3, #60	; 0x3c
 8004e44:	7bfa      	ldrb	r2, [r7, #15]
 8004e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e48:	7bfa      	ldrb	r2, [r7, #15]
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	b298      	uxth	r0, r3
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3342      	adds	r3, #66	; 0x42
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	333f      	adds	r3, #63	; 0x3f
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e74:	7bfa      	ldrb	r2, [r7, #15]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	3344      	adds	r3, #68	; 0x44
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	3348      	adds	r3, #72	; 0x48
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3350      	adds	r3, #80	; 0x50
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
 8004eb6:	7bfa      	ldrb	r2, [r7, #15]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d3af      	bcc.n	8004e20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	e044      	b.n	8004f50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004edc:	7bfa      	ldrb	r2, [r7, #15]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004eee:	7bfa      	ldrb	r2, [r7, #15]
 8004ef0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f08:	7bfa      	ldrb	r2, [r7, #15]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f1e:	7bfa      	ldrb	r2, [r7, #15]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f34:	7bfa      	ldrb	r2, [r7, #15]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
 8004f50:	7bfa      	ldrb	r2, [r7, #15]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d3b5      	bcc.n	8004ec6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	687e      	ldr	r6, [r7, #4]
 8004f62:	466d      	mov	r5, sp
 8004f64:	f106 0410 	add.w	r4, r6, #16
 8004f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f74:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f78:	1d33      	adds	r3, r6, #4
 8004f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f7c:	6838      	ldr	r0, [r7, #0]
 8004f7e:	f001 fe27 	bl	8006bd0 <USB_DevInit>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e00d      	b.n	8004fb0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f002 fea3 	bl	8007cf4 <USB_DevDisconnect>

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fb8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_PCD_Start+0x1c>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e020      	b.n	8005016 <HAL_PCD_Start+0x5e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d109      	bne.n	8004ff8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d005      	beq.n	8004ff8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f001 fd79 	bl	8006af4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f002 fe53 	bl	8007cb2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800501e:	b590      	push	{r4, r7, lr}
 8005020:	b08d      	sub	sp, #52	; 0x34
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f002 ff11 	bl	8007e5c <USB_GetMode>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	f040 839d 	bne.w	800577c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f002 fe75 	bl	8007d36 <USB_ReadInterrupts>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8393 	beq.w	800577a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f002 fe6c 	bl	8007d36 <USB_ReadInterrupts>
 800505e:	4603      	mov	r3, r0
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b02      	cmp	r3, #2
 8005066:	d107      	bne.n	8005078 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f002 0202 	and.w	r2, r2, #2
 8005076:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f002 fe5a 	bl	8007d36 <USB_ReadInterrupts>
 8005082:	4603      	mov	r3, r0
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b10      	cmp	r3, #16
 800508a:	d161      	bne.n	8005150 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0210 	bic.w	r2, r2, #16
 800509a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	f003 020f 	and.w	r2, r3, #15
 80050a8:	4613      	mov	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	3304      	adds	r3, #4
 80050ba:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	0c5b      	lsrs	r3, r3, #17
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d124      	bne.n	8005112 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d035      	beq.n	8005140 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	6a38      	ldr	r0, [r7, #32]
 80050e8:	f002 fc91 	bl	8007a0e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050f8:	441a      	add	r2, r3
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800510a:	441a      	add	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	619a      	str	r2, [r3, #24]
 8005110:	e016      	b.n	8005140 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	0c5b      	lsrs	r3, r3, #17
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	2b06      	cmp	r3, #6
 800511c:	d110      	bne.n	8005140 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005124:	2208      	movs	r2, #8
 8005126:	4619      	mov	r1, r3
 8005128:	6a38      	ldr	r0, [r7, #32]
 800512a:	f002 fc70 	bl	8007a0e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800513a:	441a      	add	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0210 	orr.w	r2, r2, #16
 800514e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f002 fdee 	bl	8007d36 <USB_ReadInterrupts>
 800515a:	4603      	mov	r3, r0
 800515c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005160:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005164:	d16e      	bne.n	8005244 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f002 fdf4 	bl	8007d5c <USB_ReadDevAllOutEpInterrupt>
 8005174:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005176:	e062      	b.n	800523e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d057      	beq.n	8005232 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	4611      	mov	r1, r2
 800518c:	4618      	mov	r0, r3
 800518e:	f002 fe19 	bl	8007dc4 <USB_ReadDevOutEPInterrupt>
 8005192:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00c      	beq.n	80051b8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	461a      	mov	r2, r3
 80051ac:	2301      	movs	r3, #1
 80051ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80051b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fdb0 	bl	8005d18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00c      	beq.n	80051dc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	461a      	mov	r2, r3
 80051d0:	2308      	movs	r3, #8
 80051d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 feaa 	bl	8005f30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d008      	beq.n	80051f8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f2:	461a      	mov	r2, r3
 80051f4:	2310      	movs	r3, #16
 80051f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d008      	beq.n	8005214 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	461a      	mov	r2, r3
 8005210:	2320      	movs	r3, #32
 8005212:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	461a      	mov	r2, r3
 800522c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005230:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	3301      	adds	r3, #1
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	2b00      	cmp	r3, #0
 8005242:	d199      	bne.n	8005178 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f002 fd74 	bl	8007d36 <USB_ReadInterrupts>
 800524e:	4603      	mov	r3, r0
 8005250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005254:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005258:	f040 80c0 	bne.w	80053dc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f002 fd95 	bl	8007d90 <USB_ReadDevAllInEpInterrupt>
 8005266:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800526c:	e0b2      	b.n	80053d4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80a7 	beq.w	80053c8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	4611      	mov	r1, r2
 8005284:	4618      	mov	r0, r3
 8005286:	f002 fdbb 	bl	8007e00 <USB_ReadDevInEPInterrupt>
 800528a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d057      	beq.n	8005346 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	2201      	movs	r2, #1
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	43db      	mvns	r3, r3
 80052b0:	69f9      	ldr	r1, [r7, #28]
 80052b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052b6:	4013      	ands	r3, r2
 80052b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	461a      	mov	r2, r3
 80052c8:	2301      	movs	r3, #1
 80052ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d132      	bne.n	800533a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d8:	4613      	mov	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	3348      	adds	r3, #72	; 0x48
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ea:	4613      	mov	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4403      	add	r3, r0
 80052f4:	3344      	adds	r3, #68	; 0x44
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4419      	add	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fe:	4613      	mov	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4403      	add	r3, r0
 8005308:	3348      	adds	r3, #72	; 0x48
 800530a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	2b00      	cmp	r3, #0
 8005310:	d113      	bne.n	800533a <HAL_PCD_IRQHandler+0x31c>
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005316:	4613      	mov	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	3350      	adds	r3, #80	; 0x50
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d108      	bne.n	800533a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005332:	461a      	mov	r2, r3
 8005334:	2101      	movs	r1, #1
 8005336:	f002 fdc3 	bl	8007ec0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	b2db      	uxtb	r3, r3
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f004 fd24 	bl	8009d8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535c:	461a      	mov	r2, r3
 800535e:	2308      	movs	r3, #8
 8005360:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d008      	beq.n	800537e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	461a      	mov	r2, r3
 800537a:	2310      	movs	r3, #16
 800537c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	461a      	mov	r2, r3
 8005396:	2340      	movs	r3, #64	; 0x40
 8005398:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d008      	beq.n	80053b6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b0:	461a      	mov	r2, r3
 80053b2:	2302      	movs	r3, #2
 80053b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fc1b 	bl	8005bfe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	3301      	adds	r3, #1
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f47f af49 	bne.w	800526e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f002 fca8 	bl	8007d36 <USB_ReadInterrupts>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f0:	d122      	bne.n	8005438 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800540c:	2b01      	cmp	r3, #1
 800540e:	d108      	bne.n	8005422 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005418:	2100      	movs	r1, #0
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fe26 	bl	800606c <HAL_PCDEx_LPM_Callback>
 8005420:	e002      	b.n	8005428 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f004 fd2a 	bl	8009e7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695a      	ldr	r2, [r3, #20]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005436:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f002 fc7a 	bl	8007d36 <USB_ReadInterrupts>
 8005442:	4603      	mov	r3, r0
 8005444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544c:	d112      	bne.n	8005474 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	d102      	bne.n	8005464 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f004 fce6 	bl	8009e30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695a      	ldr	r2, [r3, #20]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005472:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f002 fc5c 	bl	8007d36 <USB_ReadInterrupts>
 800547e:	4603      	mov	r3, r0
 8005480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005488:	f040 80c7 	bne.w	800561a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800549a:	f023 0301 	bic.w	r3, r3, #1
 800549e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2110      	movs	r1, #16
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 fcf6 	bl	8006e98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b0:	e056      	b.n	8005560 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	461a      	mov	r2, r3
 80054c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054e4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f6:	0151      	lsls	r1, r2, #5
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	440a      	add	r2, r1
 80054fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005500:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005504:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	461a      	mov	r2, r3
 8005514:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005518:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	440a      	add	r2, r1
 8005530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005534:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005538:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005554:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005558:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	3301      	adds	r3, #1
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005566:	429a      	cmp	r2, r3
 8005568:	d3a3      	bcc.n	80054b2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005578:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800557c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005596:	f043 030b 	orr.w	r3, r3, #11
 800559a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ac:	f043 030b 	orr.w	r3, r3, #11
 80055b0:	6453      	str	r3, [r2, #68]	; 0x44
 80055b2:	e015      	b.n	80055e0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80055ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055da:	f043 030b 	orr.w	r3, r3, #11
 80055de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005604:	461a      	mov	r2, r3
 8005606:	f002 fc5b 	bl	8007ec0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005618:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f002 fb89 	bl	8007d36 <USB_ReadInterrupts>
 8005624:	4603      	mov	r3, r0
 8005626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800562a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800562e:	d124      	bne.n	800567a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f002 fc1f 	bl	8007e78 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f001 fc87 	bl	8006f52 <USB_GetDevSpeed>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681c      	ldr	r4, [r3, #0]
 8005650:	f001 f92c 	bl	80068ac <HAL_RCC_GetHCLKFreq>
 8005654:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800565a:	b2db      	uxtb	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	4620      	mov	r0, r4
 8005660:	f001 f9a6 	bl	80069b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f004 fbba 	bl	8009dde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695a      	ldr	r2, [r3, #20]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005678:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f002 fb59 	bl	8007d36 <USB_ReadInterrupts>
 8005684:	4603      	mov	r3, r0
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b08      	cmp	r3, #8
 800568c:	d10a      	bne.n	80056a4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f004 fb97 	bl	8009dc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f002 0208 	and.w	r2, r2, #8
 80056a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f002 fb44 	bl	8007d36 <USB_ReadInterrupts>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b8:	d10f      	bne.n	80056da <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f004 fbf9 	bl	8009ebc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695a      	ldr	r2, [r3, #20]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80056d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f002 fb29 	bl	8007d36 <USB_ReadInterrupts>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ee:	d10f      	bne.n	8005710 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f004 fbcc 	bl	8009e98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800570e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f002 fb0e 	bl	8007d36 <USB_ReadInterrupts>
 800571a:	4603      	mov	r3, r0
 800571c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d10a      	bne.n	800573c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f004 fbda 	bl	8009ee0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800573a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4618      	mov	r0, r3
 8005742:	f002 faf8 	bl	8007d36 <USB_ReadInterrupts>
 8005746:	4603      	mov	r3, r0
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b04      	cmp	r3, #4
 800574e:	d115      	bne.n	800577c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f004 fbca 	bl	8009efc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6859      	ldr	r1, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]
 8005778:	e000      	b.n	800577c <HAL_PCD_IRQHandler+0x75e>
      return;
 800577a:	bf00      	nop
    }
  }
}
 800577c:	3734      	adds	r7, #52	; 0x34
 800577e:	46bd      	mov	sp, r7
 8005780:	bd90      	pop	{r4, r7, pc}

08005782 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_PCD_SetAddress+0x1a>
 8005798:	2302      	movs	r3, #2
 800579a:	e013      	b.n	80057c4 <HAL_PCD_SetAddress+0x42>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	78fa      	ldrb	r2, [r7, #3]
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f002 fa56 	bl	8007c66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	4608      	mov	r0, r1
 80057d6:	4611      	mov	r1, r2
 80057d8:	461a      	mov	r2, r3
 80057da:	4603      	mov	r3, r0
 80057dc:	70fb      	strb	r3, [r7, #3]
 80057de:	460b      	mov	r3, r1
 80057e0:	803b      	strh	r3, [r7, #0]
 80057e2:	4613      	mov	r3, r2
 80057e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	da0f      	bge.n	8005812 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	f003 020f 	and.w	r2, r3, #15
 80057f8:	4613      	mov	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	3338      	adds	r3, #56	; 0x38
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4413      	add	r3, r2
 8005806:	3304      	adds	r3, #4
 8005808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	705a      	strb	r2, [r3, #1]
 8005810:	e00f      	b.n	8005832 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	f003 020f 	and.w	r2, r3, #15
 8005818:	4613      	mov	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4413      	add	r3, r2
 8005828:	3304      	adds	r3, #4
 800582a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800583e:	883a      	ldrh	r2, [r7, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	78ba      	ldrb	r2, [r7, #2]
 8005848:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800585c:	78bb      	ldrb	r3, [r7, #2]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d102      	bne.n	8005868 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_PCD_EP_Open+0xaa>
 8005872:	2302      	movs	r3, #2
 8005874:	e00e      	b.n	8005894 <HAL_PCD_EP_Open+0xc8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	4618      	mov	r0, r3
 8005886:	f001 fb89 	bl	8006f9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005892:	7afb      	ldrb	r3, [r7, #11]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	da0f      	bge.n	80058d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	f003 020f 	and.w	r2, r3, #15
 80058b6:	4613      	mov	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	3338      	adds	r3, #56	; 0x38
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	4413      	add	r3, r2
 80058c4:	3304      	adds	r3, #4
 80058c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	705a      	strb	r2, [r3, #1]
 80058ce:	e00f      	b.n	80058f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	f003 020f 	and.w	r2, r3, #15
 80058d6:	4613      	mov	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	1a9b      	subs	r3, r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4413      	add	r3, r2
 80058e6:	3304      	adds	r3, #4
 80058e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <HAL_PCD_EP_Close+0x6e>
 8005906:	2302      	movs	r3, #2
 8005908:	e00e      	b.n	8005928 <HAL_PCD_EP_Close+0x8c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68f9      	ldr	r1, [r7, #12]
 8005918:	4618      	mov	r0, r3
 800591a:	f001 fbc7 	bl	80070ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	460b      	mov	r3, r1
 800593e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005940:	7afb      	ldrb	r3, [r7, #11]
 8005942:	f003 020f 	and.w	r2, r3, #15
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	3304      	adds	r3, #4
 8005958:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2200      	movs	r2, #0
 800596a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2200      	movs	r2, #0
 8005970:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005972:	7afb      	ldrb	r3, [r7, #11]
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	b2da      	uxtb	r2, r3
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d102      	bne.n	800598c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800598c:	7afb      	ldrb	r3, [r7, #11]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	6979      	ldr	r1, [r7, #20]
 80059a4:	f001 fea2 	bl	80076ec <USB_EP0StartXfer>
 80059a8:	e008      	b.n	80059bc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	6979      	ldr	r1, [r7, #20]
 80059b8:	f001 fc54 	bl	8007264 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	f003 020f 	and.w	r2, r3, #15
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80059e8:	681b      	ldr	r3, [r3, #0]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b086      	sub	sp, #24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
 8005a02:	460b      	mov	r3, r1
 8005a04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a06:	7afb      	ldrb	r3, [r7, #11]
 8005a08:	f003 020f 	and.w	r2, r3, #15
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	3338      	adds	r3, #56	; 0x38
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2201      	movs	r2, #1
 8005a34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a36:	7afb      	ldrb	r3, [r7, #11]
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d102      	bne.n	8005a50 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a50:	7afb      	ldrb	r3, [r7, #11]
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d109      	bne.n	8005a6e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	6979      	ldr	r1, [r7, #20]
 8005a68:	f001 fe40 	bl	80076ec <USB_EP0StartXfer>
 8005a6c:	e008      	b.n	8005a80 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6979      	ldr	r1, [r7, #20]
 8005a7c:	f001 fbf2 	bl	8007264 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	460b      	mov	r3, r1
 8005a94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	f003 020f 	and.w	r2, r3, #15
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d901      	bls.n	8005aa8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e050      	b.n	8005b4a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	da0f      	bge.n	8005ad0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	f003 020f 	and.w	r2, r3, #15
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	3338      	adds	r3, #56	; 0x38
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	705a      	strb	r2, [r3, #1]
 8005ace:	e00d      	b.n	8005aec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ad0:	78fa      	ldrb	r2, [r7, #3]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_PCD_EP_SetStall+0x82>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e01e      	b.n	8005b4a <HAL_PCD_EP_SetStall+0xc0>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68f9      	ldr	r1, [r7, #12]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f001 ffcf 	bl	8007abe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	b2d9      	uxtb	r1, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f002 f9c0 	bl	8007ec0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	f003 020f 	and.w	r2, r3, #15
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d901      	bls.n	8005b70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e042      	b.n	8005bf6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	da0f      	bge.n	8005b98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	f003 020f 	and.w	r2, r3, #15
 8005b7e:	4613      	mov	r3, r2
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	1a9b      	subs	r3, r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	3338      	adds	r3, #56	; 0x38
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	705a      	strb	r2, [r3, #1]
 8005b96:	e00f      	b.n	8005bb8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	f003 020f 	and.w	r2, r3, #15
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	3304      	adds	r3, #4
 8005bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_PCD_EP_ClrStall+0x86>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e00e      	b.n	8005bf6 <HAL_PCD_EP_ClrStall+0xa4>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68f9      	ldr	r1, [r7, #12]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 ffd7 	bl	8007b9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b08a      	sub	sp, #40	; 0x28
 8005c02:	af02      	add	r7, sp, #8
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	3338      	adds	r3, #56	; 0x38
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	4413      	add	r3, r2
 8005c22:	3304      	adds	r3, #4
 8005c24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d901      	bls.n	8005c36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e06c      	b.n	8005d10 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d902      	bls.n	8005c52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3303      	adds	r3, #3
 8005c56:	089b      	lsrs	r3, r3, #2
 8005c58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c5a:	e02b      	b.n	8005cb4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d902      	bls.n	8005c78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	3303      	adds	r3, #3
 8005c7c:	089b      	lsrs	r3, r3, #2
 8005c7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68d9      	ldr	r1, [r3, #12]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	4603      	mov	r3, r0
 8005c96:	6978      	ldr	r0, [r7, #20]
 8005c98:	f001 fe7b 	bl	8007992 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	441a      	add	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	699a      	ldr	r2, [r3, #24]
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	441a      	add	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d809      	bhi.n	8005cde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d203      	bcs.n	8005cde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1be      	bne.n	8005c5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	695a      	ldr	r2, [r3, #20]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d811      	bhi.n	8005d0e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	43db      	mvns	r3, r3
 8005d04:	6939      	ldr	r1, [r7, #16]
 8005d06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3720      	adds	r7, #32
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	333c      	adds	r3, #60	; 0x3c
 8005d30:	3304      	adds	r3, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	f040 80a0 	bne.w	8005e90 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d015      	beq.n	8005d86 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4a72      	ldr	r2, [pc, #456]	; (8005f28 <PCD_EP_OutXfrComplete_int+0x210>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	f240 80dd 	bls.w	8005f1e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80d7 	beq.w	8005f1e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d82:	6093      	str	r3, [r2, #8]
 8005d84:	e0cb      	b.n	8005f1e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	2320      	movs	r3, #32
 8005da0:	6093      	str	r3, [r2, #8]
 8005da2:	e0bc      	b.n	8005f1e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 80b7 	bne.w	8005f1e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4a5d      	ldr	r2, [pc, #372]	; (8005f28 <PCD_EP_OutXfrComplete_int+0x210>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d90f      	bls.n	8005dd8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dd4:	6093      	str	r3, [r2, #8]
 8005dd6:	e0a2      	b.n	8005f1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005dea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	0159      	lsls	r1, r3, #5
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	440b      	add	r3, r1
 8005df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005dfe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	4613      	mov	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4403      	add	r3, r0
 8005e0e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005e12:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	1a9b      	subs	r3, r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e26:	6819      	ldr	r1, [r3, #0]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	1a9b      	subs	r3, r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4403      	add	r3, r0
 8005e36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4419      	add	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	4613      	mov	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4403      	add	r3, r0
 8005e4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e50:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d114      	bne.n	8005e82 <PCD_EP_OutXfrComplete_int+0x16a>
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d108      	bne.n	8005e82 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	f002 f81f 	bl	8007ec0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f003 ff65 	bl	8009d58 <HAL_PCD_DataOutStageCallback>
 8005e8e:	e046      	b.n	8005f1e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4a26      	ldr	r2, [pc, #152]	; (8005f2c <PCD_EP_OutXfrComplete_int+0x214>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d124      	bne.n	8005ee2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb4:	6093      	str	r3, [r2, #8]
 8005eb6:	e032      	b.n	8005f1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ece:	461a      	mov	r2, r3
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f003 ff3c 	bl	8009d58 <HAL_PCD_DataOutStageCallback>
 8005ee0:	e01d      	b.n	8005f1e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d114      	bne.n	8005f12 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d108      	bne.n	8005f12 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	f001 ffd7 	bl	8007ec0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f003 ff1d 	bl	8009d58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	4f54300a 	.word	0x4f54300a
 8005f2c:	4f54310a 	.word	0x4f54310a

08005f30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	333c      	adds	r3, #60	; 0x3c
 8005f48:	3304      	adds	r3, #4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4a15      	ldr	r2, [pc, #84]	; (8005fb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d90e      	bls.n	8005f84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d009      	beq.n	8005f84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f003 fed5 	bl	8009d34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d90c      	bls.n	8005fac <PCD_EP_OutSetupPacket_int+0x7c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d108      	bne.n	8005fac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	f001 ff8a 	bl	8007ec0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	4f54300a 	.word	0x4f54300a

08005fbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d107      	bne.n	8005fea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005fda:	883b      	ldrh	r3, [r7, #0]
 8005fdc:	0419      	lsls	r1, r3, #16
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8005fe8:	e028      	b.n	800603c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff0:	0c1b      	lsrs	r3, r3, #16
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]
 8005ffc:	e00d      	b.n	800601a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	3340      	adds	r3, #64	; 0x40
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	4413      	add	r3, r2
 8006012:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	3301      	adds	r3, #1
 8006018:	73fb      	strb	r3, [r7, #15]
 800601a:	7bfa      	ldrb	r2, [r7, #15]
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	3b01      	subs	r3, #1
 8006020:	429a      	cmp	r2, r3
 8006022:	d3ec      	bcc.n	8005ffe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006024:	883b      	ldrh	r3, [r7, #0]
 8006026:	0418      	lsls	r0, r3, #16
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6819      	ldr	r1, [r3, #0]
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	3b01      	subs	r3, #1
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	4302      	orrs	r2, r0
 8006034:	3340      	adds	r3, #64	; 0x40
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	460b      	mov	r3, r1
 8006054:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	887a      	ldrh	r2, [r7, #2]
 800605c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e264      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d075      	beq.n	800618e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060a2:	4ba3      	ldr	r3, [pc, #652]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 030c 	and.w	r3, r3, #12
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d00c      	beq.n	80060c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060ae:	4ba0      	ldr	r3, [pc, #640]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d112      	bne.n	80060e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060ba:	4b9d      	ldr	r3, [pc, #628]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060c6:	d10b      	bne.n	80060e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c8:	4b99      	ldr	r3, [pc, #612]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d05b      	beq.n	800618c <HAL_RCC_OscConfig+0x108>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d157      	bne.n	800618c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e23f      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e8:	d106      	bne.n	80060f8 <HAL_RCC_OscConfig+0x74>
 80060ea:	4b91      	ldr	r3, [pc, #580]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a90      	ldr	r2, [pc, #576]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80060f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	e01d      	b.n	8006134 <HAL_RCC_OscConfig+0xb0>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006100:	d10c      	bne.n	800611c <HAL_RCC_OscConfig+0x98>
 8006102:	4b8b      	ldr	r3, [pc, #556]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a8a      	ldr	r2, [pc, #552]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	4b88      	ldr	r3, [pc, #544]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a87      	ldr	r2, [pc, #540]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	e00b      	b.n	8006134 <HAL_RCC_OscConfig+0xb0>
 800611c:	4b84      	ldr	r3, [pc, #528]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a83      	ldr	r2, [pc, #524]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	4b81      	ldr	r3, [pc, #516]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a80      	ldr	r2, [pc, #512]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 800612e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d013      	beq.n	8006164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800613c:	f7fd f888 	bl	8003250 <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006144:	f7fd f884 	bl	8003250 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b64      	cmp	r3, #100	; 0x64
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e204      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006156:	4b76      	ldr	r3, [pc, #472]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0f0      	beq.n	8006144 <HAL_RCC_OscConfig+0xc0>
 8006162:	e014      	b.n	800618e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006164:	f7fd f874 	bl	8003250 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800616c:	f7fd f870 	bl	8003250 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b64      	cmp	r3, #100	; 0x64
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e1f0      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800617e:	4b6c      	ldr	r3, [pc, #432]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1f0      	bne.n	800616c <HAL_RCC_OscConfig+0xe8>
 800618a:	e000      	b.n	800618e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800618c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d063      	beq.n	8006262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800619a:	4b65      	ldr	r3, [pc, #404]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 030c 	and.w	r3, r3, #12
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00b      	beq.n	80061be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061a6:	4b62      	ldr	r3, [pc, #392]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d11c      	bne.n	80061ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061b2:	4b5f      	ldr	r3, [pc, #380]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d116      	bne.n	80061ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061be:	4b5c      	ldr	r3, [pc, #368]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <HAL_RCC_OscConfig+0x152>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d001      	beq.n	80061d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e1c4      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d6:	4b56      	ldr	r3, [pc, #344]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	4952      	ldr	r1, [pc, #328]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ea:	e03a      	b.n	8006262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d020      	beq.n	8006236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061f4:	4b4f      	ldr	r3, [pc, #316]	; (8006334 <HAL_RCC_OscConfig+0x2b0>)
 80061f6:	2201      	movs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fa:	f7fd f829 	bl	8003250 <HAL_GetTick>
 80061fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006202:	f7fd f825 	bl	8003250 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e1a5      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006214:	4b46      	ldr	r3, [pc, #280]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f0      	beq.n	8006202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006220:	4b43      	ldr	r3, [pc, #268]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4940      	ldr	r1, [pc, #256]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006230:	4313      	orrs	r3, r2
 8006232:	600b      	str	r3, [r1, #0]
 8006234:	e015      	b.n	8006262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006236:	4b3f      	ldr	r3, [pc, #252]	; (8006334 <HAL_RCC_OscConfig+0x2b0>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623c:	f7fd f808 	bl	8003250 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006244:	f7fd f804 	bl	8003250 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e184      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006256:	4b36      	ldr	r3, [pc, #216]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1f0      	bne.n	8006244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d030      	beq.n	80062d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d016      	beq.n	80062a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006276:	4b30      	ldr	r3, [pc, #192]	; (8006338 <HAL_RCC_OscConfig+0x2b4>)
 8006278:	2201      	movs	r2, #1
 800627a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627c:	f7fc ffe8 	bl	8003250 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006284:	f7fc ffe4 	bl	8003250 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e164      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006296:	4b26      	ldr	r3, [pc, #152]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCC_OscConfig+0x200>
 80062a2:	e015      	b.n	80062d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062a4:	4b24      	ldr	r3, [pc, #144]	; (8006338 <HAL_RCC_OscConfig+0x2b4>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062aa:	f7fc ffd1 	bl	8003250 <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b2:	f7fc ffcd 	bl	8003250 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e14d      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c4:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80062c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1f0      	bne.n	80062b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80a0 	beq.w	800641e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e2:	4b13      	ldr	r3, [pc, #76]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10f      	bne.n	800630e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ee:	2300      	movs	r3, #0
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	4a0e      	ldr	r2, [pc, #56]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 80062f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062fc:	6413      	str	r3, [r2, #64]	; 0x40
 80062fe:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <HAL_RCC_OscConfig+0x2ac>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006306:	60bb      	str	r3, [r7, #8]
 8006308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800630a:	2301      	movs	r3, #1
 800630c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800630e:	4b0b      	ldr	r3, [pc, #44]	; (800633c <HAL_RCC_OscConfig+0x2b8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d121      	bne.n	800635e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800631a:	4b08      	ldr	r3, [pc, #32]	; (800633c <HAL_RCC_OscConfig+0x2b8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a07      	ldr	r2, [pc, #28]	; (800633c <HAL_RCC_OscConfig+0x2b8>)
 8006320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006326:	f7fc ff93 	bl	8003250 <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800632c:	e011      	b.n	8006352 <HAL_RCC_OscConfig+0x2ce>
 800632e:	bf00      	nop
 8006330:	40023800 	.word	0x40023800
 8006334:	42470000 	.word	0x42470000
 8006338:	42470e80 	.word	0x42470e80
 800633c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006340:	f7fc ff86 	bl	8003250 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e106      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006352:	4b85      	ldr	r3, [pc, #532]	; (8006568 <HAL_RCC_OscConfig+0x4e4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f0      	beq.n	8006340 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d106      	bne.n	8006374 <HAL_RCC_OscConfig+0x2f0>
 8006366:	4b81      	ldr	r3, [pc, #516]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	4a80      	ldr	r2, [pc, #512]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	6713      	str	r3, [r2, #112]	; 0x70
 8006372:	e01c      	b.n	80063ae <HAL_RCC_OscConfig+0x32a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b05      	cmp	r3, #5
 800637a:	d10c      	bne.n	8006396 <HAL_RCC_OscConfig+0x312>
 800637c:	4b7b      	ldr	r3, [pc, #492]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 800637e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006380:	4a7a      	ldr	r2, [pc, #488]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 8006382:	f043 0304 	orr.w	r3, r3, #4
 8006386:	6713      	str	r3, [r2, #112]	; 0x70
 8006388:	4b78      	ldr	r3, [pc, #480]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 800638a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638c:	4a77      	ldr	r2, [pc, #476]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	6713      	str	r3, [r2, #112]	; 0x70
 8006394:	e00b      	b.n	80063ae <HAL_RCC_OscConfig+0x32a>
 8006396:	4b75      	ldr	r3, [pc, #468]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	4a74      	ldr	r2, [pc, #464]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 800639c:	f023 0301 	bic.w	r3, r3, #1
 80063a0:	6713      	str	r3, [r2, #112]	; 0x70
 80063a2:	4b72      	ldr	r3, [pc, #456]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a6:	4a71      	ldr	r2, [pc, #452]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 80063a8:	f023 0304 	bic.w	r3, r3, #4
 80063ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d015      	beq.n	80063e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b6:	f7fc ff4b 	bl	8003250 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063bc:	e00a      	b.n	80063d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063be:	f7fc ff47 	bl	8003250 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e0c5      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d4:	4b65      	ldr	r3, [pc, #404]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0ee      	beq.n	80063be <HAL_RCC_OscConfig+0x33a>
 80063e0:	e014      	b.n	800640c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063e2:	f7fc ff35 	bl	8003250 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063e8:	e00a      	b.n	8006400 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ea:	f7fc ff31 	bl	8003250 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e0af      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006400:	4b5a      	ldr	r3, [pc, #360]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1ee      	bne.n	80063ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d105      	bne.n	800641e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006412:	4b56      	ldr	r3, [pc, #344]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	4a55      	ldr	r2, [pc, #340]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 8006418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800641c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 809b 	beq.w	800655e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006428:	4b50      	ldr	r3, [pc, #320]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 030c 	and.w	r3, r3, #12
 8006430:	2b08      	cmp	r3, #8
 8006432:	d05c      	beq.n	80064ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d141      	bne.n	80064c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800643c:	4b4c      	ldr	r3, [pc, #304]	; (8006570 <HAL_RCC_OscConfig+0x4ec>)
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006442:	f7fc ff05 	bl	8003250 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800644a:	f7fc ff01 	bl	8003250 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e081      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800645c:	4b43      	ldr	r3, [pc, #268]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1f0      	bne.n	800644a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	019b      	lsls	r3, r3, #6
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	3b01      	subs	r3, #1
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648a:	061b      	lsls	r3, r3, #24
 800648c:	4937      	ldr	r1, [pc, #220]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 800648e:	4313      	orrs	r3, r2
 8006490:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006492:	4b37      	ldr	r3, [pc, #220]	; (8006570 <HAL_RCC_OscConfig+0x4ec>)
 8006494:	2201      	movs	r2, #1
 8006496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006498:	f7fc feda 	bl	8003250 <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a0:	f7fc fed6 	bl	8003250 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e056      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b2:	4b2e      	ldr	r3, [pc, #184]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0f0      	beq.n	80064a0 <HAL_RCC_OscConfig+0x41c>
 80064be:	e04e      	b.n	800655e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c0:	4b2b      	ldr	r3, [pc, #172]	; (8006570 <HAL_RCC_OscConfig+0x4ec>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c6:	f7fc fec3 	bl	8003250 <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ce:	f7fc febf 	bl	8003250 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e03f      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e0:	4b22      	ldr	r3, [pc, #136]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f0      	bne.n	80064ce <HAL_RCC_OscConfig+0x44a>
 80064ec:	e037      	b.n	800655e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e032      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064fa:	4b1c      	ldr	r3, [pc, #112]	; (800656c <HAL_RCC_OscConfig+0x4e8>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d028      	beq.n	800655a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006512:	429a      	cmp	r2, r3
 8006514:	d121      	bne.n	800655a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006520:	429a      	cmp	r2, r3
 8006522:	d11a      	bne.n	800655a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800652a:	4013      	ands	r3, r2
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006530:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006532:	4293      	cmp	r3, r2
 8006534:	d111      	bne.n	800655a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	3b01      	subs	r3, #1
 8006544:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006546:	429a      	cmp	r2, r3
 8006548:	d107      	bne.n	800655a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006556:	429a      	cmp	r2, r3
 8006558:	d001      	beq.n	800655e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40007000 	.word	0x40007000
 800656c:	40023800 	.word	0x40023800
 8006570:	42470060 	.word	0x42470060

08006574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e0cc      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006588:	4b68      	ldr	r3, [pc, #416]	; (800672c <HAL_RCC_ClockConfig+0x1b8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d90c      	bls.n	80065b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006596:	4b65      	ldr	r3, [pc, #404]	; (800672c <HAL_RCC_ClockConfig+0x1b8>)
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800659e:	4b63      	ldr	r3, [pc, #396]	; (800672c <HAL_RCC_ClockConfig+0x1b8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d001      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e0b8      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d020      	beq.n	80065fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065c8:	4b59      	ldr	r3, [pc, #356]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	4a58      	ldr	r2, [pc, #352]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065e0:	4b53      	ldr	r3, [pc, #332]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	4a52      	ldr	r2, [pc, #328]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 80065e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065ec:	4b50      	ldr	r3, [pc, #320]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	494d      	ldr	r1, [pc, #308]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d044      	beq.n	8006694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d107      	bne.n	8006622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006612:	4b47      	ldr	r3, [pc, #284]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d119      	bne.n	8006652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e07f      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d003      	beq.n	8006632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800662e:	2b03      	cmp	r3, #3
 8006630:	d107      	bne.n	8006642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006632:	4b3f      	ldr	r3, [pc, #252]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e06f      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006642:	4b3b      	ldr	r3, [pc, #236]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e067      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006652:	4b37      	ldr	r3, [pc, #220]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f023 0203 	bic.w	r2, r3, #3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	4934      	ldr	r1, [pc, #208]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 8006660:	4313      	orrs	r3, r2
 8006662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006664:	f7fc fdf4 	bl	8003250 <HAL_GetTick>
 8006668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800666a:	e00a      	b.n	8006682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800666c:	f7fc fdf0 	bl	8003250 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	f241 3288 	movw	r2, #5000	; 0x1388
 800667a:	4293      	cmp	r3, r2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e04f      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006682:	4b2b      	ldr	r3, [pc, #172]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 020c 	and.w	r2, r3, #12
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	429a      	cmp	r2, r3
 8006692:	d1eb      	bne.n	800666c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006694:	4b25      	ldr	r3, [pc, #148]	; (800672c <HAL_RCC_ClockConfig+0x1b8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d20c      	bcs.n	80066bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066a2:	4b22      	ldr	r3, [pc, #136]	; (800672c <HAL_RCC_ClockConfig+0x1b8>)
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066aa:	4b20      	ldr	r3, [pc, #128]	; (800672c <HAL_RCC_ClockConfig+0x1b8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d001      	beq.n	80066bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e032      	b.n	8006722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066c8:	4b19      	ldr	r3, [pc, #100]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	4916      	ldr	r1, [pc, #88]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066e6:	4b12      	ldr	r3, [pc, #72]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	490e      	ldr	r1, [pc, #56]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066fa:	f000 f821 	bl	8006740 <HAL_RCC_GetSysClockFreq>
 80066fe:	4602      	mov	r2, r0
 8006700:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <HAL_RCC_ClockConfig+0x1bc>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	091b      	lsrs	r3, r3, #4
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	490a      	ldr	r1, [pc, #40]	; (8006734 <HAL_RCC_ClockConfig+0x1c0>)
 800670c:	5ccb      	ldrb	r3, [r1, r3]
 800670e:	fa22 f303 	lsr.w	r3, r2, r3
 8006712:	4a09      	ldr	r2, [pc, #36]	; (8006738 <HAL_RCC_ClockConfig+0x1c4>)
 8006714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <HAL_RCC_ClockConfig+0x1c8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f7fc fd54 	bl	80031c8 <HAL_InitTick>

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40023c00 	.word	0x40023c00
 8006730:	40023800 	.word	0x40023800
 8006734:	0800b2c8 	.word	0x0800b2c8
 8006738:	20000034 	.word	0x20000034
 800673c:	20000038 	.word	0x20000038

08006740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006740:	b5b0      	push	{r4, r5, r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006746:	2100      	movs	r1, #0
 8006748:	6079      	str	r1, [r7, #4]
 800674a:	2100      	movs	r1, #0
 800674c:	60f9      	str	r1, [r7, #12]
 800674e:	2100      	movs	r1, #0
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006752:	2100      	movs	r1, #0
 8006754:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006756:	4952      	ldr	r1, [pc, #328]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006758:	6889      	ldr	r1, [r1, #8]
 800675a:	f001 010c 	and.w	r1, r1, #12
 800675e:	2908      	cmp	r1, #8
 8006760:	d00d      	beq.n	800677e <HAL_RCC_GetSysClockFreq+0x3e>
 8006762:	2908      	cmp	r1, #8
 8006764:	f200 8094 	bhi.w	8006890 <HAL_RCC_GetSysClockFreq+0x150>
 8006768:	2900      	cmp	r1, #0
 800676a:	d002      	beq.n	8006772 <HAL_RCC_GetSysClockFreq+0x32>
 800676c:	2904      	cmp	r1, #4
 800676e:	d003      	beq.n	8006778 <HAL_RCC_GetSysClockFreq+0x38>
 8006770:	e08e      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006772:	4b4c      	ldr	r3, [pc, #304]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8006774:	60bb      	str	r3, [r7, #8]
       break;
 8006776:	e08e      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006778:	4b4b      	ldr	r3, [pc, #300]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800677a:	60bb      	str	r3, [r7, #8]
      break;
 800677c:	e08b      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800677e:	4948      	ldr	r1, [pc, #288]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006780:	6849      	ldr	r1, [r1, #4]
 8006782:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006786:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006788:	4945      	ldr	r1, [pc, #276]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800678a:	6849      	ldr	r1, [r1, #4]
 800678c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006790:	2900      	cmp	r1, #0
 8006792:	d024      	beq.n	80067de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006794:	4942      	ldr	r1, [pc, #264]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006796:	6849      	ldr	r1, [r1, #4]
 8006798:	0989      	lsrs	r1, r1, #6
 800679a:	4608      	mov	r0, r1
 800679c:	f04f 0100 	mov.w	r1, #0
 80067a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80067a4:	f04f 0500 	mov.w	r5, #0
 80067a8:	ea00 0204 	and.w	r2, r0, r4
 80067ac:	ea01 0305 	and.w	r3, r1, r5
 80067b0:	493d      	ldr	r1, [pc, #244]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80067b2:	fb01 f003 	mul.w	r0, r1, r3
 80067b6:	2100      	movs	r1, #0
 80067b8:	fb01 f102 	mul.w	r1, r1, r2
 80067bc:	1844      	adds	r4, r0, r1
 80067be:	493a      	ldr	r1, [pc, #232]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80067c0:	fba2 0101 	umull	r0, r1, r2, r1
 80067c4:	1863      	adds	r3, r4, r1
 80067c6:	4619      	mov	r1, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	f7fa f9de 	bl	8000b90 <__aeabi_uldivmod>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4613      	mov	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e04a      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067de:	4b30      	ldr	r3, [pc, #192]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	099b      	lsrs	r3, r3, #6
 80067e4:	461a      	mov	r2, r3
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067ee:	f04f 0100 	mov.w	r1, #0
 80067f2:	ea02 0400 	and.w	r4, r2, r0
 80067f6:	ea03 0501 	and.w	r5, r3, r1
 80067fa:	4620      	mov	r0, r4
 80067fc:	4629      	mov	r1, r5
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	014b      	lsls	r3, r1, #5
 8006808:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800680c:	0142      	lsls	r2, r0, #5
 800680e:	4610      	mov	r0, r2
 8006810:	4619      	mov	r1, r3
 8006812:	1b00      	subs	r0, r0, r4
 8006814:	eb61 0105 	sbc.w	r1, r1, r5
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	018b      	lsls	r3, r1, #6
 8006822:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006826:	0182      	lsls	r2, r0, #6
 8006828:	1a12      	subs	r2, r2, r0
 800682a:	eb63 0301 	sbc.w	r3, r3, r1
 800682e:	f04f 0000 	mov.w	r0, #0
 8006832:	f04f 0100 	mov.w	r1, #0
 8006836:	00d9      	lsls	r1, r3, #3
 8006838:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800683c:	00d0      	lsls	r0, r2, #3
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	1912      	adds	r2, r2, r4
 8006844:	eb45 0303 	adc.w	r3, r5, r3
 8006848:	f04f 0000 	mov.w	r0, #0
 800684c:	f04f 0100 	mov.w	r1, #0
 8006850:	0299      	lsls	r1, r3, #10
 8006852:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006856:	0290      	lsls	r0, r2, #10
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4610      	mov	r0, r2
 800685e:	4619      	mov	r1, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	461a      	mov	r2, r3
 8006864:	f04f 0300 	mov.w	r3, #0
 8006868:	f7fa f992 	bl	8000b90 <__aeabi_uldivmod>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4613      	mov	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	0c1b      	lsrs	r3, r3, #16
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	3301      	adds	r3, #1
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	fbb2 f3f3 	udiv	r3, r2, r3
 800688c:	60bb      	str	r3, [r7, #8]
      break;
 800688e:	e002      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006890:	4b04      	ldr	r3, [pc, #16]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8006892:	60bb      	str	r3, [r7, #8]
      break;
 8006894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006896:	68bb      	ldr	r3, [r7, #8]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bdb0      	pop	{r4, r5, r7, pc}
 80068a0:	40023800 	.word	0x40023800
 80068a4:	00f42400 	.word	0x00f42400
 80068a8:	017d7840 	.word	0x017d7840

080068ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068b0:	4b03      	ldr	r3, [pc, #12]	; (80068c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80068b2:	681b      	ldr	r3, [r3, #0]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20000034 	.word	0x20000034

080068c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068c8:	f7ff fff0 	bl	80068ac <HAL_RCC_GetHCLKFreq>
 80068cc:	4602      	mov	r2, r0
 80068ce:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	0a9b      	lsrs	r3, r3, #10
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	4903      	ldr	r1, [pc, #12]	; (80068e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068da:	5ccb      	ldrb	r3, [r1, r3]
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40023800 	.word	0x40023800
 80068e8:	0800b2d8 	.word	0x0800b2d8

080068ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068ec:	b084      	sub	sp, #16
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	f107 001c 	add.w	r0, r7, #28
 80068fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	2b01      	cmp	r3, #1
 8006902:	d122      	bne.n	800694a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800692c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692e:	2b01      	cmp	r3, #1
 8006930:	d105      	bne.n	800693e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 fb1c 	bl	8007f7c <USB_CoreReset>
 8006944:	4603      	mov	r3, r0
 8006946:	73fb      	strb	r3, [r7, #15]
 8006948:	e01a      	b.n	8006980 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 fb10 	bl	8007f7c <USB_CoreReset>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	639a      	str	r2, [r3, #56]	; 0x38
 8006972:	e005      	b.n	8006980 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	2b01      	cmp	r3, #1
 8006984:	d10b      	bne.n	800699e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f043 0206 	orr.w	r2, r3, #6
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f043 0220 	orr.w	r2, r3, #32
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800699e:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069aa:	b004      	add	sp, #16
 80069ac:	4770      	bx	lr
	...

080069b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d165      	bne.n	8006a90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4a41      	ldr	r2, [pc, #260]	; (8006acc <USB_SetTurnaroundTime+0x11c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d906      	bls.n	80069da <USB_SetTurnaroundTime+0x2a>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a40      	ldr	r2, [pc, #256]	; (8006ad0 <USB_SetTurnaroundTime+0x120>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d202      	bcs.n	80069da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80069d4:	230f      	movs	r3, #15
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e062      	b.n	8006aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4a3c      	ldr	r2, [pc, #240]	; (8006ad0 <USB_SetTurnaroundTime+0x120>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d306      	bcc.n	80069f0 <USB_SetTurnaroundTime+0x40>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	4a3b      	ldr	r2, [pc, #236]	; (8006ad4 <USB_SetTurnaroundTime+0x124>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d202      	bcs.n	80069f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80069ea:	230e      	movs	r3, #14
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	e057      	b.n	8006aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4a38      	ldr	r2, [pc, #224]	; (8006ad4 <USB_SetTurnaroundTime+0x124>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d306      	bcc.n	8006a06 <USB_SetTurnaroundTime+0x56>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4a37      	ldr	r2, [pc, #220]	; (8006ad8 <USB_SetTurnaroundTime+0x128>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d202      	bcs.n	8006a06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a00:	230d      	movs	r3, #13
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	e04c      	b.n	8006aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4a33      	ldr	r2, [pc, #204]	; (8006ad8 <USB_SetTurnaroundTime+0x128>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d306      	bcc.n	8006a1c <USB_SetTurnaroundTime+0x6c>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4a32      	ldr	r2, [pc, #200]	; (8006adc <USB_SetTurnaroundTime+0x12c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d802      	bhi.n	8006a1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a16:	230c      	movs	r3, #12
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	e041      	b.n	8006aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4a2f      	ldr	r2, [pc, #188]	; (8006adc <USB_SetTurnaroundTime+0x12c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d906      	bls.n	8006a32 <USB_SetTurnaroundTime+0x82>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4a2e      	ldr	r2, [pc, #184]	; (8006ae0 <USB_SetTurnaroundTime+0x130>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d802      	bhi.n	8006a32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a2c:	230b      	movs	r3, #11
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	e036      	b.n	8006aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	4a2a      	ldr	r2, [pc, #168]	; (8006ae0 <USB_SetTurnaroundTime+0x130>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d906      	bls.n	8006a48 <USB_SetTurnaroundTime+0x98>
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4a29      	ldr	r2, [pc, #164]	; (8006ae4 <USB_SetTurnaroundTime+0x134>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d802      	bhi.n	8006a48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a42:	230a      	movs	r3, #10
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e02b      	b.n	8006aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4a26      	ldr	r2, [pc, #152]	; (8006ae4 <USB_SetTurnaroundTime+0x134>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d906      	bls.n	8006a5e <USB_SetTurnaroundTime+0xae>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4a25      	ldr	r2, [pc, #148]	; (8006ae8 <USB_SetTurnaroundTime+0x138>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d202      	bcs.n	8006a5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a58:	2309      	movs	r3, #9
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e020      	b.n	8006aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <USB_SetTurnaroundTime+0x138>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d306      	bcc.n	8006a74 <USB_SetTurnaroundTime+0xc4>
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4a20      	ldr	r2, [pc, #128]	; (8006aec <USB_SetTurnaroundTime+0x13c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d802      	bhi.n	8006a74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a6e:	2308      	movs	r3, #8
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	e015      	b.n	8006aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4a1d      	ldr	r2, [pc, #116]	; (8006aec <USB_SetTurnaroundTime+0x13c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d906      	bls.n	8006a8a <USB_SetTurnaroundTime+0xda>
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4a1c      	ldr	r2, [pc, #112]	; (8006af0 <USB_SetTurnaroundTime+0x140>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d202      	bcs.n	8006a8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a84:	2307      	movs	r3, #7
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	e00a      	b.n	8006aa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a8a:	2306      	movs	r3, #6
 8006a8c:	617b      	str	r3, [r7, #20]
 8006a8e:	e007      	b.n	8006aa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a96:	2309      	movs	r3, #9
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	e001      	b.n	8006aa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a9c:	2309      	movs	r3, #9
 8006a9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	029b      	lsls	r3, r3, #10
 8006ab4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	371c      	adds	r7, #28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	00d8acbf 	.word	0x00d8acbf
 8006ad0:	00e4e1c0 	.word	0x00e4e1c0
 8006ad4:	00f42400 	.word	0x00f42400
 8006ad8:	01067380 	.word	0x01067380
 8006adc:	011a499f 	.word	0x011a499f
 8006ae0:	01312cff 	.word	0x01312cff
 8006ae4:	014ca43f 	.word	0x014ca43f
 8006ae8:	016e3600 	.word	0x016e3600
 8006aec:	01a6ab1f 	.word	0x01a6ab1f
 8006af0:	01e84800 	.word	0x01e84800

08006af4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f043 0201 	orr.w	r2, r3, #1
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f023 0201 	bic.w	r2, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d115      	bne.n	8006b86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b66:	2001      	movs	r0, #1
 8006b68:	f7fc fb7e 	bl	8003268 <HAL_Delay>
      ms++;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 f972 	bl	8007e5c <USB_GetMode>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d01e      	beq.n	8006bbc <USB_SetCurrentMode+0x84>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b31      	cmp	r3, #49	; 0x31
 8006b82:	d9f0      	bls.n	8006b66 <USB_SetCurrentMode+0x2e>
 8006b84:	e01a      	b.n	8006bbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d115      	bne.n	8006bb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b98:	2001      	movs	r0, #1
 8006b9a:	f7fc fb65 	bl	8003268 <HAL_Delay>
      ms++;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f959 	bl	8007e5c <USB_GetMode>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <USB_SetCurrentMode+0x84>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b31      	cmp	r3, #49	; 0x31
 8006bb4:	d9f0      	bls.n	8006b98 <USB_SetCurrentMode+0x60>
 8006bb6:	e001      	b.n	8006bbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e005      	b.n	8006bc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b32      	cmp	r3, #50	; 0x32
 8006bc0:	d101      	bne.n	8006bc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e000      	b.n	8006bc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b086      	sub	sp, #24
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bea:	2300      	movs	r3, #0
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	e009      	b.n	8006c04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	3340      	adds	r3, #64	; 0x40
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	3301      	adds	r3, #1
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2b0e      	cmp	r3, #14
 8006c08:	d9f2      	bls.n	8006bf0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d11c      	bne.n	8006c4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c1e:	f043 0302 	orr.w	r3, r3, #2
 8006c22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38
 8006c48:	e00b      	b.n	8006c62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c68:	461a      	mov	r2, r3
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c74:	4619      	mov	r1, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	680b      	ldr	r3, [r1, #0]
 8006c80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d10c      	bne.n	8006ca2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d104      	bne.n	8006c98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c8e:	2100      	movs	r1, #0
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f945 	bl	8006f20 <USB_SetDevSpeed>
 8006c96:	e008      	b.n	8006caa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c98:	2101      	movs	r1, #1
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f940 	bl	8006f20 <USB_SetDevSpeed>
 8006ca0:	e003      	b.n	8006caa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ca2:	2103      	movs	r1, #3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f93b 	bl	8006f20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006caa:	2110      	movs	r1, #16
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8f3 	bl	8006e98 <USB_FlushTxFifo>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f90f 	bl	8006ee0 <USB_FlushRxFifo>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cde:	461a      	mov	r2, r3
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cea:	461a      	mov	r2, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	e043      	b.n	8006d7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0c:	d118      	bne.n	8006d40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10a      	bne.n	8006d2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	461a      	mov	r2, r3
 8006d22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	e013      	b.n	8006d52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d36:	461a      	mov	r2, r3
 8006d38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	e008      	b.n	8006d52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	461a      	mov	r2, r3
 8006d60:	2300      	movs	r3, #0
 8006d62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d70:	461a      	mov	r2, r3
 8006d72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d3b7      	bcc.n	8006cf6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	e043      	b.n	8006e14 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da2:	d118      	bne.n	8006dd6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db6:	461a      	mov	r2, r3
 8006db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	e013      	b.n	8006de8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	e008      	b.n	8006de8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de2:	461a      	mov	r2, r3
 8006de4:	2300      	movs	r3, #0
 8006de6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df4:	461a      	mov	r2, r3
 8006df6:	2300      	movs	r3, #0
 8006df8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e06:	461a      	mov	r2, r3
 8006e08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3301      	adds	r3, #1
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d3b7      	bcc.n	8006d8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d105      	bne.n	8006e50 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	f043 0210 	orr.w	r2, r3, #16
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699a      	ldr	r2, [r3, #24]
 8006e54:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <USB_DevInit+0x2c4>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f043 0208 	orr.w	r2, r3, #8
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d107      	bne.n	8006e84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e7c:	f043 0304 	orr.w	r3, r3, #4
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e90:	b004      	add	sp, #16
 8006e92:	4770      	bx	lr
 8006e94:	803c3800 	.word	0x803c3800

08006e98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	019b      	lsls	r3, r3, #6
 8006eaa:	f043 0220 	orr.w	r2, r3, #32
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	4a08      	ldr	r2, [pc, #32]	; (8006edc <USB_FlushTxFifo+0x44>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d901      	bls.n	8006ec2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e006      	b.n	8006ed0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	d0f1      	beq.n	8006eb2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	00030d40 	.word	0x00030d40

08006ee0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2210      	movs	r2, #16
 8006ef0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <USB_FlushRxFifo+0x3c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d901      	bls.n	8006f02 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e006      	b.n	8006f10 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b10      	cmp	r3, #16
 8006f0c:	d0f1      	beq.n	8006ef2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	00030d40 	.word	0x00030d40

08006f20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f40:	4313      	orrs	r3, r2
 8006f42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b087      	sub	sp, #28
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 0306 	and.w	r3, r3, #6
 8006f6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f72:	2300      	movs	r3, #0
 8006f74:	75fb      	strb	r3, [r7, #23]
 8006f76:	e00a      	b.n	8006f8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d002      	beq.n	8006f84 <USB_GetDevSpeed+0x32>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b06      	cmp	r3, #6
 8006f82:	d102      	bne.n	8006f8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f84:	2302      	movs	r3, #2
 8006f86:	75fb      	strb	r3, [r7, #23]
 8006f88:	e001      	b.n	8006f8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f8a:	230f      	movs	r3, #15
 8006f8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	371c      	adds	r7, #28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d13a      	bne.n	800702e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbe:	69da      	ldr	r2, [r3, #28]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	2101      	movs	r1, #1
 8006fca:	fa01 f303 	lsl.w	r3, r1, r3
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	68f9      	ldr	r1, [r7, #12]
 8006fd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d155      	bne.n	800709c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	78db      	ldrb	r3, [r3, #3]
 800700a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800700c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	059b      	lsls	r3, r3, #22
 8007012:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007014:	4313      	orrs	r3, r2
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	440a      	add	r2, r1
 800701e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	e036      	b.n	800709c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007034:	69da      	ldr	r2, [r3, #28]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	2101      	movs	r1, #1
 8007040:	fa01 f303 	lsl.w	r3, r1, r3
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800704c:	4313      	orrs	r3, r2
 800704e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d11a      	bne.n	800709c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	78db      	ldrb	r3, [r3, #3]
 8007080:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007082:	430b      	orrs	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800709a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	785b      	ldrb	r3, [r3, #1]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d161      	bne.n	800718c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070de:	d11f      	bne.n	8007120 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800711a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800711e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	2101      	movs	r1, #1
 8007132:	fa01 f303 	lsl.w	r3, r1, r3
 8007136:	b29b      	uxth	r3, r3
 8007138:	43db      	mvns	r3, r3
 800713a:	68f9      	ldr	r1, [r7, #12]
 800713c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007140:	4013      	ands	r3, r2
 8007142:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	2101      	movs	r1, #1
 8007156:	fa01 f303 	lsl.w	r3, r1, r3
 800715a:	b29b      	uxth	r3, r3
 800715c:	43db      	mvns	r3, r3
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007164:	4013      	ands	r3, r2
 8007166:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	0159      	lsls	r1, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	440b      	add	r3, r1
 800717e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007182:	4619      	mov	r1, r3
 8007184:	4b35      	ldr	r3, [pc, #212]	; (800725c <USB_DeactivateEndpoint+0x1b0>)
 8007186:	4013      	ands	r3, r2
 8007188:	600b      	str	r3, [r1, #0]
 800718a:	e060      	b.n	800724e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800719e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071a2:	d11f      	bne.n	80071e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	2101      	movs	r1, #1
 80071f6:	fa01 f303 	lsl.w	r3, r1, r3
 80071fa:	041b      	lsls	r3, r3, #16
 80071fc:	43db      	mvns	r3, r3
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007204:	4013      	ands	r3, r2
 8007206:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	2101      	movs	r1, #1
 800721a:	fa01 f303 	lsl.w	r3, r1, r3
 800721e:	041b      	lsls	r3, r3, #16
 8007220:	43db      	mvns	r3, r3
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007228:	4013      	ands	r3, r2
 800722a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	0159      	lsls	r1, r3, #5
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	440b      	add	r3, r1
 8007242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007246:	4619      	mov	r1, r3
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <USB_DeactivateEndpoint+0x1b4>)
 800724a:	4013      	ands	r3, r2
 800724c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	ec337800 	.word	0xec337800
 8007260:	eff37800 	.word	0xeff37800

08007264 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	785b      	ldrb	r3, [r3, #1]
 8007280:	2b01      	cmp	r3, #1
 8007282:	f040 815c 	bne.w	800753e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d132      	bne.n	80072f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	0151      	lsls	r1, r2, #5
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	440a      	add	r2, r1
 80072c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ec:	0cdb      	lsrs	r3, r3, #19
 80072ee:	04db      	lsls	r3, r3, #19
 80072f0:	6113      	str	r3, [r2, #16]
 80072f2:	e074      	b.n	80073de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730e:	0cdb      	lsrs	r3, r3, #19
 8007310:	04db      	lsls	r3, r3, #19
 8007312:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007332:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007336:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007344:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6959      	ldr	r1, [r3, #20]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	440b      	add	r3, r1
 8007350:	1e59      	subs	r1, r3, #1
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	fbb1 f3f3 	udiv	r3, r1, r3
 800735a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800735c:	4b9d      	ldr	r3, [pc, #628]	; (80075d4 <USB_EPStartXfer+0x370>)
 800735e:	400b      	ands	r3, r1
 8007360:	69b9      	ldr	r1, [r7, #24]
 8007362:	0148      	lsls	r0, r1, #5
 8007364:	69f9      	ldr	r1, [r7, #28]
 8007366:	4401      	add	r1, r0
 8007368:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800736c:	4313      	orrs	r3, r2
 800736e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007386:	69b9      	ldr	r1, [r7, #24]
 8007388:	0148      	lsls	r0, r1, #5
 800738a:	69f9      	ldr	r1, [r7, #28]
 800738c:	4401      	add	r1, r0
 800738e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007392:	4313      	orrs	r3, r2
 8007394:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	78db      	ldrb	r3, [r3, #3]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d11f      	bne.n	80073de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80073bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d14b      	bne.n	800747c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d009      	beq.n	8007400 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f8:	461a      	mov	r2, r3
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	78db      	ldrb	r3, [r3, #3]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d128      	bne.n	800745a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007414:	2b00      	cmp	r3, #0
 8007416:	d110      	bne.n	800743a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	440a      	add	r2, r1
 800742e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007432:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007436:	6013      	str	r3, [r2, #0]
 8007438:	e00f      	b.n	800745a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	0151      	lsls	r1, r2, #5
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	440a      	add	r2, r1
 8007450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007458:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	69fa      	ldr	r2, [r7, #28]
 800746e:	440a      	add	r2, r1
 8007470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007474:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	e12f      	b.n	80076dc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	0151      	lsls	r1, r2, #5
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	440a      	add	r2, r1
 8007492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007496:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800749a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	78db      	ldrb	r3, [r3, #3]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d015      	beq.n	80074d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 8117 	beq.w	80076dc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	2101      	movs	r1, #1
 80074c0:	fa01 f303 	lsl.w	r3, r1, r3
 80074c4:	69f9      	ldr	r1, [r7, #28]
 80074c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074ca:	4313      	orrs	r3, r2
 80074cc:	634b      	str	r3, [r1, #52]	; 0x34
 80074ce:	e105      	b.n	80076dc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d110      	bne.n	8007502 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	0151      	lsls	r1, r2, #5
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	440a      	add	r2, r1
 80074f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	e00f      	b.n	8007522 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	440a      	add	r2, r1
 8007518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007520:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	68d9      	ldr	r1, [r3, #12]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	781a      	ldrb	r2, [r3, #0]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	b298      	uxth	r0, r3
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	4603      	mov	r3, r0
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fa2b 	bl	8007992 <USB_WritePacket>
 800753c:	e0ce      	b.n	80076dc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	69fa      	ldr	r2, [r7, #28]
 8007552:	440a      	add	r2, r1
 8007554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007558:	0cdb      	lsrs	r3, r3, #19
 800755a:	04db      	lsls	r3, r3, #19
 800755c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	440a      	add	r2, r1
 8007574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007578:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800757c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007580:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d126      	bne.n	80075d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007596:	691a      	ldr	r2, [r3, #16]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075a0:	69b9      	ldr	r1, [r7, #24]
 80075a2:	0148      	lsls	r0, r1, #5
 80075a4:	69f9      	ldr	r1, [r7, #28]
 80075a6:	4401      	add	r1, r0
 80075a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075ac:	4313      	orrs	r3, r2
 80075ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	0151      	lsls	r1, r2, #5
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	440a      	add	r2, r1
 80075c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075ce:	6113      	str	r3, [r2, #16]
 80075d0:	e036      	b.n	8007640 <USB_EPStartXfer+0x3dc>
 80075d2:	bf00      	nop
 80075d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	695a      	ldr	r2, [r3, #20]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	4413      	add	r3, r2
 80075e2:	1e5a      	subs	r2, r3, #1
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fa:	691a      	ldr	r2, [r3, #16]
 80075fc:	8afb      	ldrh	r3, [r7, #22]
 80075fe:	04d9      	lsls	r1, r3, #19
 8007600:	4b39      	ldr	r3, [pc, #228]	; (80076e8 <USB_EPStartXfer+0x484>)
 8007602:	400b      	ands	r3, r1
 8007604:	69b9      	ldr	r1, [r7, #24]
 8007606:	0148      	lsls	r0, r1, #5
 8007608:	69f9      	ldr	r1, [r7, #28]
 800760a:	4401      	add	r1, r0
 800760c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007610:	4313      	orrs	r3, r2
 8007612:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	8af9      	ldrh	r1, [r7, #22]
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007630:	69b9      	ldr	r1, [r7, #24]
 8007632:	0148      	lsls	r0, r1, #5
 8007634:	69f9      	ldr	r1, [r7, #28]
 8007636:	4401      	add	r1, r0
 8007638:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800763c:	4313      	orrs	r3, r2
 800763e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d10d      	bne.n	8007662 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	68d9      	ldr	r1, [r3, #12]
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765e:	460a      	mov	r2, r1
 8007660:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	78db      	ldrb	r3, [r3, #3]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d128      	bne.n	80076bc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d110      	bne.n	800769c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	e00f      	b.n	80076bc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	0151      	lsls	r1, r2, #5
 80076ae:	69fa      	ldr	r2, [r7, #28]
 80076b0:	440a      	add	r2, r1
 80076b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	1ff80000 	.word	0x1ff80000

080076ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	2b01      	cmp	r3, #1
 800770a:	f040 80cd 	bne.w	80078a8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d132      	bne.n	800777c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	0151      	lsls	r1, r2, #5
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	440a      	add	r2, r1
 800772c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007730:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007734:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007738:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	0151      	lsls	r1, r2, #5
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	440a      	add	r2, r1
 8007770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007774:	0cdb      	lsrs	r3, r3, #19
 8007776:	04db      	lsls	r3, r3, #19
 8007778:	6113      	str	r3, [r2, #16]
 800777a:	e04e      	b.n	800781a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007796:	0cdb      	lsrs	r3, r3, #19
 8007798:	04db      	lsls	r3, r3, #19
 800779a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	695a      	ldr	r2, [r3, #20]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d903      	bls.n	80077d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	0151      	lsls	r1, r2, #5
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	440a      	add	r2, r1
 80077ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007800:	691a      	ldr	r2, [r3, #16]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800780a:	6939      	ldr	r1, [r7, #16]
 800780c:	0148      	lsls	r0, r1, #5
 800780e:	6979      	ldr	r1, [r7, #20]
 8007810:	4401      	add	r1, r0
 8007812:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007816:	4313      	orrs	r3, r2
 8007818:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800781a:	79fb      	ldrb	r3, [r7, #7]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d11e      	bne.n	800785e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d009      	beq.n	800783c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007834:	461a      	mov	r2, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	0151      	lsls	r1, r2, #5
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	440a      	add	r2, r1
 8007852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007856:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	e092      	b.n	8007984 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	0151      	lsls	r1, r2, #5
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	440a      	add	r2, r1
 8007874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007878:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800787c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d07e      	beq.n	8007984 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	2101      	movs	r1, #1
 8007898:	fa01 f303 	lsl.w	r3, r1, r3
 800789c:	6979      	ldr	r1, [r7, #20]
 800789e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078a2:	4313      	orrs	r3, r2
 80078a4:	634b      	str	r3, [r1, #52]	; 0x34
 80078a6:	e06d      	b.n	8007984 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	0151      	lsls	r1, r2, #5
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	440a      	add	r2, r1
 80078be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c2:	0cdb      	lsrs	r3, r3, #19
 80078c4:	04db      	lsls	r3, r3, #19
 80078c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078ea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	0151      	lsls	r1, r2, #5
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	440a      	add	r2, r1
 8007912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800791a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007932:	6939      	ldr	r1, [r7, #16]
 8007934:	0148      	lsls	r0, r1, #5
 8007936:	6979      	ldr	r1, [r7, #20]
 8007938:	4401      	add	r1, r0
 800793a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800793e:	4313      	orrs	r3, r2
 8007940:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d10d      	bne.n	8007964 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d009      	beq.n	8007964 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	68d9      	ldr	r1, [r3, #12]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007960:	460a      	mov	r2, r1
 8007962:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	0151      	lsls	r1, r2, #5
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	440a      	add	r2, r1
 800797a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007982:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007992:	b480      	push	{r7}
 8007994:	b089      	sub	sp, #36	; 0x24
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	4611      	mov	r1, r2
 800799e:	461a      	mov	r2, r3
 80079a0:	460b      	mov	r3, r1
 80079a2:	71fb      	strb	r3, [r7, #7]
 80079a4:	4613      	mov	r3, r2
 80079a6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80079b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d123      	bne.n	8007a00 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079b8:	88bb      	ldrh	r3, [r7, #4]
 80079ba:	3303      	adds	r3, #3
 80079bc:	089b      	lsrs	r3, r3, #2
 80079be:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079c0:	2300      	movs	r3, #0
 80079c2:	61bb      	str	r3, [r7, #24]
 80079c4:	e018      	b.n	80079f8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	031a      	lsls	r2, r3, #12
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d2:	461a      	mov	r2, r3
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	3301      	adds	r3, #1
 80079de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3301      	adds	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	3301      	adds	r3, #1
 80079ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	3301      	adds	r3, #1
 80079f0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	3301      	adds	r3, #1
 80079f6:	61bb      	str	r3, [r7, #24]
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d3e2      	bcc.n	80079c6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3724      	adds	r7, #36	; 0x24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b08b      	sub	sp, #44	; 0x2c
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a24:	88fb      	ldrh	r3, [r7, #6]
 8007a26:	089b      	lsrs	r3, r3, #2
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a2c:	88fb      	ldrh	r3, [r7, #6]
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a34:	2300      	movs	r3, #0
 8007a36:	623b      	str	r3, [r7, #32]
 8007a38:	e014      	b.n	8007a64 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	3301      	adds	r3, #1
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	3301      	adds	r3, #1
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	3301      	adds	r3, #1
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	3301      	adds	r3, #1
 8007a62:	623b      	str	r3, [r7, #32]
 8007a64:	6a3a      	ldr	r2, [r7, #32]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d3e6      	bcc.n	8007a3a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a6c:	8bfb      	ldrh	r3, [r7, #30]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01e      	beq.n	8007ab0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f107 0310 	add.w	r3, r7, #16
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	701a      	strb	r2, [r3, #0]
      i++;
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007aa4:	8bfb      	ldrh	r3, [r7, #30]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007aaa:	8bfb      	ldrh	r3, [r7, #30]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1ea      	bne.n	8007a86 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	372c      	adds	r7, #44	; 0x2c
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d12c      	bne.n	8007b34 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	db12      	blt.n	8007b12 <USB_EPSetStall+0x54>
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00f      	beq.n	8007b12 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	0151      	lsls	r1, r2, #5
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	440a      	add	r2, r1
 8007b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b10:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	0151      	lsls	r1, r2, #5
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	440a      	add	r2, r1
 8007b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	e02b      	b.n	8007b8c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	db12      	blt.n	8007b6c <USB_EPSetStall+0xae>
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00f      	beq.n	8007b6c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	0151      	lsls	r1, r2, #5
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	440a      	add	r2, r1
 8007b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b6a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	0151      	lsls	r1, r2, #5
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	440a      	add	r2, r1
 8007b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	785b      	ldrb	r3, [r3, #1]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d128      	bne.n	8007c08 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	0151      	lsls	r1, r2, #5
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	440a      	add	r2, r1
 8007bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	78db      	ldrb	r3, [r3, #3]
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d003      	beq.n	8007be6 <USB_EPClearStall+0x4c>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	78db      	ldrb	r3, [r3, #3]
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d138      	bne.n	8007c58 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	0151      	lsls	r1, r2, #5
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	440a      	add	r2, r1
 8007bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	e027      	b.n	8007c58 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	78db      	ldrb	r3, [r3, #3]
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d003      	beq.n	8007c38 <USB_EPClearStall+0x9e>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d10f      	bne.n	8007c58 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c56:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c88:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c9a:	68f9      	ldr	r1, [r7, #12]
 8007c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ccc:	f023 0303 	bic.w	r3, r3, #3
 8007cd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ce0:	f023 0302 	bic.w	r3, r3, #2
 8007ce4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d0e:	f023 0303 	bic.w	r3, r3, #3
 8007d12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d22:	f043 0302 	orr.w	r3, r3, #2
 8007d26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	0c1b      	lsrs	r3, r3, #16
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	4013      	ands	r3, r2
 8007db2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	b29b      	uxth	r3, r3
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	4013      	ands	r3, r2
 8007df0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007df2:	68bb      	ldr	r3, [r7, #8]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e22:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	f003 030f 	and.w	r3, r3, #15
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e30:	01db      	lsls	r3, r3, #7
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	371c      	adds	r7, #28
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	f003 0301 	and.w	r3, r3, #1
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e92:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e96:	f023 0307 	bic.w	r3, r3, #7
 8007e9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	333c      	adds	r3, #60	; 0x3c
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	4a26      	ldr	r2, [pc, #152]	; (8007f78 <USB_EP0_OutStart+0xb8>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d90a      	bls.n	8007efa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ef4:	d101      	bne.n	8007efa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	e037      	b.n	8007f6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f00:	461a      	mov	r2, r3
 8007f02:	2300      	movs	r3, #0
 8007f04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f28:	f043 0318 	orr.w	r3, r3, #24
 8007f2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f42:	7afb      	ldrb	r3, [r7, #11]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d10f      	bne.n	8007f68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4e:	461a      	mov	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f62:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	371c      	adds	r7, #28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	4f54300a 	.word	0x4f54300a

08007f7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	4a13      	ldr	r2, [pc, #76]	; (8007fdc <USB_CoreReset+0x60>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d901      	bls.n	8007f98 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e01a      	b.n	8007fce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	daf3      	bge.n	8007f88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f043 0201 	orr.w	r2, r3, #1
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	60fb      	str	r3, [r7, #12]
 8007fb6:	4a09      	ldr	r2, [pc, #36]	; (8007fdc <USB_CoreReset+0x60>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d901      	bls.n	8007fc0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e006      	b.n	8007fce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d0f1      	beq.n	8007fb0 <USB_CoreReset+0x34>

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	00030d40 	.word	0x00030d40

08007fe0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ff0:	f002 f91c 	bl	800a22c <USBD_static_malloc>
 8007ff4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d105      	bne.n	8008008 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008004:	2302      	movs	r3, #2
 8008006:	e066      	b.n	80080d6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	7c1b      	ldrb	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d119      	bne.n	800804c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800801c:	2202      	movs	r2, #2
 800801e:	2181      	movs	r1, #129	; 0x81
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 ffe0 	bl	8009fe6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800802c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008030:	2202      	movs	r2, #2
 8008032:	2101      	movs	r1, #1
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 ffd6 	bl	8009fe6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2210      	movs	r2, #16
 8008046:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800804a:	e016      	b.n	800807a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800804c:	2340      	movs	r3, #64	; 0x40
 800804e:	2202      	movs	r2, #2
 8008050:	2181      	movs	r1, #129	; 0x81
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 ffc7 	bl	8009fe6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800805e:	2340      	movs	r3, #64	; 0x40
 8008060:	2202      	movs	r2, #2
 8008062:	2101      	movs	r1, #1
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 ffbe 	bl	8009fe6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2210      	movs	r2, #16
 8008076:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800807a:	2308      	movs	r3, #8
 800807c:	2203      	movs	r2, #3
 800807e:	2182      	movs	r1, #130	; 0x82
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 ffb0 	bl	8009fe6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	7c1b      	ldrb	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ba:	2101      	movs	r1, #1
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f002 f881 	bl	800a1c4 <USBD_LL_PrepareReceive>
 80080c2:	e007      	b.n	80080d4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080ca:	2340      	movs	r3, #64	; 0x40
 80080cc:	2101      	movs	r1, #1
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f002 f878 	bl	800a1c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	460b      	mov	r3, r1
 80080e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80080ea:	2181      	movs	r1, #129	; 0x81
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 ffa0 	bl	800a032 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80080f8:	2101      	movs	r1, #1
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 ff99 	bl	800a032 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008108:	2182      	movs	r1, #130	; 0x82
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 ff91 	bl	800a032 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00e      	beq.n	8008148 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800813a:	4618      	mov	r0, r3
 800813c:	f002 f884 	bl	800a248 <USBD_static_free>
    pdev->pClassData = NULL;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008164:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	e0af      	b.n	80082dc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008184:	2b00      	cmp	r3, #0
 8008186:	d03f      	beq.n	8008208 <USBD_CDC_Setup+0xb4>
 8008188:	2b20      	cmp	r3, #32
 800818a:	f040 809f 	bne.w	80082cc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	88db      	ldrh	r3, [r3, #6]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d02e      	beq.n	80081f4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	b25b      	sxtb	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	da16      	bge.n	80081ce <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80081ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	88d2      	ldrh	r2, [r2, #6]
 80081b2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	88db      	ldrh	r3, [r3, #6]
 80081b8:	2b07      	cmp	r3, #7
 80081ba:	bf28      	it	cs
 80081bc:	2307      	movcs	r3, #7
 80081be:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	89fa      	ldrh	r2, [r7, #14]
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 fae9 	bl	800979e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80081cc:	e085      	b.n	80082da <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	785a      	ldrb	r2, [r3, #1]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	88db      	ldrh	r3, [r3, #6]
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80081e4:	6939      	ldr	r1, [r7, #16]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	88db      	ldrh	r3, [r3, #6]
 80081ea:	461a      	mov	r2, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 fb02 	bl	80097f6 <USBD_CtlPrepareRx>
      break;
 80081f2:	e072      	b.n	80082da <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	7850      	ldrb	r0, [r2, #1]
 8008200:	2200      	movs	r2, #0
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	4798      	blx	r3
      break;
 8008206:	e068      	b.n	80082da <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	2b0b      	cmp	r3, #11
 800820e:	d852      	bhi.n	80082b6 <USBD_CDC_Setup+0x162>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <USBD_CDC_Setup+0xc4>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	08008249 	.word	0x08008249
 800821c:	080082c5 	.word	0x080082c5
 8008220:	080082b7 	.word	0x080082b7
 8008224:	080082b7 	.word	0x080082b7
 8008228:	080082b7 	.word	0x080082b7
 800822c:	080082b7 	.word	0x080082b7
 8008230:	080082b7 	.word	0x080082b7
 8008234:	080082b7 	.word	0x080082b7
 8008238:	080082b7 	.word	0x080082b7
 800823c:	080082b7 	.word	0x080082b7
 8008240:	08008273 	.word	0x08008273
 8008244:	0800829d 	.word	0x0800829d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b03      	cmp	r3, #3
 8008252:	d107      	bne.n	8008264 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008254:	f107 030a 	add.w	r3, r7, #10
 8008258:	2202      	movs	r2, #2
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 fa9e 	bl	800979e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008262:	e032      	b.n	80082ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 fa28 	bl	80096bc <USBD_CtlError>
            ret = USBD_FAIL;
 800826c:	2303      	movs	r3, #3
 800826e:	75fb      	strb	r3, [r7, #23]
          break;
 8008270:	e02b      	b.n	80082ca <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b03      	cmp	r3, #3
 800827c:	d107      	bne.n	800828e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800827e:	f107 030d 	add.w	r3, r7, #13
 8008282:	2201      	movs	r2, #1
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fa89 	bl	800979e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800828c:	e01d      	b.n	80082ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 fa13 	bl	80096bc <USBD_CtlError>
            ret = USBD_FAIL;
 8008296:	2303      	movs	r3, #3
 8008298:	75fb      	strb	r3, [r7, #23]
          break;
 800829a:	e016      	b.n	80082ca <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d00f      	beq.n	80082c8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 fa06 	bl	80096bc <USBD_CtlError>
            ret = USBD_FAIL;
 80082b0:	2303      	movs	r3, #3
 80082b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082b4:	e008      	b.n	80082c8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 f9ff 	bl	80096bc <USBD_CtlError>
          ret = USBD_FAIL;
 80082be:	2303      	movs	r3, #3
 80082c0:	75fb      	strb	r3, [r7, #23]
          break;
 80082c2:	e002      	b.n	80082ca <USBD_CDC_Setup+0x176>
          break;
 80082c4:	bf00      	nop
 80082c6:	e008      	b.n	80082da <USBD_CDC_Setup+0x186>
          break;
 80082c8:	bf00      	nop
      }
      break;
 80082ca:	e006      	b.n	80082da <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 f9f4 	bl	80096bc <USBD_CtlError>
      ret = USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	75fb      	strb	r3, [r7, #23]
      break;
 80082d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008302:	2303      	movs	r3, #3
 8008304:	e04f      	b.n	80083a6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800830c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800830e:	78fa      	ldrb	r2, [r7, #3]
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	440b      	add	r3, r1
 800831c:	3318      	adds	r3, #24
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d029      	beq.n	8008378 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4613      	mov	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	440b      	add	r3, r1
 8008332:	3318      	adds	r3, #24
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	78f9      	ldrb	r1, [r7, #3]
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	460b      	mov	r3, r1
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	1a5b      	subs	r3, r3, r1
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4403      	add	r3, r0
 8008344:	3344      	adds	r3, #68	; 0x44
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	fbb2 f1f3 	udiv	r1, r2, r3
 800834c:	fb03 f301 	mul.w	r3, r3, r1
 8008350:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008352:	2b00      	cmp	r3, #0
 8008354:	d110      	bne.n	8008378 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	4613      	mov	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	3318      	adds	r3, #24
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800836a:	78f9      	ldrb	r1, [r7, #3]
 800836c:	2300      	movs	r3, #0
 800836e:	2200      	movs	r2, #0
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 ff06 	bl	800a182 <USBD_LL_Transmit>
 8008376:	e015      	b.n	80083a4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2200      	movs	r2, #0
 800837c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00b      	beq.n	80083a4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80083a0:	78fa      	ldrb	r2, [r7, #3]
 80083a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	460b      	mov	r3, r1
 80083b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e015      	b.n	80083fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 ff16 	bl	800a206 <USBD_LL_GetRxDataSize>
 80083da:	4602      	mov	r2, r0
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80083f6:	4611      	mov	r1, r2
 80083f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008412:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800841a:	2303      	movs	r3, #3
 800841c:	e01b      	b.n	8008456 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d015      	beq.n	8008454 <USBD_CDC_EP0_RxReady+0x50>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800842e:	2bff      	cmp	r3, #255	; 0xff
 8008430:	d010      	beq.n	8008454 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008440:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008448:	b292      	uxth	r2, r2
 800844a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	22ff      	movs	r2, #255	; 0xff
 8008450:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2243      	movs	r2, #67	; 0x43
 800846c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800846e:	4b03      	ldr	r3, [pc, #12]	; (800847c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	200000c8 	.word	0x200000c8

08008480 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2243      	movs	r2, #67	; 0x43
 800848c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800848e:	4b03      	ldr	r3, [pc, #12]	; (800849c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008490:	4618      	mov	r0, r3
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	20000084 	.word	0x20000084

080084a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2243      	movs	r2, #67	; 0x43
 80084ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80084ae:	4b03      	ldr	r3, [pc, #12]	; (80084bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	2000010c 	.word	0x2000010c

080084c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	220a      	movs	r2, #10
 80084cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80084ce:	4b03      	ldr	r3, [pc, #12]	; (80084dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	20000040 	.word	0x20000040

080084e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e004      	b.n	80084fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800850a:	b480      	push	{r7}
 800850c:	b087      	sub	sp, #28
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800851c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008524:	2303      	movs	r3, #3
 8008526:	e008      	b.n	800853a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008556:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800855e:	2303      	movs	r3, #3
 8008560:	e004      	b.n	800856c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008586:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008592:	2303      	movs	r3, #3
 8008594:	e016      	b.n	80085c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	7c1b      	ldrb	r3, [r3, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d109      	bne.n	80085b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085a8:	2101      	movs	r1, #1
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f001 fe0a 	bl	800a1c4 <USBD_LL_PrepareReceive>
 80085b0:	e007      	b.n	80085c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085b8:	2340      	movs	r3, #64	; 0x40
 80085ba:	2101      	movs	r1, #1
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 fe01 	bl	800a1c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e01f      	b.n	8008624 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	79fa      	ldrb	r2, [r7, #7]
 8008616:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f001 fc7d 	bl	8009f18 <USBD_LL_Init>
 800861e:	4603      	mov	r3, r0
 8008620:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008640:	2303      	movs	r3, #3
 8008642:	e016      	b.n	8008672 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00b      	beq.n	8008670 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	f107 020e 	add.w	r2, r7, #14
 8008664:	4610      	mov	r0, r2
 8008666:	4798      	blx	r3
 8008668:	4602      	mov	r2, r0
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 fc94 	bl	8009fb0 <USBD_LL_Start>
 8008688:	4603      	mov	r3, r0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80086b4:	2303      	movs	r3, #3
 80086b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d009      	beq.n	80086d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	78fa      	ldrb	r2, [r7, #3]
 80086cc:	4611      	mov	r1, r2
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
 80086d2:	4603      	mov	r3, r0
 80086d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	78fa      	ldrb	r2, [r7, #3]
 8008700:	4611      	mov	r1, r2
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
  }

  return USBD_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	4618      	mov	r0, r3
 8008724:	f000 ff90 	bl	8009648 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008736:	461a      	mov	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008744:	f003 031f 	and.w	r3, r3, #31
 8008748:	2b02      	cmp	r3, #2
 800874a:	d01a      	beq.n	8008782 <USBD_LL_SetupStage+0x72>
 800874c:	2b02      	cmp	r3, #2
 800874e:	d822      	bhi.n	8008796 <USBD_LL_SetupStage+0x86>
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <USBD_LL_SetupStage+0x4a>
 8008754:	2b01      	cmp	r3, #1
 8008756:	d00a      	beq.n	800876e <USBD_LL_SetupStage+0x5e>
 8008758:	e01d      	b.n	8008796 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa62 	bl	8008c2c <USBD_StdDevReq>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
      break;
 800876c:	e020      	b.n	80087b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fac6 	bl	8008d08 <USBD_StdItfReq>
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]
      break;
 8008780:	e016      	b.n	80087b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fb05 	bl	8008d9a <USBD_StdEPReq>
 8008790:	4603      	mov	r3, r0
 8008792:	73fb      	strb	r3, [r7, #15]
      break;
 8008794:	e00c      	b.n	80087b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800879c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 fc63 	bl	800a070 <USBD_LL_StallEP>
 80087aa:	4603      	mov	r3, r0
 80087ac:	73fb      	strb	r3, [r7, #15]
      break;
 80087ae:	bf00      	nop
  }

  return ret;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b086      	sub	sp, #24
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	460b      	mov	r3, r1
 80087c4:	607a      	str	r2, [r7, #4]
 80087c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80087c8:	7afb      	ldrb	r3, [r7, #11]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d138      	bne.n	8008840 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80087d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d14a      	bne.n	8008876 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	689a      	ldr	r2, [r3, #8]
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d913      	bls.n	8008814 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	1ad2      	subs	r2, r2, r3
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	4293      	cmp	r3, r2
 8008804:	bf28      	it	cs
 8008806:	4613      	movcs	r3, r2
 8008808:	461a      	mov	r2, r3
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f001 f80f 	bl	8009830 <USBD_CtlContinueRx>
 8008812:	e030      	b.n	8008876 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b03      	cmp	r3, #3
 800881e:	d10b      	bne.n	8008838 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d005      	beq.n	8008838 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f001 f80a 	bl	8009852 <USBD_CtlSendStatus>
 800883e:	e01a      	b.n	8008876 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b03      	cmp	r3, #3
 800884a:	d114      	bne.n	8008876 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00e      	beq.n	8008876 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	7afa      	ldrb	r2, [r7, #11]
 8008862:	4611      	mov	r1, r2
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	4798      	blx	r3
 8008868:	4603      	mov	r3, r0
 800886a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800886c:	7dfb      	ldrb	r3, [r7, #23]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008872:	7dfb      	ldrb	r3, [r7, #23]
 8008874:	e000      	b.n	8008878 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	460b      	mov	r3, r1
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d16b      	bne.n	800896c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3314      	adds	r3, #20
 8008898:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d156      	bne.n	8008952 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	689a      	ldr	r2, [r3, #8]
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d914      	bls.n	80088da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	1ad2      	subs	r2, r2, r3
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 ff84 	bl	80097d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088cc:	2300      	movs	r3, #0
 80088ce:	2200      	movs	r2, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f001 fc76 	bl	800a1c4 <USBD_LL_PrepareReceive>
 80088d8:	e03b      	b.n	8008952 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d11c      	bne.n	8008920 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d316      	bcc.n	8008920 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d20f      	bcs.n	8008920 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008900:	2200      	movs	r2, #0
 8008902:	2100      	movs	r1, #0
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 ff65 	bl	80097d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008912:	2300      	movs	r3, #0
 8008914:	2200      	movs	r2, #0
 8008916:	2100      	movs	r1, #0
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f001 fc53 	bl	800a1c4 <USBD_LL_PrepareReceive>
 800891e:	e018      	b.n	8008952 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b03      	cmp	r3, #3
 800892a:	d10b      	bne.n	8008944 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008944:	2180      	movs	r1, #128	; 0x80
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f001 fb92 	bl	800a070 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 ff93 	bl	8009878 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008958:	2b01      	cmp	r3, #1
 800895a:	d122      	bne.n	80089a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f7ff fe98 	bl	8008692 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800896a:	e01a      	b.n	80089a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b03      	cmp	r3, #3
 8008976:	d114      	bne.n	80089a2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00e      	beq.n	80089a2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	7afa      	ldrb	r2, [r7, #11]
 800898e:	4611      	mov	r1, r2
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	4798      	blx	r3
 8008994:	4603      	mov	r3, r0
 8008996:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	e000      	b.n	80089a4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80089dc:	2303      	movs	r3, #3
 80089de:	e02f      	b.n	8008a40 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00f      	beq.n	8008a0a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d009      	beq.n	8008a0a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	6852      	ldr	r2, [r2, #4]
 8008a02:	b2d2      	uxtb	r2, r2
 8008a04:	4611      	mov	r1, r2
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a0a:	2340      	movs	r3, #64	; 0x40
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2100      	movs	r1, #0
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 fae8 	bl	8009fe6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2240      	movs	r2, #64	; 0x40
 8008a22:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a26:	2340      	movs	r3, #64	; 0x40
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2180      	movs	r1, #128	; 0x80
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 fada 	bl	8009fe6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2240      	movs	r2, #64	; 0x40
 8008a3c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2204      	movs	r2, #4
 8008a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d106      	bne.n	8008ab6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e012      	b.n	8008b00 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d10b      	bne.n	8008afe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e014      	b.n	8008b4c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d10d      	bne.n	8008b4a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d007      	beq.n	8008b4a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	4611      	mov	r1, r2
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e014      	b.n	8008b98 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d10d      	bne.n	8008b96 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	78fa      	ldrb	r2, [r7, #3]
 8008b90:	4611      	mov	r1, r2
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d009      	beq.n	8008be4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	6852      	ldr	r2, [r2, #4]
 8008bdc:	b2d2      	uxtb	r2, r2
 8008bde:	4611      	mov	r1, r2
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	4798      	blx	r3
  }

  return USBD_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b087      	sub	sp, #28
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	3301      	adds	r3, #1
 8008c04:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c0c:	8a3b      	ldrh	r3, [r7, #16]
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	b21a      	sxth	r2, r3
 8008c12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	b21b      	sxth	r3, r3
 8008c1a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c1c:	89fb      	ldrh	r3, [r7, #14]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	371c      	adds	r7, #28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
	...

08008c2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c42:	2b40      	cmp	r3, #64	; 0x40
 8008c44:	d005      	beq.n	8008c52 <USBD_StdDevReq+0x26>
 8008c46:	2b40      	cmp	r3, #64	; 0x40
 8008c48:	d853      	bhi.n	8008cf2 <USBD_StdDevReq+0xc6>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00b      	beq.n	8008c66 <USBD_StdDevReq+0x3a>
 8008c4e:	2b20      	cmp	r3, #32
 8008c50:	d14f      	bne.n	8008cf2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	4798      	blx	r3
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]
      break;
 8008c64:	e04a      	b.n	8008cfc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	785b      	ldrb	r3, [r3, #1]
 8008c6a:	2b09      	cmp	r3, #9
 8008c6c:	d83b      	bhi.n	8008ce6 <USBD_StdDevReq+0xba>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <USBD_StdDevReq+0x48>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008cc9 	.word	0x08008cc9
 8008c78:	08008cdd 	.word	0x08008cdd
 8008c7c:	08008ce7 	.word	0x08008ce7
 8008c80:	08008cd3 	.word	0x08008cd3
 8008c84:	08008ce7 	.word	0x08008ce7
 8008c88:	08008ca7 	.word	0x08008ca7
 8008c8c:	08008c9d 	.word	0x08008c9d
 8008c90:	08008ce7 	.word	0x08008ce7
 8008c94:	08008cbf 	.word	0x08008cbf
 8008c98:	08008cb1 	.word	0x08008cb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f9de 	bl	8009060 <USBD_GetDescriptor>
          break;
 8008ca4:	e024      	b.n	8008cf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fb43 	bl	8009334 <USBD_SetAddress>
          break;
 8008cae:	e01f      	b.n	8008cf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fb82 	bl	80093bc <USBD_SetConfig>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]
          break;
 8008cbc:	e018      	b.n	8008cf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fc21 	bl	8009508 <USBD_GetConfig>
          break;
 8008cc6:	e013      	b.n	8008cf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fc52 	bl	8009574 <USBD_GetStatus>
          break;
 8008cd0:	e00e      	b.n	8008cf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fc81 	bl	80095dc <USBD_SetFeature>
          break;
 8008cda:	e009      	b.n	8008cf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fc90 	bl	8009604 <USBD_ClrFeature>
          break;
 8008ce4:	e004      	b.n	8008cf0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fce7 	bl	80096bc <USBD_CtlError>
          break;
 8008cee:	bf00      	nop
      }
      break;
 8008cf0:	e004      	b.n	8008cfc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fce1 	bl	80096bc <USBD_CtlError>
      break;
 8008cfa:	bf00      	nop
  }

  return ret;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop

08008d08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d1e:	2b40      	cmp	r3, #64	; 0x40
 8008d20:	d005      	beq.n	8008d2e <USBD_StdItfReq+0x26>
 8008d22:	2b40      	cmp	r3, #64	; 0x40
 8008d24:	d82f      	bhi.n	8008d86 <USBD_StdItfReq+0x7e>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <USBD_StdItfReq+0x26>
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	d12b      	bne.n	8008d86 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	3b01      	subs	r3, #1
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d81d      	bhi.n	8008d78 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	889b      	ldrh	r3, [r3, #4]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d813      	bhi.n	8008d6e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	88db      	ldrh	r3, [r3, #6]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d110      	bne.n	8008d82 <USBD_StdItfReq+0x7a>
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10d      	bne.n	8008d82 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fd73 	bl	8009852 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d6c:	e009      	b.n	8008d82 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fca3 	bl	80096bc <USBD_CtlError>
          break;
 8008d76:	e004      	b.n	8008d82 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fc9e 	bl	80096bc <USBD_CtlError>
          break;
 8008d80:	e000      	b.n	8008d84 <USBD_StdItfReq+0x7c>
          break;
 8008d82:	bf00      	nop
      }
      break;
 8008d84:	e004      	b.n	8008d90 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fc97 	bl	80096bc <USBD_CtlError>
      break;
 8008d8e:	bf00      	nop
  }

  return ret;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	889b      	ldrh	r3, [r3, #4]
 8008dac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008db6:	2b40      	cmp	r3, #64	; 0x40
 8008db8:	d007      	beq.n	8008dca <USBD_StdEPReq+0x30>
 8008dba:	2b40      	cmp	r3, #64	; 0x40
 8008dbc:	f200 8145 	bhi.w	800904a <USBD_StdEPReq+0x2b0>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00c      	beq.n	8008dde <USBD_StdEPReq+0x44>
 8008dc4:	2b20      	cmp	r3, #32
 8008dc6:	f040 8140 	bne.w	800904a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	4798      	blx	r3
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
      break;
 8008ddc:	e13a      	b.n	8009054 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	785b      	ldrb	r3, [r3, #1]
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d007      	beq.n	8008df6 <USBD_StdEPReq+0x5c>
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	f300 8129 	bgt.w	800903e <USBD_StdEPReq+0x2a4>
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d07f      	beq.n	8008ef0 <USBD_StdEPReq+0x156>
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d03c      	beq.n	8008e6e <USBD_StdEPReq+0xd4>
 8008df4:	e123      	b.n	800903e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d002      	beq.n	8008e08 <USBD_StdEPReq+0x6e>
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d016      	beq.n	8008e34 <USBD_StdEPReq+0x9a>
 8008e06:	e02c      	b.n	8008e62 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e08:	7bbb      	ldrb	r3, [r7, #14]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00d      	beq.n	8008e2a <USBD_StdEPReq+0x90>
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b80      	cmp	r3, #128	; 0x80
 8008e12:	d00a      	beq.n	8008e2a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 f929 	bl	800a070 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e1e:	2180      	movs	r1, #128	; 0x80
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 f925 	bl	800a070 <USBD_LL_StallEP>
 8008e26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e28:	e020      	b.n	8008e6c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fc45 	bl	80096bc <USBD_CtlError>
              break;
 8008e32:	e01b      	b.n	8008e6c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	885b      	ldrh	r3, [r3, #2]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10e      	bne.n	8008e5a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <USBD_StdEPReq+0xc0>
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	2b80      	cmp	r3, #128	; 0x80
 8008e46:	d008      	beq.n	8008e5a <USBD_StdEPReq+0xc0>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	88db      	ldrh	r3, [r3, #6]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d104      	bne.n	8008e5a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 f90b 	bl	800a070 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fcf9 	bl	8009852 <USBD_CtlSendStatus>

              break;
 8008e60:	e004      	b.n	8008e6c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fc29 	bl	80096bc <USBD_CtlError>
              break;
 8008e6a:	bf00      	nop
          }
          break;
 8008e6c:	e0ec      	b.n	8009048 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d002      	beq.n	8008e80 <USBD_StdEPReq+0xe6>
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d016      	beq.n	8008eac <USBD_StdEPReq+0x112>
 8008e7e:	e030      	b.n	8008ee2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00d      	beq.n	8008ea2 <USBD_StdEPReq+0x108>
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	2b80      	cmp	r3, #128	; 0x80
 8008e8a:	d00a      	beq.n	8008ea2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f001 f8ed 	bl	800a070 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e96:	2180      	movs	r1, #128	; 0x80
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 f8e9 	bl	800a070 <USBD_LL_StallEP>
 8008e9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ea0:	e025      	b.n	8008eee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fc09 	bl	80096bc <USBD_CtlError>
              break;
 8008eaa:	e020      	b.n	8008eee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	885b      	ldrh	r3, [r3, #2]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d11b      	bne.n	8008eec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f001 f8f3 	bl	800a0ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fcc2 	bl	8009852 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	4798      	blx	r3
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008ee0:	e004      	b.n	8008eec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fbe9 	bl	80096bc <USBD_CtlError>
              break;
 8008eea:	e000      	b.n	8008eee <USBD_StdEPReq+0x154>
              break;
 8008eec:	bf00      	nop
          }
          break;
 8008eee:	e0ab      	b.n	8009048 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d002      	beq.n	8008f02 <USBD_StdEPReq+0x168>
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d032      	beq.n	8008f66 <USBD_StdEPReq+0x1cc>
 8008f00:	e097      	b.n	8009032 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d007      	beq.n	8008f18 <USBD_StdEPReq+0x17e>
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b80      	cmp	r3, #128	; 0x80
 8008f0c:	d004      	beq.n	8008f18 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fbd3 	bl	80096bc <USBD_CtlError>
                break;
 8008f16:	e091      	b.n	800903c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	da0b      	bge.n	8008f38 <USBD_StdEPReq+0x19e>
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
 8008f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	3310      	adds	r3, #16
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	4413      	add	r3, r2
 8008f34:	3304      	adds	r3, #4
 8008f36:	e00b      	b.n	8008f50 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f3e:	4613      	mov	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3304      	adds	r3, #4
 8008f50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fc1d 	bl	800979e <USBD_CtlSendData>
              break;
 8008f64:	e06a      	b.n	800903c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	da11      	bge.n	8008f92 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	f003 020f 	and.w	r2, r3, #15
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4613      	mov	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	440b      	add	r3, r1
 8008f80:	3324      	adds	r3, #36	; 0x24
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d117      	bne.n	8008fb8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fb96 	bl	80096bc <USBD_CtlError>
                  break;
 8008f90:	e054      	b.n	800903c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
 8008f94:	f003 020f 	and.w	r2, r3, #15
 8008f98:	6879      	ldr	r1, [r7, #4]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	440b      	add	r3, r1
 8008fa4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d104      	bne.n	8008fb8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fb83 	bl	80096bc <USBD_CtlError>
                  break;
 8008fb6:	e041      	b.n	800903c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	da0b      	bge.n	8008fd8 <USBD_StdEPReq+0x23e>
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	3310      	adds	r3, #16
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	e00b      	b.n	8008ff0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fde:	4613      	mov	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	4413      	add	r3, r2
 8008fee:	3304      	adds	r3, #4
 8008ff0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <USBD_StdEPReq+0x264>
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	2b80      	cmp	r3, #128	; 0x80
 8008ffc:	d103      	bne.n	8009006 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	2200      	movs	r2, #0
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	e00e      	b.n	8009024 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009006:	7bbb      	ldrb	r3, [r7, #14]
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 f86e 	bl	800a0ec <USBD_LL_IsStallEP>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2201      	movs	r2, #1
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	e002      	b.n	8009024 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2202      	movs	r2, #2
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fbb7 	bl	800979e <USBD_CtlSendData>
              break;
 8009030:	e004      	b.n	800903c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fb41 	bl	80096bc <USBD_CtlError>
              break;
 800903a:	bf00      	nop
          }
          break;
 800903c:	e004      	b.n	8009048 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fb3b 	bl	80096bc <USBD_CtlError>
          break;
 8009046:	bf00      	nop
      }
      break;
 8009048:	e004      	b.n	8009054 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fb35 	bl	80096bc <USBD_CtlError>
      break;
 8009052:	bf00      	nop
  }

  return ret;
 8009054:	7bfb      	ldrb	r3, [r7, #15]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800906e:	2300      	movs	r3, #0
 8009070:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	885b      	ldrh	r3, [r3, #2]
 800907a:	0a1b      	lsrs	r3, r3, #8
 800907c:	b29b      	uxth	r3, r3
 800907e:	3b01      	subs	r3, #1
 8009080:	2b06      	cmp	r3, #6
 8009082:	f200 8128 	bhi.w	80092d6 <USBD_GetDescriptor+0x276>
 8009086:	a201      	add	r2, pc, #4	; (adr r2, 800908c <USBD_GetDescriptor+0x2c>)
 8009088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908c:	080090a9 	.word	0x080090a9
 8009090:	080090c1 	.word	0x080090c1
 8009094:	08009101 	.word	0x08009101
 8009098:	080092d7 	.word	0x080092d7
 800909c:	080092d7 	.word	0x080092d7
 80090a0:	08009277 	.word	0x08009277
 80090a4:	080092a3 	.word	0x080092a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	7c12      	ldrb	r2, [r2, #16]
 80090b4:	f107 0108 	add.w	r1, r7, #8
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	60f8      	str	r0, [r7, #12]
      break;
 80090be:	e112      	b.n	80092e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7c1b      	ldrb	r3, [r3, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10d      	bne.n	80090e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d0:	f107 0208 	add.w	r2, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3301      	adds	r3, #1
 80090de:	2202      	movs	r2, #2
 80090e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090e2:	e100      	b.n	80092e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	f107 0208 	add.w	r2, r7, #8
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
 80090f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3301      	adds	r3, #1
 80090fa:	2202      	movs	r2, #2
 80090fc:	701a      	strb	r2, [r3, #0]
      break;
 80090fe:	e0f2      	b.n	80092e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	885b      	ldrh	r3, [r3, #2]
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b05      	cmp	r3, #5
 8009108:	f200 80ac 	bhi.w	8009264 <USBD_GetDescriptor+0x204>
 800910c:	a201      	add	r2, pc, #4	; (adr r2, 8009114 <USBD_GetDescriptor+0xb4>)
 800910e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009112:	bf00      	nop
 8009114:	0800912d 	.word	0x0800912d
 8009118:	08009161 	.word	0x08009161
 800911c:	08009195 	.word	0x08009195
 8009120:	080091c9 	.word	0x080091c9
 8009124:	080091fd 	.word	0x080091fd
 8009128:	08009231 	.word	0x08009231
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	7c12      	ldrb	r2, [r2, #16]
 8009144:	f107 0108 	add.w	r1, r7, #8
 8009148:	4610      	mov	r0, r2
 800914a:	4798      	blx	r3
 800914c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800914e:	e091      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fab2 	bl	80096bc <USBD_CtlError>
            err++;
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	3301      	adds	r3, #1
 800915c:	72fb      	strb	r3, [r7, #11]
          break;
 800915e:	e089      	b.n	8009274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00b      	beq.n	8009184 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	7c12      	ldrb	r2, [r2, #16]
 8009178:	f107 0108 	add.w	r1, r7, #8
 800917c:	4610      	mov	r0, r2
 800917e:	4798      	blx	r3
 8009180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009182:	e077      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fa98 	bl	80096bc <USBD_CtlError>
            err++;
 800918c:	7afb      	ldrb	r3, [r7, #11]
 800918e:	3301      	adds	r3, #1
 8009190:	72fb      	strb	r3, [r7, #11]
          break;
 8009192:	e06f      	b.n	8009274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00b      	beq.n	80091b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	7c12      	ldrb	r2, [r2, #16]
 80091ac:	f107 0108 	add.w	r1, r7, #8
 80091b0:	4610      	mov	r0, r2
 80091b2:	4798      	blx	r3
 80091b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091b6:	e05d      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa7e 	bl	80096bc <USBD_CtlError>
            err++;
 80091c0:	7afb      	ldrb	r3, [r7, #11]
 80091c2:	3301      	adds	r3, #1
 80091c4:	72fb      	strb	r3, [r7, #11]
          break;
 80091c6:	e055      	b.n	8009274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	7c12      	ldrb	r2, [r2, #16]
 80091e0:	f107 0108 	add.w	r1, r7, #8
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
 80091e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ea:	e043      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fa64 	bl	80096bc <USBD_CtlError>
            err++;
 80091f4:	7afb      	ldrb	r3, [r7, #11]
 80091f6:	3301      	adds	r3, #1
 80091f8:	72fb      	strb	r3, [r7, #11]
          break;
 80091fa:	e03b      	b.n	8009274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00b      	beq.n	8009220 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7c12      	ldrb	r2, [r2, #16]
 8009214:	f107 0108 	add.w	r1, r7, #8
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
 800921c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800921e:	e029      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa4a 	bl	80096bc <USBD_CtlError>
            err++;
 8009228:	7afb      	ldrb	r3, [r7, #11]
 800922a:	3301      	adds	r3, #1
 800922c:	72fb      	strb	r3, [r7, #11]
          break;
 800922e:	e021      	b.n	8009274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	7c12      	ldrb	r2, [r2, #16]
 8009248:	f107 0108 	add.w	r1, r7, #8
 800924c:	4610      	mov	r0, r2
 800924e:	4798      	blx	r3
 8009250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009252:	e00f      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fa30 	bl	80096bc <USBD_CtlError>
            err++;
 800925c:	7afb      	ldrb	r3, [r7, #11]
 800925e:	3301      	adds	r3, #1
 8009260:	72fb      	strb	r3, [r7, #11]
          break;
 8009262:	e007      	b.n	8009274 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa28 	bl	80096bc <USBD_CtlError>
          err++;
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	3301      	adds	r3, #1
 8009270:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009272:	bf00      	nop
      }
      break;
 8009274:	e037      	b.n	80092e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	7c1b      	ldrb	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d109      	bne.n	8009292 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	f107 0208 	add.w	r2, r7, #8
 800928a:	4610      	mov	r0, r2
 800928c:	4798      	blx	r3
 800928e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009290:	e029      	b.n	80092e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fa11 	bl	80096bc <USBD_CtlError>
        err++;
 800929a:	7afb      	ldrb	r3, [r7, #11]
 800929c:	3301      	adds	r3, #1
 800929e:	72fb      	strb	r3, [r7, #11]
      break;
 80092a0:	e021      	b.n	80092e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	7c1b      	ldrb	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10d      	bne.n	80092c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b2:	f107 0208 	add.w	r2, r7, #8
 80092b6:	4610      	mov	r0, r2
 80092b8:	4798      	blx	r3
 80092ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	2207      	movs	r2, #7
 80092c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092c4:	e00f      	b.n	80092e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f9f7 	bl	80096bc <USBD_CtlError>
        err++;
 80092ce:	7afb      	ldrb	r3, [r7, #11]
 80092d0:	3301      	adds	r3, #1
 80092d2:	72fb      	strb	r3, [r7, #11]
      break;
 80092d4:	e007      	b.n	80092e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f9ef 	bl	80096bc <USBD_CtlError>
      err++;
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	3301      	adds	r3, #1
 80092e2:	72fb      	strb	r3, [r7, #11]
      break;
 80092e4:	bf00      	nop
  }

  if (err != 0U)
 80092e6:	7afb      	ldrb	r3, [r7, #11]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d11e      	bne.n	800932a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	88db      	ldrh	r3, [r3, #6]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d016      	beq.n	8009322 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80092f4:	893b      	ldrh	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00e      	beq.n	8009318 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	88da      	ldrh	r2, [r3, #6]
 80092fe:	893b      	ldrh	r3, [r7, #8]
 8009300:	4293      	cmp	r3, r2
 8009302:	bf28      	it	cs
 8009304:	4613      	movcs	r3, r2
 8009306:	b29b      	uxth	r3, r3
 8009308:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800930a:	893b      	ldrh	r3, [r7, #8]
 800930c:	461a      	mov	r2, r3
 800930e:	68f9      	ldr	r1, [r7, #12]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fa44 	bl	800979e <USBD_CtlSendData>
 8009316:	e009      	b.n	800932c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f9ce 	bl	80096bc <USBD_CtlError>
 8009320:	e004      	b.n	800932c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fa95 	bl	8009852 <USBD_CtlSendStatus>
 8009328:	e000      	b.n	800932c <USBD_GetDescriptor+0x2cc>
    return;
 800932a:	bf00      	nop
  }
}
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop

08009334 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	889b      	ldrh	r3, [r3, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d131      	bne.n	80093aa <USBD_SetAddress+0x76>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	88db      	ldrh	r3, [r3, #6]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d12d      	bne.n	80093aa <USBD_SetAddress+0x76>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	885b      	ldrh	r3, [r3, #2]
 8009352:	2b7f      	cmp	r3, #127	; 0x7f
 8009354:	d829      	bhi.n	80093aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	885b      	ldrh	r3, [r3, #2]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009360:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b03      	cmp	r3, #3
 800936c:	d104      	bne.n	8009378 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f9a3 	bl	80096bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009376:	e01d      	b.n	80093b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	7bfa      	ldrb	r2, [r7, #15]
 800937c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fedd 	bl	800a144 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fa61 	bl	8009852 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d004      	beq.n	80093a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2202      	movs	r2, #2
 800939a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939e:	e009      	b.n	80093b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a8:	e004      	b.n	80093b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f985 	bl	80096bc <USBD_CtlError>
  }
}
 80093b2:	bf00      	nop
 80093b4:	bf00      	nop
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	885b      	ldrh	r3, [r3, #2]
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	4b4c      	ldr	r3, [pc, #304]	; (8009504 <USBD_SetConfig+0x148>)
 80093d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093d4:	4b4b      	ldr	r3, [pc, #300]	; (8009504 <USBD_SetConfig+0x148>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d905      	bls.n	80093e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f96c 	bl	80096bc <USBD_CtlError>
    return USBD_FAIL;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e088      	b.n	80094fa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d002      	beq.n	80093fa <USBD_SetConfig+0x3e>
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d025      	beq.n	8009444 <USBD_SetConfig+0x88>
 80093f8:	e071      	b.n	80094de <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80093fa:	4b42      	ldr	r3, [pc, #264]	; (8009504 <USBD_SetConfig+0x148>)
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d01c      	beq.n	800943c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009402:	4b40      	ldr	r3, [pc, #256]	; (8009504 <USBD_SetConfig+0x148>)
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800940c:	4b3d      	ldr	r3, [pc, #244]	; (8009504 <USBD_SetConfig+0x148>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7ff f948 	bl	80086a8 <USBD_SetClassConfig>
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f949 	bl	80096bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800942a:	e065      	b.n	80094f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fa10 	bl	8009852 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2203      	movs	r2, #3
 8009436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800943a:	e05d      	b.n	80094f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fa08 	bl	8009852 <USBD_CtlSendStatus>
      break;
 8009442:	e059      	b.n	80094f8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009444:	4b2f      	ldr	r3, [pc, #188]	; (8009504 <USBD_SetConfig+0x148>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d112      	bne.n	8009472 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009454:	4b2b      	ldr	r3, [pc, #172]	; (8009504 <USBD_SetConfig+0x148>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800945e:	4b29      	ldr	r3, [pc, #164]	; (8009504 <USBD_SetConfig+0x148>)
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff f93b 	bl	80086e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f9f1 	bl	8009852 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009470:	e042      	b.n	80094f8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009472:	4b24      	ldr	r3, [pc, #144]	; (8009504 <USBD_SetConfig+0x148>)
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	429a      	cmp	r2, r3
 800947e:	d02a      	beq.n	80094d6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	b2db      	uxtb	r3, r3
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7ff f929 	bl	80086e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800948e:	4b1d      	ldr	r3, [pc, #116]	; (8009504 <USBD_SetConfig+0x148>)
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009498:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <USBD_SetConfig+0x148>)
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff f902 	bl	80086a8 <USBD_SetClassConfig>
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00f      	beq.n	80094ce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f903 	bl	80096bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7ff f90e 	bl	80086e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2202      	movs	r2, #2
 80094c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80094cc:	e014      	b.n	80094f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f9bf 	bl	8009852 <USBD_CtlSendStatus>
      break;
 80094d4:	e010      	b.n	80094f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f9bb 	bl	8009852 <USBD_CtlSendStatus>
      break;
 80094dc:	e00c      	b.n	80094f8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f8eb 	bl	80096bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094e6:	4b07      	ldr	r3, [pc, #28]	; (8009504 <USBD_SetConfig+0x148>)
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7ff f8f7 	bl	80086e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80094f2:	2303      	movs	r3, #3
 80094f4:	73fb      	strb	r3, [r7, #15]
      break;
 80094f6:	bf00      	nop
  }

  return ret;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20000656 	.word	0x20000656

08009508 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	88db      	ldrh	r3, [r3, #6]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d004      	beq.n	8009524 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f8cd 	bl	80096bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009522:	e023      	b.n	800956c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b02      	cmp	r3, #2
 800952e:	dc02      	bgt.n	8009536 <USBD_GetConfig+0x2e>
 8009530:	2b00      	cmp	r3, #0
 8009532:	dc03      	bgt.n	800953c <USBD_GetConfig+0x34>
 8009534:	e015      	b.n	8009562 <USBD_GetConfig+0x5a>
 8009536:	2b03      	cmp	r3, #3
 8009538:	d00b      	beq.n	8009552 <USBD_GetConfig+0x4a>
 800953a:	e012      	b.n	8009562 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	3308      	adds	r3, #8
 8009546:	2201      	movs	r2, #1
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f927 	bl	800979e <USBD_CtlSendData>
        break;
 8009550:	e00c      	b.n	800956c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3304      	adds	r3, #4
 8009556:	2201      	movs	r2, #1
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f91f 	bl	800979e <USBD_CtlSendData>
        break;
 8009560:	e004      	b.n	800956c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f8a9 	bl	80096bc <USBD_CtlError>
        break;
 800956a:	bf00      	nop
}
 800956c:	bf00      	nop
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009584:	b2db      	uxtb	r3, r3
 8009586:	3b01      	subs	r3, #1
 8009588:	2b02      	cmp	r3, #2
 800958a:	d81e      	bhi.n	80095ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	88db      	ldrh	r3, [r3, #6]
 8009590:	2b02      	cmp	r3, #2
 8009592:	d004      	beq.n	800959e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f890 	bl	80096bc <USBD_CtlError>
        break;
 800959c:	e01a      	b.n	80095d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d005      	beq.n	80095ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f043 0202 	orr.w	r2, r3, #2
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	330c      	adds	r3, #12
 80095be:	2202      	movs	r2, #2
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f8eb 	bl	800979e <USBD_CtlSendData>
      break;
 80095c8:	e004      	b.n	80095d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f875 	bl	80096bc <USBD_CtlError>
      break;
 80095d2:	bf00      	nop
  }
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	885b      	ldrh	r3, [r3, #2]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d106      	bne.n	80095fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f92b 	bl	8009852 <USBD_CtlSendStatus>
  }
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009614:	b2db      	uxtb	r3, r3
 8009616:	3b01      	subs	r3, #1
 8009618:	2b02      	cmp	r3, #2
 800961a:	d80b      	bhi.n	8009634 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	885b      	ldrh	r3, [r3, #2]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d10c      	bne.n	800963e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f910 	bl	8009852 <USBD_CtlSendStatus>
      }
      break;
 8009632:	e004      	b.n	800963e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f840 	bl	80096bc <USBD_CtlError>
      break;
 800963c:	e000      	b.n	8009640 <USBD_ClrFeature+0x3c>
      break;
 800963e:	bf00      	nop
  }
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	781a      	ldrb	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3301      	adds	r3, #1
 8009662:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	781a      	ldrb	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	3301      	adds	r3, #1
 8009670:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f7ff fabb 	bl	8008bee <SWAPBYTE>
 8009678:	4603      	mov	r3, r0
 800967a:	461a      	mov	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3301      	adds	r3, #1
 8009684:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3301      	adds	r3, #1
 800968a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f7ff faae 	bl	8008bee <SWAPBYTE>
 8009692:	4603      	mov	r3, r0
 8009694:	461a      	mov	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3301      	adds	r3, #1
 800969e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	3301      	adds	r3, #1
 80096a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f7ff faa1 	bl	8008bee <SWAPBYTE>
 80096ac:	4603      	mov	r3, r0
 80096ae:	461a      	mov	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	80da      	strh	r2, [r3, #6]
}
 80096b4:	bf00      	nop
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80096c6:	2180      	movs	r1, #128	; 0x80
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fcd1 	bl	800a070 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80096ce:	2100      	movs	r1, #0
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fccd 	bl	800a070 <USBD_LL_StallEP>
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b086      	sub	sp, #24
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d036      	beq.n	8009762 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80096f8:	6938      	ldr	r0, [r7, #16]
 80096fa:	f000 f836 	bl	800976a <USBD_GetLen>
 80096fe:	4603      	mov	r3, r0
 8009700:	3301      	adds	r3, #1
 8009702:	b29b      	uxth	r3, r3
 8009704:	005b      	lsls	r3, r3, #1
 8009706:	b29a      	uxth	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800970c:	7dfb      	ldrb	r3, [r7, #23]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	4413      	add	r3, r2
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	7812      	ldrb	r2, [r2, #0]
 8009716:	701a      	strb	r2, [r3, #0]
  idx++;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	3301      	adds	r3, #1
 800971c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	4413      	add	r3, r2
 8009724:	2203      	movs	r2, #3
 8009726:	701a      	strb	r2, [r3, #0]
  idx++;
 8009728:	7dfb      	ldrb	r3, [r7, #23]
 800972a:	3301      	adds	r3, #1
 800972c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800972e:	e013      	b.n	8009758 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	4413      	add	r3, r2
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	7812      	ldrb	r2, [r2, #0]
 800973a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	3301      	adds	r3, #1
 8009740:	613b      	str	r3, [r7, #16]
    idx++;
 8009742:	7dfb      	ldrb	r3, [r7, #23]
 8009744:	3301      	adds	r3, #1
 8009746:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009748:	7dfb      	ldrb	r3, [r7, #23]
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	4413      	add	r3, r2
 800974e:	2200      	movs	r2, #0
 8009750:	701a      	strb	r2, [r3, #0]
    idx++;
 8009752:	7dfb      	ldrb	r3, [r7, #23]
 8009754:	3301      	adds	r3, #1
 8009756:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e7      	bne.n	8009730 <USBD_GetString+0x52>
 8009760:	e000      	b.n	8009764 <USBD_GetString+0x86>
    return;
 8009762:	bf00      	nop
  }
}
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800976a:	b480      	push	{r7}
 800976c:	b085      	sub	sp, #20
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009772:	2300      	movs	r3, #0
 8009774:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800977a:	e005      	b.n	8009788 <USBD_GetLen+0x1e>
  {
    len++;
 800977c:	7bfb      	ldrb	r3, [r7, #15]
 800977e:	3301      	adds	r3, #1
 8009780:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	3301      	adds	r3, #1
 8009786:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1f5      	bne.n	800977c <USBD_GetLen+0x12>
  }

  return len;
 8009790:	7bfb      	ldrb	r3, [r7, #15]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2202      	movs	r2, #2
 80097ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	2100      	movs	r1, #0
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 fcdc 	bl	800a182 <USBD_LL_Transmit>

  return USBD_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	2100      	movs	r1, #0
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 fccb 	bl	800a182 <USBD_LL_Transmit>

  return USBD_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2203      	movs	r2, #3
 8009806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	2100      	movs	r1, #0
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 fccf 	bl	800a1c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	2100      	movs	r1, #0
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f000 fcbe 	bl	800a1c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2204      	movs	r2, #4
 800985e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009862:	2300      	movs	r3, #0
 8009864:	2200      	movs	r2, #0
 8009866:	2100      	movs	r1, #0
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fc8a 	bl	800a182 <USBD_LL_Transmit>

  return USBD_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2205      	movs	r2, #5
 8009884:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009888:	2300      	movs	r3, #0
 800988a:	2200      	movs	r2, #0
 800988c:	2100      	movs	r1, #0
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fc98 	bl	800a1c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098a4:	2200      	movs	r2, #0
 80098a6:	4912      	ldr	r1, [pc, #72]	; (80098f0 <MX_USB_DEVICE_Init+0x50>)
 80098a8:	4812      	ldr	r0, [pc, #72]	; (80098f4 <MX_USB_DEVICE_Init+0x54>)
 80098aa:	f7fe fe8f 	bl	80085cc <USBD_Init>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80098b4:	f7f7 ffd8 	bl	8001868 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80098b8:	490f      	ldr	r1, [pc, #60]	; (80098f8 <MX_USB_DEVICE_Init+0x58>)
 80098ba:	480e      	ldr	r0, [pc, #56]	; (80098f4 <MX_USB_DEVICE_Init+0x54>)
 80098bc:	f7fe feb6 	bl	800862c <USBD_RegisterClass>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80098c6:	f7f7 ffcf 	bl	8001868 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80098ca:	490c      	ldr	r1, [pc, #48]	; (80098fc <MX_USB_DEVICE_Init+0x5c>)
 80098cc:	4809      	ldr	r0, [pc, #36]	; (80098f4 <MX_USB_DEVICE_Init+0x54>)
 80098ce:	f7fe fe07 	bl	80084e0 <USBD_CDC_RegisterInterface>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d001      	beq.n	80098dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80098d8:	f7f7 ffc6 	bl	8001868 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80098dc:	4805      	ldr	r0, [pc, #20]	; (80098f4 <MX_USB_DEVICE_Init+0x54>)
 80098de:	f7fe fecc 	bl	800867a <USBD_Start>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098e8:	f7f7 ffbe 	bl	8001868 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098ec:	bf00      	nop
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20000164 	.word	0x20000164
 80098f4:	20000a3c 	.word	0x20000a3c
 80098f8:	2000004c 	.word	0x2000004c
 80098fc:	20000150 	.word	0x20000150

08009900 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009904:	2200      	movs	r2, #0
 8009906:	4905      	ldr	r1, [pc, #20]	; (800991c <CDC_Init_FS+0x1c>)
 8009908:	4805      	ldr	r0, [pc, #20]	; (8009920 <CDC_Init_FS+0x20>)
 800990a:	f7fe fdfe 	bl	800850a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800990e:	4905      	ldr	r1, [pc, #20]	; (8009924 <CDC_Init_FS+0x24>)
 8009910:	4803      	ldr	r0, [pc, #12]	; (8009920 <CDC_Init_FS+0x20>)
 8009912:	f7fe fe18 	bl	8008546 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009916:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009918:	4618      	mov	r0, r3
 800991a:	bd80      	pop	{r7, pc}
 800991c:	2000150c 	.word	0x2000150c
 8009920:	20000a3c 	.word	0x20000a3c
 8009924:	20000d0c 	.word	0x20000d0c

08009928 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009928:	b480      	push	{r7}
 800992a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800992c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800992e:	4618      	mov	r0, r3
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	6039      	str	r1, [r7, #0]
 8009942:	71fb      	strb	r3, [r7, #7]
 8009944:	4613      	mov	r3, r2
 8009946:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	2b23      	cmp	r3, #35	; 0x23
 800994c:	d84a      	bhi.n	80099e4 <CDC_Control_FS+0xac>
 800994e:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <CDC_Control_FS+0x1c>)
 8009950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009954:	080099e5 	.word	0x080099e5
 8009958:	080099e5 	.word	0x080099e5
 800995c:	080099e5 	.word	0x080099e5
 8009960:	080099e5 	.word	0x080099e5
 8009964:	080099e5 	.word	0x080099e5
 8009968:	080099e5 	.word	0x080099e5
 800996c:	080099e5 	.word	0x080099e5
 8009970:	080099e5 	.word	0x080099e5
 8009974:	080099e5 	.word	0x080099e5
 8009978:	080099e5 	.word	0x080099e5
 800997c:	080099e5 	.word	0x080099e5
 8009980:	080099e5 	.word	0x080099e5
 8009984:	080099e5 	.word	0x080099e5
 8009988:	080099e5 	.word	0x080099e5
 800998c:	080099e5 	.word	0x080099e5
 8009990:	080099e5 	.word	0x080099e5
 8009994:	080099e5 	.word	0x080099e5
 8009998:	080099e5 	.word	0x080099e5
 800999c:	080099e5 	.word	0x080099e5
 80099a0:	080099e5 	.word	0x080099e5
 80099a4:	080099e5 	.word	0x080099e5
 80099a8:	080099e5 	.word	0x080099e5
 80099ac:	080099e5 	.word	0x080099e5
 80099b0:	080099e5 	.word	0x080099e5
 80099b4:	080099e5 	.word	0x080099e5
 80099b8:	080099e5 	.word	0x080099e5
 80099bc:	080099e5 	.word	0x080099e5
 80099c0:	080099e5 	.word	0x080099e5
 80099c4:	080099e5 	.word	0x080099e5
 80099c8:	080099e5 	.word	0x080099e5
 80099cc:	080099e5 	.word	0x080099e5
 80099d0:	080099e5 	.word	0x080099e5
 80099d4:	080099e5 	.word	0x080099e5
 80099d8:	080099e5 	.word	0x080099e5
 80099dc:	080099e5 	.word	0x080099e5
 80099e0:	080099e5 	.word	0x080099e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099e4:	bf00      	nop
  }

  return (USBD_OK);
 80099e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	480f      	ldr	r0, [pc, #60]	; (8009a40 <CDC_Receive_FS+0x4c>)
 8009a02:	f7fe fda0 	bl	8008546 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a06:	480e      	ldr	r0, [pc, #56]	; (8009a40 <CDC_Receive_FS+0x4c>)
 8009a08:	f7fe fdb6 	bl	8008578 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer
 8009a0c:	2240      	movs	r2, #64	; 0x40
 8009a0e:	2100      	movs	r1, #0
 8009a10:	480c      	ldr	r0, [pc, #48]	; (8009a44 <CDC_Receive_FS+0x50>)
 8009a12:	f000 fc87 	bl	800a324 <memset>
  uint8_t len = (uint8_t)*Len;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	6879      	ldr	r1, [r7, #4]
 8009a22:	4808      	ldr	r0, [pc, #32]	; (8009a44 <CDC_Receive_FS+0x50>)
 8009a24:	f000 fc70 	bl	800a308 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fc78 	bl	800a324 <memset>

  return (USBD_OK);
 8009a34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20000a3c 	.word	0x20000a3c
 8009a44:	20000984 	.word	0x20000984

08009a48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b087      	sub	sp, #28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	4613      	mov	r3, r2
 8009a54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009a5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
	...

08009a6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	6039      	str	r1, [r7, #0]
 8009a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2212      	movs	r2, #18
 8009a7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a7e:	4b03      	ldr	r3, [pc, #12]	; (8009a8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	20000180 	.word	0x20000180

08009a90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	6039      	str	r1, [r7, #0]
 8009a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2204      	movs	r2, #4
 8009aa0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009aa2:	4b03      	ldr	r3, [pc, #12]	; (8009ab0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	20000194 	.word	0x20000194

08009ab4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	6039      	str	r1, [r7, #0]
 8009abe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ac0:	79fb      	ldrb	r3, [r7, #7]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d105      	bne.n	8009ad2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	4907      	ldr	r1, [pc, #28]	; (8009ae8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009aca:	4808      	ldr	r0, [pc, #32]	; (8009aec <USBD_FS_ProductStrDescriptor+0x38>)
 8009acc:	f7ff fe07 	bl	80096de <USBD_GetString>
 8009ad0:	e004      	b.n	8009adc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	4904      	ldr	r1, [pc, #16]	; (8009ae8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ad6:	4805      	ldr	r0, [pc, #20]	; (8009aec <USBD_FS_ProductStrDescriptor+0x38>)
 8009ad8:	f7ff fe01 	bl	80096de <USBD_GetString>
  }
  return USBD_StrDesc;
 8009adc:	4b02      	ldr	r3, [pc, #8]	; (8009ae8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	20001d0c 	.word	0x20001d0c
 8009aec:	0800a528 	.word	0x0800a528

08009af0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	4603      	mov	r3, r0
 8009af8:	6039      	str	r1, [r7, #0]
 8009afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	4904      	ldr	r1, [pc, #16]	; (8009b10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b00:	4804      	ldr	r0, [pc, #16]	; (8009b14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b02:	f7ff fdec 	bl	80096de <USBD_GetString>
  return USBD_StrDesc;
 8009b06:	4b02      	ldr	r3, [pc, #8]	; (8009b10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20001d0c 	.word	0x20001d0c
 8009b14:	0800a53c 	.word	0x0800a53c

08009b18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	6039      	str	r1, [r7, #0]
 8009b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	221a      	movs	r2, #26
 8009b28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b2a:	f000 f843 	bl	8009bb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b2e:	4b02      	ldr	r3, [pc, #8]	; (8009b38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	20000198 	.word	0x20000198

08009b3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	4603      	mov	r3, r0
 8009b44:	6039      	str	r1, [r7, #0]
 8009b46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d105      	bne.n	8009b5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	4907      	ldr	r1, [pc, #28]	; (8009b70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b52:	4808      	ldr	r0, [pc, #32]	; (8009b74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b54:	f7ff fdc3 	bl	80096de <USBD_GetString>
 8009b58:	e004      	b.n	8009b64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	4904      	ldr	r1, [pc, #16]	; (8009b70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b5e:	4805      	ldr	r0, [pc, #20]	; (8009b74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b60:	f7ff fdbd 	bl	80096de <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b64:	4b02      	ldr	r3, [pc, #8]	; (8009b70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	20001d0c 	.word	0x20001d0c
 8009b74:	0800a550 	.word	0x0800a550

08009b78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	6039      	str	r1, [r7, #0]
 8009b82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b84:	79fb      	ldrb	r3, [r7, #7]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d105      	bne.n	8009b96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	4907      	ldr	r1, [pc, #28]	; (8009bac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b8e:	4808      	ldr	r0, [pc, #32]	; (8009bb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b90:	f7ff fda5 	bl	80096de <USBD_GetString>
 8009b94:	e004      	b.n	8009ba0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	4904      	ldr	r1, [pc, #16]	; (8009bac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b9a:	4805      	ldr	r0, [pc, #20]	; (8009bb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b9c:	f7ff fd9f 	bl	80096de <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ba0:	4b02      	ldr	r3, [pc, #8]	; (8009bac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20001d0c 	.word	0x20001d0c
 8009bb0:	0800a55c 	.word	0x0800a55c

08009bb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009bba:	4b0f      	ldr	r3, [pc, #60]	; (8009bf8 <Get_SerialNum+0x44>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009bc0:	4b0e      	ldr	r3, [pc, #56]	; (8009bfc <Get_SerialNum+0x48>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bc6:	4b0e      	ldr	r3, [pc, #56]	; (8009c00 <Get_SerialNum+0x4c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d009      	beq.n	8009bee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009bda:	2208      	movs	r2, #8
 8009bdc:	4909      	ldr	r1, [pc, #36]	; (8009c04 <Get_SerialNum+0x50>)
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f000 f814 	bl	8009c0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009be4:	2204      	movs	r2, #4
 8009be6:	4908      	ldr	r1, [pc, #32]	; (8009c08 <Get_SerialNum+0x54>)
 8009be8:	68b8      	ldr	r0, [r7, #8]
 8009bea:	f000 f80f 	bl	8009c0c <IntToUnicode>
  }
}
 8009bee:	bf00      	nop
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	1fff7a10 	.word	0x1fff7a10
 8009bfc:	1fff7a14 	.word	0x1fff7a14
 8009c00:	1fff7a18 	.word	0x1fff7a18
 8009c04:	2000019a 	.word	0x2000019a
 8009c08:	200001aa 	.word	0x200001aa

08009c0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	4613      	mov	r3, r2
 8009c18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c1e:	2300      	movs	r3, #0
 8009c20:	75fb      	strb	r3, [r7, #23]
 8009c22:	e027      	b.n	8009c74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	0f1b      	lsrs	r3, r3, #28
 8009c28:	2b09      	cmp	r3, #9
 8009c2a:	d80b      	bhi.n	8009c44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	0f1b      	lsrs	r3, r3, #28
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	4619      	mov	r1, r3
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	440b      	add	r3, r1
 8009c3c:	3230      	adds	r2, #48	; 0x30
 8009c3e:	b2d2      	uxtb	r2, r2
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	e00a      	b.n	8009c5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	0f1b      	lsrs	r3, r3, #28
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	005b      	lsls	r3, r3, #1
 8009c4e:	4619      	mov	r1, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	440b      	add	r3, r1
 8009c54:	3237      	adds	r2, #55	; 0x37
 8009c56:	b2d2      	uxtb	r2, r2
 8009c58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	011b      	lsls	r3, r3, #4
 8009c5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
 8009c62:	005b      	lsls	r3, r3, #1
 8009c64:	3301      	adds	r3, #1
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	4413      	add	r3, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	3301      	adds	r3, #1
 8009c72:	75fb      	strb	r3, [r7, #23]
 8009c74:	7dfa      	ldrb	r2, [r7, #23]
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d3d3      	bcc.n	8009c24 <IntToUnicode+0x18>
  }
}
 8009c7c:	bf00      	nop
 8009c7e:	bf00      	nop
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
	...

08009c8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08a      	sub	sp, #40	; 0x28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c94:	f107 0314 	add.w	r3, r7, #20
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	605a      	str	r2, [r3, #4]
 8009c9e:	609a      	str	r2, [r3, #8]
 8009ca0:	60da      	str	r2, [r3, #12]
 8009ca2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cac:	d13a      	bne.n	8009d24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cae:	2300      	movs	r3, #0
 8009cb0:	613b      	str	r3, [r7, #16]
 8009cb2:	4b1e      	ldr	r3, [pc, #120]	; (8009d2c <HAL_PCD_MspInit+0xa0>)
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	4a1d      	ldr	r2, [pc, #116]	; (8009d2c <HAL_PCD_MspInit+0xa0>)
 8009cb8:	f043 0301 	orr.w	r3, r3, #1
 8009cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8009cbe:	4b1b      	ldr	r3, [pc, #108]	; (8009d2c <HAL_PCD_MspInit+0xa0>)
 8009cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	613b      	str	r3, [r7, #16]
 8009cc8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009cca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009cdc:	230a      	movs	r3, #10
 8009cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ce0:	f107 0314 	add.w	r3, r7, #20
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4812      	ldr	r0, [pc, #72]	; (8009d30 <HAL_PCD_MspInit+0xa4>)
 8009ce8:	f7f9 fbf4 	bl	80034d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009cec:	4b0f      	ldr	r3, [pc, #60]	; (8009d2c <HAL_PCD_MspInit+0xa0>)
 8009cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf0:	4a0e      	ldr	r2, [pc, #56]	; (8009d2c <HAL_PCD_MspInit+0xa0>)
 8009cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf6:	6353      	str	r3, [r2, #52]	; 0x34
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	4b0b      	ldr	r3, [pc, #44]	; (8009d2c <HAL_PCD_MspInit+0xa0>)
 8009cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d00:	4a0a      	ldr	r2, [pc, #40]	; (8009d2c <HAL_PCD_MspInit+0xa0>)
 8009d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d06:	6453      	str	r3, [r2, #68]	; 0x44
 8009d08:	4b08      	ldr	r3, [pc, #32]	; (8009d2c <HAL_PCD_MspInit+0xa0>)
 8009d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d10:	60fb      	str	r3, [r7, #12]
 8009d12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d14:	2200      	movs	r2, #0
 8009d16:	2100      	movs	r1, #0
 8009d18:	2043      	movs	r0, #67	; 0x43
 8009d1a:	f7f9 fba4 	bl	8003466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d1e:	2043      	movs	r0, #67	; 0x43
 8009d20:	f7f9 fbbd 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d24:	bf00      	nop
 8009d26:	3728      	adds	r7, #40	; 0x28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	40023800 	.word	0x40023800
 8009d30:	40020000 	.word	0x40020000

08009d34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	f7fe fce0 	bl	8008710 <USBD_LL_SetupStage>
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009d6a:	78fa      	ldrb	r2, [r7, #3]
 8009d6c:	6879      	ldr	r1, [r7, #4]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	00db      	lsls	r3, r3, #3
 8009d72:	1a9b      	subs	r3, r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	440b      	add	r3, r1
 8009d78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	78fb      	ldrb	r3, [r7, #3]
 8009d80:	4619      	mov	r1, r3
 8009d82:	f7fe fd1a 	bl	80087ba <USBD_LL_DataOutStage>
}
 8009d86:	bf00      	nop
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	460b      	mov	r3, r1
 8009d98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009da0:	78fa      	ldrb	r2, [r7, #3]
 8009da2:	6879      	ldr	r1, [r7, #4]
 8009da4:	4613      	mov	r3, r2
 8009da6:	00db      	lsls	r3, r3, #3
 8009da8:	1a9b      	subs	r3, r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	440b      	add	r3, r1
 8009dae:	3348      	adds	r3, #72	; 0x48
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	4619      	mov	r1, r3
 8009db6:	f7fe fd63 	bl	8008880 <USBD_LL_DataInStage>
}
 8009dba:	bf00      	nop
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b082      	sub	sp, #8
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fe fe77 	bl	8008ac4 <USBD_LL_SOF>
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009de6:	2301      	movs	r3, #1
 8009de8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d102      	bne.n	8009df8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]
 8009df6:	e008      	b.n	8009e0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d102      	bne.n	8009e06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009e00:	2301      	movs	r3, #1
 8009e02:	73fb      	strb	r3, [r7, #15]
 8009e04:	e001      	b.n	8009e0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009e06:	f7f7 fd2f 	bl	8001868 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e10:	7bfa      	ldrb	r2, [r7, #15]
 8009e12:	4611      	mov	r1, r2
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fe fe17 	bl	8008a48 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fe fdc3 	bl	80089ac <USBD_LL_Reset>
}
 8009e26:	bf00      	nop
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe fe12 	bl	8008a68 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	6812      	ldr	r2, [r2, #0]
 8009e52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e56:	f043 0301 	orr.w	r3, r3, #1
 8009e5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a1b      	ldr	r3, [r3, #32]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d005      	beq.n	8009e70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e64:	4b04      	ldr	r3, [pc, #16]	; (8009e78 <HAL_PCD_SuspendCallback+0x48>)
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	4a03      	ldr	r2, [pc, #12]	; (8009e78 <HAL_PCD_SuspendCallback+0x48>)
 8009e6a:	f043 0306 	orr.w	r3, r3, #6
 8009e6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	e000ed00 	.word	0xe000ed00

08009e7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe fe02 	bl	8008a94 <USBD_LL_Resume>
}
 8009e90:	bf00      	nop
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009eaa:	78fa      	ldrb	r2, [r7, #3]
 8009eac:	4611      	mov	r1, r2
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe fe50 	bl	8008b54 <USBD_LL_IsoOUTIncomplete>
}
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ece:	78fa      	ldrb	r2, [r7, #3]
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fe18 	bl	8008b08 <USBD_LL_IsoINIncomplete>
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe fe56 	bl	8008ba0 <USBD_LL_DevConnected>
}
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fe53 	bl	8008bb6 <USBD_LL_DevDisconnected>
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d13c      	bne.n	8009fa2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009f28:	4a20      	ldr	r2, [pc, #128]	; (8009fac <USBD_LL_Init+0x94>)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a1e      	ldr	r2, [pc, #120]	; (8009fac <USBD_LL_Init+0x94>)
 8009f34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f38:	4b1c      	ldr	r3, [pc, #112]	; (8009fac <USBD_LL_Init+0x94>)
 8009f3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009f3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009f40:	4b1a      	ldr	r3, [pc, #104]	; (8009fac <USBD_LL_Init+0x94>)
 8009f42:	2204      	movs	r2, #4
 8009f44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009f46:	4b19      	ldr	r3, [pc, #100]	; (8009fac <USBD_LL_Init+0x94>)
 8009f48:	2202      	movs	r2, #2
 8009f4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f4c:	4b17      	ldr	r3, [pc, #92]	; (8009fac <USBD_LL_Init+0x94>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f52:	4b16      	ldr	r3, [pc, #88]	; (8009fac <USBD_LL_Init+0x94>)
 8009f54:	2202      	movs	r2, #2
 8009f56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f58:	4b14      	ldr	r3, [pc, #80]	; (8009fac <USBD_LL_Init+0x94>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009f5e:	4b13      	ldr	r3, [pc, #76]	; (8009fac <USBD_LL_Init+0x94>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009f64:	4b11      	ldr	r3, [pc, #68]	; (8009fac <USBD_LL_Init+0x94>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009f6a:	4b10      	ldr	r3, [pc, #64]	; (8009fac <USBD_LL_Init+0x94>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009f70:	4b0e      	ldr	r3, [pc, #56]	; (8009fac <USBD_LL_Init+0x94>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f76:	480d      	ldr	r0, [pc, #52]	; (8009fac <USBD_LL_Init+0x94>)
 8009f78:	f7fa ff01 	bl	8004d7e <HAL_PCD_Init>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009f82:	f7f7 fc71 	bl	8001868 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f86:	2180      	movs	r1, #128	; 0x80
 8009f88:	4808      	ldr	r0, [pc, #32]	; (8009fac <USBD_LL_Init+0x94>)
 8009f8a:	f7fc f85e 	bl	800604a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f8e:	2240      	movs	r2, #64	; 0x40
 8009f90:	2100      	movs	r1, #0
 8009f92:	4806      	ldr	r0, [pc, #24]	; (8009fac <USBD_LL_Init+0x94>)
 8009f94:	f7fc f812 	bl	8005fbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f98:	2280      	movs	r2, #128	; 0x80
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	4803      	ldr	r0, [pc, #12]	; (8009fac <USBD_LL_Init+0x94>)
 8009f9e:	f7fc f80d 	bl	8005fbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20001f0c 	.word	0x20001f0c

08009fb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fa fff6 	bl	8004fb8 <HAL_PCD_Start>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 f942 	bl	800a25c <USBD_Get_USB_Status>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	4608      	mov	r0, r1
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	70fb      	strb	r3, [r7, #3]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70bb      	strb	r3, [r7, #2]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a00e:	78bb      	ldrb	r3, [r7, #2]
 800a010:	883a      	ldrh	r2, [r7, #0]
 800a012:	78f9      	ldrb	r1, [r7, #3]
 800a014:	f7fb fbda 	bl	80057cc <HAL_PCD_EP_Open>
 800a018:	4603      	mov	r3, r0
 800a01a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 f91c 	bl	800a25c <USBD_Get_USB_Status>
 800a024:	4603      	mov	r3, r0
 800a026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a028:	7bbb      	ldrb	r3, [r7, #14]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b084      	sub	sp, #16
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a04c:	78fa      	ldrb	r2, [r7, #3]
 800a04e:	4611      	mov	r1, r2
 800a050:	4618      	mov	r0, r3
 800a052:	f7fb fc23 	bl	800589c <HAL_PCD_EP_Close>
 800a056:	4603      	mov	r3, r0
 800a058:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f000 f8fd 	bl	800a25c <USBD_Get_USB_Status>
 800a062:	4603      	mov	r3, r0
 800a064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a066:	7bbb      	ldrb	r3, [r7, #14]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a08a:	78fa      	ldrb	r2, [r7, #3]
 800a08c:	4611      	mov	r1, r2
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fb fcfb 	bl	8005a8a <HAL_PCD_EP_SetStall>
 800a094:	4603      	mov	r3, r0
 800a096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a098:	7bfb      	ldrb	r3, [r7, #15]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 f8de 	bl	800a25c <USBD_Get_USB_Status>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0c8:	78fa      	ldrb	r2, [r7, #3]
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fb fd40 	bl	8005b52 <HAL_PCD_EP_ClrStall>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 f8bf 	bl	800a25c <USBD_Get_USB_Status>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a104:	2b00      	cmp	r3, #0
 800a106:	da0b      	bge.n	800a120 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a108:	78fb      	ldrb	r3, [r7, #3]
 800a10a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a10e:	68f9      	ldr	r1, [r7, #12]
 800a110:	4613      	mov	r3, r2
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	1a9b      	subs	r3, r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	440b      	add	r3, r1
 800a11a:	333e      	adds	r3, #62	; 0x3e
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	e00b      	b.n	800a138 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a126:	68f9      	ldr	r1, [r7, #12]
 800a128:	4613      	mov	r3, r2
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	1a9b      	subs	r3, r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	440b      	add	r3, r1
 800a132:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a136:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	460b      	mov	r3, r1
 800a14e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a15e:	78fa      	ldrb	r2, [r7, #3]
 800a160:	4611      	mov	r1, r2
 800a162:	4618      	mov	r0, r3
 800a164:	f7fb fb0d 	bl	8005782 <HAL_PCD_SetAddress>
 800a168:	4603      	mov	r3, r0
 800a16a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 f874 	bl	800a25c <USBD_Get_USB_Status>
 800a174:	4603      	mov	r3, r0
 800a176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a178:	7bbb      	ldrb	r3, [r7, #14]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b086      	sub	sp, #24
 800a186:	af00      	add	r7, sp, #0
 800a188:	60f8      	str	r0, [r7, #12]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	603b      	str	r3, [r7, #0]
 800a18e:	460b      	mov	r3, r1
 800a190:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1a0:	7af9      	ldrb	r1, [r7, #11]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	f7fb fc26 	bl	80059f6 <HAL_PCD_EP_Transmit>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 f853 	bl	800a25c <USBD_Get_USB_Status>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	607a      	str	r2, [r7, #4]
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1e2:	7af9      	ldrb	r1, [r7, #11]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	f7fb fba2 	bl	8005930 <HAL_PCD_EP_Receive>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 f832 	bl	800a25c <USBD_Get_USB_Status>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b082      	sub	sp, #8
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	460b      	mov	r3, r1
 800a210:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a218:	78fa      	ldrb	r2, [r7, #3]
 800a21a:	4611      	mov	r1, r2
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fb fbd2 	bl	80059c6 <HAL_PCD_EP_GetRxCount>
 800a222:	4603      	mov	r3, r0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a234:	4b03      	ldr	r3, [pc, #12]	; (800a244 <USBD_static_malloc+0x18>)
}
 800a236:	4618      	mov	r0, r3
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	20000658 	.word	0x20000658

0800a248 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]

}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a26a:	79fb      	ldrb	r3, [r7, #7]
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d817      	bhi.n	800a2a0 <USBD_Get_USB_Status+0x44>
 800a270:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <USBD_Get_USB_Status+0x1c>)
 800a272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a276:	bf00      	nop
 800a278:	0800a289 	.word	0x0800a289
 800a27c:	0800a28f 	.word	0x0800a28f
 800a280:	0800a295 	.word	0x0800a295
 800a284:	0800a29b 	.word	0x0800a29b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]
    break;
 800a28c:	e00b      	b.n	800a2a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a28e:	2303      	movs	r3, #3
 800a290:	73fb      	strb	r3, [r7, #15]
    break;
 800a292:	e008      	b.n	800a2a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a294:	2301      	movs	r3, #1
 800a296:	73fb      	strb	r3, [r7, #15]
    break;
 800a298:	e005      	b.n	800a2a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a29a:	2303      	movs	r3, #3
 800a29c:	73fb      	strb	r3, [r7, #15]
    break;
 800a29e:	e002      	b.n	800a2a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a4:	bf00      	nop
  }
  return usb_status;
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <__errno>:
 800a2b4:	4b01      	ldr	r3, [pc, #4]	; (800a2bc <__errno+0x8>)
 800a2b6:	6818      	ldr	r0, [r3, #0]
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	200001b4 	.word	0x200001b4

0800a2c0 <__libc_init_array>:
 800a2c0:	b570      	push	{r4, r5, r6, lr}
 800a2c2:	4d0d      	ldr	r5, [pc, #52]	; (800a2f8 <__libc_init_array+0x38>)
 800a2c4:	4c0d      	ldr	r4, [pc, #52]	; (800a2fc <__libc_init_array+0x3c>)
 800a2c6:	1b64      	subs	r4, r4, r5
 800a2c8:	10a4      	asrs	r4, r4, #2
 800a2ca:	2600      	movs	r6, #0
 800a2cc:	42a6      	cmp	r6, r4
 800a2ce:	d109      	bne.n	800a2e4 <__libc_init_array+0x24>
 800a2d0:	4d0b      	ldr	r5, [pc, #44]	; (800a300 <__libc_init_array+0x40>)
 800a2d2:	4c0c      	ldr	r4, [pc, #48]	; (800a304 <__libc_init_array+0x44>)
 800a2d4:	f000 f916 	bl	800a504 <_init>
 800a2d8:	1b64      	subs	r4, r4, r5
 800a2da:	10a4      	asrs	r4, r4, #2
 800a2dc:	2600      	movs	r6, #0
 800a2de:	42a6      	cmp	r6, r4
 800a2e0:	d105      	bne.n	800a2ee <__libc_init_array+0x2e>
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
 800a2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2e8:	4798      	blx	r3
 800a2ea:	3601      	adds	r6, #1
 800a2ec:	e7ee      	b.n	800a2cc <__libc_init_array+0xc>
 800a2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f2:	4798      	blx	r3
 800a2f4:	3601      	adds	r6, #1
 800a2f6:	e7f2      	b.n	800a2de <__libc_init_array+0x1e>
 800a2f8:	0800b2e8 	.word	0x0800b2e8
 800a2fc:	0800b2e8 	.word	0x0800b2e8
 800a300:	0800b2e8 	.word	0x0800b2e8
 800a304:	0800b2ec 	.word	0x0800b2ec

0800a308 <memcpy>:
 800a308:	440a      	add	r2, r1
 800a30a:	4291      	cmp	r1, r2
 800a30c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a310:	d100      	bne.n	800a314 <memcpy+0xc>
 800a312:	4770      	bx	lr
 800a314:	b510      	push	{r4, lr}
 800a316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a31a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a31e:	4291      	cmp	r1, r2
 800a320:	d1f9      	bne.n	800a316 <memcpy+0xe>
 800a322:	bd10      	pop	{r4, pc}

0800a324 <memset>:
 800a324:	4402      	add	r2, r0
 800a326:	4603      	mov	r3, r0
 800a328:	4293      	cmp	r3, r2
 800a32a:	d100      	bne.n	800a32e <memset+0xa>
 800a32c:	4770      	bx	lr
 800a32e:	f803 1b01 	strb.w	r1, [r3], #1
 800a332:	e7f9      	b.n	800a328 <memset+0x4>

0800a334 <sqrt>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	ed2d 8b02 	vpush	{d8}
 800a33a:	ec55 4b10 	vmov	r4, r5, d0
 800a33e:	f000 f82d 	bl	800a39c <__ieee754_sqrt>
 800a342:	4b15      	ldr	r3, [pc, #84]	; (800a398 <sqrt+0x64>)
 800a344:	eeb0 8a40 	vmov.f32	s16, s0
 800a348:	eef0 8a60 	vmov.f32	s17, s1
 800a34c:	f993 3000 	ldrsb.w	r3, [r3]
 800a350:	3301      	adds	r3, #1
 800a352:	d019      	beq.n	800a388 <sqrt+0x54>
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	4620      	mov	r0, r4
 800a35a:	4629      	mov	r1, r5
 800a35c:	f7f6 fb8a 	bl	8000a74 <__aeabi_dcmpun>
 800a360:	b990      	cbnz	r0, 800a388 <sqrt+0x54>
 800a362:	2200      	movs	r2, #0
 800a364:	2300      	movs	r3, #0
 800a366:	4620      	mov	r0, r4
 800a368:	4629      	mov	r1, r5
 800a36a:	f7f6 fb5b 	bl	8000a24 <__aeabi_dcmplt>
 800a36e:	b158      	cbz	r0, 800a388 <sqrt+0x54>
 800a370:	f7ff ffa0 	bl	800a2b4 <__errno>
 800a374:	2321      	movs	r3, #33	; 0x21
 800a376:	6003      	str	r3, [r0, #0]
 800a378:	2200      	movs	r2, #0
 800a37a:	2300      	movs	r3, #0
 800a37c:	4610      	mov	r0, r2
 800a37e:	4619      	mov	r1, r3
 800a380:	f7f6 fa08 	bl	8000794 <__aeabi_ddiv>
 800a384:	ec41 0b18 	vmov	d8, r0, r1
 800a388:	eeb0 0a48 	vmov.f32	s0, s16
 800a38c:	eef0 0a68 	vmov.f32	s1, s17
 800a390:	ecbd 8b02 	vpop	{d8}
 800a394:	bd38      	pop	{r3, r4, r5, pc}
 800a396:	bf00      	nop
 800a398:	20000218 	.word	0x20000218

0800a39c <__ieee754_sqrt>:
 800a39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a0:	ec55 4b10 	vmov	r4, r5, d0
 800a3a4:	4e56      	ldr	r6, [pc, #344]	; (800a500 <__ieee754_sqrt+0x164>)
 800a3a6:	43ae      	bics	r6, r5
 800a3a8:	ee10 0a10 	vmov	r0, s0
 800a3ac:	ee10 3a10 	vmov	r3, s0
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	462a      	mov	r2, r5
 800a3b4:	d110      	bne.n	800a3d8 <__ieee754_sqrt+0x3c>
 800a3b6:	ee10 2a10 	vmov	r2, s0
 800a3ba:	462b      	mov	r3, r5
 800a3bc:	f7f6 f8c0 	bl	8000540 <__aeabi_dmul>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	f7f5 ff04 	bl	80001d4 <__adddf3>
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	460d      	mov	r5, r1
 800a3d0:	ec45 4b10 	vmov	d0, r4, r5
 800a3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d8:	2d00      	cmp	r5, #0
 800a3da:	dc10      	bgt.n	800a3fe <__ieee754_sqrt+0x62>
 800a3dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a3e0:	4330      	orrs	r0, r6
 800a3e2:	d0f5      	beq.n	800a3d0 <__ieee754_sqrt+0x34>
 800a3e4:	b15d      	cbz	r5, 800a3fe <__ieee754_sqrt+0x62>
 800a3e6:	ee10 2a10 	vmov	r2, s0
 800a3ea:	462b      	mov	r3, r5
 800a3ec:	ee10 0a10 	vmov	r0, s0
 800a3f0:	f7f5 feee 	bl	80001d0 <__aeabi_dsub>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	f7f6 f9cc 	bl	8000794 <__aeabi_ddiv>
 800a3fc:	e7e6      	b.n	800a3cc <__ieee754_sqrt+0x30>
 800a3fe:	1509      	asrs	r1, r1, #20
 800a400:	d076      	beq.n	800a4f0 <__ieee754_sqrt+0x154>
 800a402:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a406:	07ce      	lsls	r6, r1, #31
 800a408:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a40c:	bf5e      	ittt	pl
 800a40e:	0fda      	lsrpl	r2, r3, #31
 800a410:	005b      	lslpl	r3, r3, #1
 800a412:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a416:	0fda      	lsrs	r2, r3, #31
 800a418:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a41c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a420:	2000      	movs	r0, #0
 800a422:	106d      	asrs	r5, r5, #1
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	f04f 0e16 	mov.w	lr, #22
 800a42a:	4684      	mov	ip, r0
 800a42c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a430:	eb0c 0401 	add.w	r4, ip, r1
 800a434:	4294      	cmp	r4, r2
 800a436:	bfde      	ittt	le
 800a438:	1b12      	suble	r2, r2, r4
 800a43a:	eb04 0c01 	addle.w	ip, r4, r1
 800a43e:	1840      	addle	r0, r0, r1
 800a440:	0052      	lsls	r2, r2, #1
 800a442:	f1be 0e01 	subs.w	lr, lr, #1
 800a446:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a44a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a44e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a452:	d1ed      	bne.n	800a430 <__ieee754_sqrt+0x94>
 800a454:	4671      	mov	r1, lr
 800a456:	2720      	movs	r7, #32
 800a458:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a45c:	4562      	cmp	r2, ip
 800a45e:	eb04 060e 	add.w	r6, r4, lr
 800a462:	dc02      	bgt.n	800a46a <__ieee754_sqrt+0xce>
 800a464:	d113      	bne.n	800a48e <__ieee754_sqrt+0xf2>
 800a466:	429e      	cmp	r6, r3
 800a468:	d811      	bhi.n	800a48e <__ieee754_sqrt+0xf2>
 800a46a:	2e00      	cmp	r6, #0
 800a46c:	eb06 0e04 	add.w	lr, r6, r4
 800a470:	da43      	bge.n	800a4fa <__ieee754_sqrt+0x15e>
 800a472:	f1be 0f00 	cmp.w	lr, #0
 800a476:	db40      	blt.n	800a4fa <__ieee754_sqrt+0x15e>
 800a478:	f10c 0801 	add.w	r8, ip, #1
 800a47c:	eba2 020c 	sub.w	r2, r2, ip
 800a480:	429e      	cmp	r6, r3
 800a482:	bf88      	it	hi
 800a484:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a488:	1b9b      	subs	r3, r3, r6
 800a48a:	4421      	add	r1, r4
 800a48c:	46c4      	mov	ip, r8
 800a48e:	0052      	lsls	r2, r2, #1
 800a490:	3f01      	subs	r7, #1
 800a492:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a496:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a49a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a49e:	d1dd      	bne.n	800a45c <__ieee754_sqrt+0xc0>
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	d006      	beq.n	800a4b2 <__ieee754_sqrt+0x116>
 800a4a4:	1c4c      	adds	r4, r1, #1
 800a4a6:	bf13      	iteet	ne
 800a4a8:	3101      	addne	r1, #1
 800a4aa:	3001      	addeq	r0, #1
 800a4ac:	4639      	moveq	r1, r7
 800a4ae:	f021 0101 	bicne.w	r1, r1, #1
 800a4b2:	1043      	asrs	r3, r0, #1
 800a4b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a4b8:	0849      	lsrs	r1, r1, #1
 800a4ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a4be:	07c2      	lsls	r2, r0, #31
 800a4c0:	bf48      	it	mi
 800a4c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a4c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	463d      	mov	r5, r7
 800a4ce:	e77f      	b.n	800a3d0 <__ieee754_sqrt+0x34>
 800a4d0:	0ada      	lsrs	r2, r3, #11
 800a4d2:	3815      	subs	r0, #21
 800a4d4:	055b      	lsls	r3, r3, #21
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	d0fa      	beq.n	800a4d0 <__ieee754_sqrt+0x134>
 800a4da:	02d7      	lsls	r7, r2, #11
 800a4dc:	d50a      	bpl.n	800a4f4 <__ieee754_sqrt+0x158>
 800a4de:	f1c1 0420 	rsb	r4, r1, #32
 800a4e2:	fa23 f404 	lsr.w	r4, r3, r4
 800a4e6:	1e4d      	subs	r5, r1, #1
 800a4e8:	408b      	lsls	r3, r1
 800a4ea:	4322      	orrs	r2, r4
 800a4ec:	1b41      	subs	r1, r0, r5
 800a4ee:	e788      	b.n	800a402 <__ieee754_sqrt+0x66>
 800a4f0:	4608      	mov	r0, r1
 800a4f2:	e7f0      	b.n	800a4d6 <__ieee754_sqrt+0x13a>
 800a4f4:	0052      	lsls	r2, r2, #1
 800a4f6:	3101      	adds	r1, #1
 800a4f8:	e7ef      	b.n	800a4da <__ieee754_sqrt+0x13e>
 800a4fa:	46e0      	mov	r8, ip
 800a4fc:	e7be      	b.n	800a47c <__ieee754_sqrt+0xe0>
 800a4fe:	bf00      	nop
 800a500:	7ff00000 	.word	0x7ff00000

0800a504 <_init>:
 800a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a506:	bf00      	nop
 800a508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50a:	bc08      	pop	{r3}
 800a50c:	469e      	mov	lr, r3
 800a50e:	4770      	bx	lr

0800a510 <_fini>:
 800a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a512:	bf00      	nop
 800a514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a516:	bc08      	pop	{r3}
 800a518:	469e      	mov	lr, r3
 800a51a:	4770      	bx	lr
